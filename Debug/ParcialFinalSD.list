
ParcialFinalSD.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001410  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000248  080014d0  080014d0  000024d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001718  08001718  00002720  2**0
                  CONTENTS
  4 .ARM          00000000  08001718  08001718  00002720  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001718  08001720  00002720  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001718  08001718  00002718  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800171c  0800171c  0000271c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000000  20000000  20000000  00002720  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000003c  20000000  08001720  00003000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000003c  08001720  0000303c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00002720  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000cc7  00000000  00000000  00002748  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000031d  00000000  00000000  0000340f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000000f0  00000000  00000000  00003730  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000000b4  00000000  00000000  00003820  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000b437  00000000  00000000  000038d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000011e0  00000000  00000000  0000ed0b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0003d21d  00000000  00000000  0000feeb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0004d108  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000002d4  00000000  00000000  0004d14c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000065  00000000  00000000  0004d420  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000000 	.word	0x20000000
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080014b8 	.word	0x080014b8

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000004 	.word	0x20000004
 8000104:	080014b8 	.word	0x080014b8

08000108 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000108:	b580      	push	{r7, lr}
 800010a:	b082      	sub	sp, #8
 800010c:	af00      	add	r7, sp, #0
 800010e:	0002      	movs	r2, r0
 8000110:	1dfb      	adds	r3, r7, #7
 8000112:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000114:	1dfb      	adds	r3, r7, #7
 8000116:	781b      	ldrb	r3, [r3, #0]
 8000118:	2b7f      	cmp	r3, #127	@ 0x7f
 800011a:	d809      	bhi.n	8000130 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800011c:	1dfb      	adds	r3, r7, #7
 800011e:	781b      	ldrb	r3, [r3, #0]
 8000120:	001a      	movs	r2, r3
 8000122:	231f      	movs	r3, #31
 8000124:	401a      	ands	r2, r3
 8000126:	4b04      	ldr	r3, [pc, #16]	@ (8000138 <__NVIC_EnableIRQ+0x30>)
 8000128:	2101      	movs	r1, #1
 800012a:	4091      	lsls	r1, r2
 800012c:	000a      	movs	r2, r1
 800012e:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8000130:	46c0      	nop			@ (mov r8, r8)
 8000132:	46bd      	mov	sp, r7
 8000134:	b002      	add	sp, #8
 8000136:	bd80      	pop	{r7, pc}
 8000138:	e000e100 	.word	0xe000e100

0800013c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800013c:	b590      	push	{r4, r7, lr}
 800013e:	b083      	sub	sp, #12
 8000140:	af00      	add	r7, sp, #0
 8000142:	0002      	movs	r2, r0
 8000144:	6039      	str	r1, [r7, #0]
 8000146:	1dfb      	adds	r3, r7, #7
 8000148:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800014a:	1dfb      	adds	r3, r7, #7
 800014c:	781b      	ldrb	r3, [r3, #0]
 800014e:	2b7f      	cmp	r3, #127	@ 0x7f
 8000150:	d828      	bhi.n	80001a4 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000152:	4a2f      	ldr	r2, [pc, #188]	@ (8000210 <__NVIC_SetPriority+0xd4>)
 8000154:	1dfb      	adds	r3, r7, #7
 8000156:	781b      	ldrb	r3, [r3, #0]
 8000158:	b25b      	sxtb	r3, r3
 800015a:	089b      	lsrs	r3, r3, #2
 800015c:	33c0      	adds	r3, #192	@ 0xc0
 800015e:	009b      	lsls	r3, r3, #2
 8000160:	589b      	ldr	r3, [r3, r2]
 8000162:	1dfa      	adds	r2, r7, #7
 8000164:	7812      	ldrb	r2, [r2, #0]
 8000166:	0011      	movs	r1, r2
 8000168:	2203      	movs	r2, #3
 800016a:	400a      	ands	r2, r1
 800016c:	00d2      	lsls	r2, r2, #3
 800016e:	21ff      	movs	r1, #255	@ 0xff
 8000170:	4091      	lsls	r1, r2
 8000172:	000a      	movs	r2, r1
 8000174:	43d2      	mvns	r2, r2
 8000176:	401a      	ands	r2, r3
 8000178:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800017a:	683b      	ldr	r3, [r7, #0]
 800017c:	019b      	lsls	r3, r3, #6
 800017e:	22ff      	movs	r2, #255	@ 0xff
 8000180:	401a      	ands	r2, r3
 8000182:	1dfb      	adds	r3, r7, #7
 8000184:	781b      	ldrb	r3, [r3, #0]
 8000186:	0018      	movs	r0, r3
 8000188:	2303      	movs	r3, #3
 800018a:	4003      	ands	r3, r0
 800018c:	00db      	lsls	r3, r3, #3
 800018e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000190:	481f      	ldr	r0, [pc, #124]	@ (8000210 <__NVIC_SetPriority+0xd4>)
 8000192:	1dfb      	adds	r3, r7, #7
 8000194:	781b      	ldrb	r3, [r3, #0]
 8000196:	b25b      	sxtb	r3, r3
 8000198:	089b      	lsrs	r3, r3, #2
 800019a:	430a      	orrs	r2, r1
 800019c:	33c0      	adds	r3, #192	@ 0xc0
 800019e:	009b      	lsls	r3, r3, #2
 80001a0:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80001a2:	e031      	b.n	8000208 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80001a4:	4a1b      	ldr	r2, [pc, #108]	@ (8000214 <__NVIC_SetPriority+0xd8>)
 80001a6:	1dfb      	adds	r3, r7, #7
 80001a8:	781b      	ldrb	r3, [r3, #0]
 80001aa:	0019      	movs	r1, r3
 80001ac:	230f      	movs	r3, #15
 80001ae:	400b      	ands	r3, r1
 80001b0:	3b08      	subs	r3, #8
 80001b2:	089b      	lsrs	r3, r3, #2
 80001b4:	3306      	adds	r3, #6
 80001b6:	009b      	lsls	r3, r3, #2
 80001b8:	18d3      	adds	r3, r2, r3
 80001ba:	3304      	adds	r3, #4
 80001bc:	681b      	ldr	r3, [r3, #0]
 80001be:	1dfa      	adds	r2, r7, #7
 80001c0:	7812      	ldrb	r2, [r2, #0]
 80001c2:	0011      	movs	r1, r2
 80001c4:	2203      	movs	r2, #3
 80001c6:	400a      	ands	r2, r1
 80001c8:	00d2      	lsls	r2, r2, #3
 80001ca:	21ff      	movs	r1, #255	@ 0xff
 80001cc:	4091      	lsls	r1, r2
 80001ce:	000a      	movs	r2, r1
 80001d0:	43d2      	mvns	r2, r2
 80001d2:	401a      	ands	r2, r3
 80001d4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80001d6:	683b      	ldr	r3, [r7, #0]
 80001d8:	019b      	lsls	r3, r3, #6
 80001da:	22ff      	movs	r2, #255	@ 0xff
 80001dc:	401a      	ands	r2, r3
 80001de:	1dfb      	adds	r3, r7, #7
 80001e0:	781b      	ldrb	r3, [r3, #0]
 80001e2:	0018      	movs	r0, r3
 80001e4:	2303      	movs	r3, #3
 80001e6:	4003      	ands	r3, r0
 80001e8:	00db      	lsls	r3, r3, #3
 80001ea:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80001ec:	4809      	ldr	r0, [pc, #36]	@ (8000214 <__NVIC_SetPriority+0xd8>)
 80001ee:	1dfb      	adds	r3, r7, #7
 80001f0:	781b      	ldrb	r3, [r3, #0]
 80001f2:	001c      	movs	r4, r3
 80001f4:	230f      	movs	r3, #15
 80001f6:	4023      	ands	r3, r4
 80001f8:	3b08      	subs	r3, #8
 80001fa:	089b      	lsrs	r3, r3, #2
 80001fc:	430a      	orrs	r2, r1
 80001fe:	3306      	adds	r3, #6
 8000200:	009b      	lsls	r3, r3, #2
 8000202:	18c3      	adds	r3, r0, r3
 8000204:	3304      	adds	r3, #4
 8000206:	601a      	str	r2, [r3, #0]
}
 8000208:	46c0      	nop			@ (mov r8, r8)
 800020a:	46bd      	mov	sp, r7
 800020c:	b003      	add	sp, #12
 800020e:	bd90      	pop	{r4, r7, pc}
 8000210:	e000e100 	.word	0xe000e100
 8000214:	e000ed00 	.word	0xe000ed00

08000218 <main>:

//LED temporal
#define LED_PIN (1<<5)          /* PA5 - LED */
volatile uint8_t led_ticks = 0;   /* 1 tick = 2 ms */

int main(void) {
 8000218:	b580      	push	{r7, lr}
 800021a:	af00      	add	r7, sp, #0
	//1. Habilitar HSI 16 MHz como SYSCLK
    RCC->CR |= (1<<0);   // HSI ON
 800021c:	4b0e      	ldr	r3, [pc, #56]	@ (8000258 <main+0x40>)
 800021e:	681a      	ldr	r2, [r3, #0]
 8000220:	4b0d      	ldr	r3, [pc, #52]	@ (8000258 <main+0x40>)
 8000222:	2101      	movs	r1, #1
 8000224:	430a      	orrs	r2, r1
 8000226:	601a      	str	r2, [r3, #0]
    RCC->CFGR |= (1<<0); // HSI16 como SYSCLK
 8000228:	4b0b      	ldr	r3, [pc, #44]	@ (8000258 <main+0x40>)
 800022a:	68da      	ldr	r2, [r3, #12]
 800022c:	4b0a      	ldr	r3, [pc, #40]	@ (8000258 <main+0x40>)
 800022e:	2101      	movs	r1, #1
 8000230:	430a      	orrs	r2, r1
 8000232:	60da      	str	r2, [r3, #12]

    //2. Inicializar  puertos y timers
    PORTS_init();   //Configuracion de todos los puertos
 8000234:	f000 f896 	bl	8000364 <PORTS_init>
    TIM2config();   //Configuracion del TIM2 a  200 ms
 8000238:	f000 f9b6 	bl	80005a8 <TIM2config>
    TIM21config();  //Configuracion del TIM21 a 2 ms
 800023c:	f000 fc42 	bl	8000ac4 <TIM21config>

    //3. Inicializar LCD
    LCD_INIT();
 8000240:	f000 f940 	bl	80004c4 <LCD_INIT>

    // 4. Inicializar USART1 y USART2
	USART1_Init();
 8000244:	f000 feac 	bl	8000fa0 <USART1_Init>
	USART2Init();
 8000248:	f000 fdf0 	bl	8000e2c <USART2Init>

	//Configuración inicial del módulo
	configureGSMForSMS();
 800024c:	f001 f8c2 	bl	80013d4 <configureGSMForSMS>
  \details Enables IRQ interrupts by clearing special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 8000250:	b662      	cpsie	i
}
 8000252:	46c0      	nop			@ (mov r8, r8)

    __enable_irq();

    while (1);
 8000254:	46c0      	nop			@ (mov r8, r8)
 8000256:	e7fd      	b.n	8000254 <main+0x3c>
 8000258:	40021000 	.word	0x40021000

0800025c <LCD_command>:

}

//Envia comando al LCD
void LCD_command(unsigned char command) {
 800025c:	b580      	push	{r7, lr}
 800025e:	b084      	sub	sp, #16
 8000260:	af00      	add	r7, sp, #0
 8000262:	0002      	movs	r2, r0
 8000264:	1dfb      	adds	r3, r7, #7
 8000266:	701a      	strb	r2, [r3, #0]
    GPIOC->BSRR = (RS | RW) << 16; // RS=0, RW=0
 8000268:	4b1a      	ldr	r3, [pc, #104]	@ (80002d4 <LCD_command+0x78>)
 800026a:	22c0      	movs	r2, #192	@ 0xc0
 800026c:	0292      	lsls	r2, r2, #10
 800026e:	619a      	str	r2, [r3, #24]
    GPIOC->ODR &= ~(0xFF0);
 8000270:	4b18      	ldr	r3, [pc, #96]	@ (80002d4 <LCD_command+0x78>)
 8000272:	695a      	ldr	r2, [r3, #20]
 8000274:	4b17      	ldr	r3, [pc, #92]	@ (80002d4 <LCD_command+0x78>)
 8000276:	4918      	ldr	r1, [pc, #96]	@ (80002d8 <LCD_command+0x7c>)
 8000278:	400a      	ands	r2, r1
 800027a:	615a      	str	r2, [r3, #20]
    GPIOC->ODR |= (command << 4);
 800027c:	4b15      	ldr	r3, [pc, #84]	@ (80002d4 <LCD_command+0x78>)
 800027e:	6959      	ldr	r1, [r3, #20]
 8000280:	1dfb      	adds	r3, r7, #7
 8000282:	781b      	ldrb	r3, [r3, #0]
 8000284:	011a      	lsls	r2, r3, #4
 8000286:	4b13      	ldr	r3, [pc, #76]	@ (80002d4 <LCD_command+0x78>)
 8000288:	430a      	orrs	r2, r1
 800028a:	615a      	str	r2, [r3, #20]
    GPIOC->BSRR = EN;
 800028c:	4b11      	ldr	r3, [pc, #68]	@ (80002d4 <LCD_command+0x78>)
 800028e:	2208      	movs	r2, #8
 8000290:	619a      	str	r2, [r3, #24]
    for (volatile int i = 0; i < 800; i++) __NOP();  // Pausa de 1ms
 8000292:	2300      	movs	r3, #0
 8000294:	60fb      	str	r3, [r7, #12]
 8000296:	e003      	b.n	80002a0 <LCD_command+0x44>
 8000298:	46c0      	nop			@ (mov r8, r8)
 800029a:	68fb      	ldr	r3, [r7, #12]
 800029c:	3301      	adds	r3, #1
 800029e:	60fb      	str	r3, [r7, #12]
 80002a0:	68fa      	ldr	r2, [r7, #12]
 80002a2:	23c8      	movs	r3, #200	@ 0xc8
 80002a4:	009b      	lsls	r3, r3, #2
 80002a6:	429a      	cmp	r2, r3
 80002a8:	dbf6      	blt.n	8000298 <LCD_command+0x3c>
    GPIOC->BSRR = EN << 16;
 80002aa:	4b0a      	ldr	r3, [pc, #40]	@ (80002d4 <LCD_command+0x78>)
 80002ac:	2280      	movs	r2, #128	@ 0x80
 80002ae:	0312      	lsls	r2, r2, #12
 80002b0:	619a      	str	r2, [r3, #24]
    for (volatile int i = 0; i < 1600; i++) __NOP(); // Pausa de 2ms
 80002b2:	2300      	movs	r3, #0
 80002b4:	60bb      	str	r3, [r7, #8]
 80002b6:	e003      	b.n	80002c0 <LCD_command+0x64>
 80002b8:	46c0      	nop			@ (mov r8, r8)
 80002ba:	68bb      	ldr	r3, [r7, #8]
 80002bc:	3301      	adds	r3, #1
 80002be:	60bb      	str	r3, [r7, #8]
 80002c0:	68ba      	ldr	r2, [r7, #8]
 80002c2:	23c8      	movs	r3, #200	@ 0xc8
 80002c4:	00db      	lsls	r3, r3, #3
 80002c6:	429a      	cmp	r2, r3
 80002c8:	dbf6      	blt.n	80002b8 <LCD_command+0x5c>
}
 80002ca:	46c0      	nop			@ (mov r8, r8)
 80002cc:	46c0      	nop			@ (mov r8, r8)
 80002ce:	46bd      	mov	sp, r7
 80002d0:	b004      	add	sp, #16
 80002d2:	bd80      	pop	{r7, pc}
 80002d4:	50000800 	.word	0x50000800
 80002d8:	fffff00f 	.word	0xfffff00f

080002dc <LCD_data>:

void LCD_data(char data) {
 80002dc:	b580      	push	{r7, lr}
 80002de:	b084      	sub	sp, #16
 80002e0:	af00      	add	r7, sp, #0
 80002e2:	0002      	movs	r2, r0
 80002e4:	1dfb      	adds	r3, r7, #7
 80002e6:	701a      	strb	r2, [r3, #0]
    GPIOC->BSRR = RS;      // RS=1
 80002e8:	4b1c      	ldr	r3, [pc, #112]	@ (800035c <LCD_data+0x80>)
 80002ea:	2201      	movs	r2, #1
 80002ec:	619a      	str	r2, [r3, #24]
    GPIOC->BSRR = RW << 16; // RW=0
 80002ee:	4b1b      	ldr	r3, [pc, #108]	@ (800035c <LCD_data+0x80>)
 80002f0:	2280      	movs	r2, #128	@ 0x80
 80002f2:	0292      	lsls	r2, r2, #10
 80002f4:	619a      	str	r2, [r3, #24]
    GPIOC->ODR &= ~(0xFF0);
 80002f6:	4b19      	ldr	r3, [pc, #100]	@ (800035c <LCD_data+0x80>)
 80002f8:	695a      	ldr	r2, [r3, #20]
 80002fa:	4b18      	ldr	r3, [pc, #96]	@ (800035c <LCD_data+0x80>)
 80002fc:	4918      	ldr	r1, [pc, #96]	@ (8000360 <LCD_data+0x84>)
 80002fe:	400a      	ands	r2, r1
 8000300:	615a      	str	r2, [r3, #20]
    GPIOC->ODR |= (data << 4);
 8000302:	4b16      	ldr	r3, [pc, #88]	@ (800035c <LCD_data+0x80>)
 8000304:	6959      	ldr	r1, [r3, #20]
 8000306:	1dfb      	adds	r3, r7, #7
 8000308:	781b      	ldrb	r3, [r3, #0]
 800030a:	011a      	lsls	r2, r3, #4
 800030c:	4b13      	ldr	r3, [pc, #76]	@ (800035c <LCD_data+0x80>)
 800030e:	430a      	orrs	r2, r1
 8000310:	615a      	str	r2, [r3, #20]
    GPIOC->BSRR = EN;
 8000312:	4b12      	ldr	r3, [pc, #72]	@ (800035c <LCD_data+0x80>)
 8000314:	2208      	movs	r2, #8
 8000316:	619a      	str	r2, [r3, #24]
    for (volatile int i = 0; i < 800; i++) __NOP();  // Pausa de 1ms
 8000318:	2300      	movs	r3, #0
 800031a:	60fb      	str	r3, [r7, #12]
 800031c:	e003      	b.n	8000326 <LCD_data+0x4a>
 800031e:	46c0      	nop			@ (mov r8, r8)
 8000320:	68fb      	ldr	r3, [r7, #12]
 8000322:	3301      	adds	r3, #1
 8000324:	60fb      	str	r3, [r7, #12]
 8000326:	68fa      	ldr	r2, [r7, #12]
 8000328:	23c8      	movs	r3, #200	@ 0xc8
 800032a:	009b      	lsls	r3, r3, #2
 800032c:	429a      	cmp	r2, r3
 800032e:	dbf6      	blt.n	800031e <LCD_data+0x42>
    GPIOC->BSRR = EN << 16;
 8000330:	4b0a      	ldr	r3, [pc, #40]	@ (800035c <LCD_data+0x80>)
 8000332:	2280      	movs	r2, #128	@ 0x80
 8000334:	0312      	lsls	r2, r2, #12
 8000336:	619a      	str	r2, [r3, #24]
    for (volatile int i = 0; i < 1600; i++) __NOP(); // Pausa de 2ms
 8000338:	2300      	movs	r3, #0
 800033a:	60bb      	str	r3, [r7, #8]
 800033c:	e003      	b.n	8000346 <LCD_data+0x6a>
 800033e:	46c0      	nop			@ (mov r8, r8)
 8000340:	68bb      	ldr	r3, [r7, #8]
 8000342:	3301      	adds	r3, #1
 8000344:	60bb      	str	r3, [r7, #8]
 8000346:	68ba      	ldr	r2, [r7, #8]
 8000348:	23c8      	movs	r3, #200	@ 0xc8
 800034a:	00db      	lsls	r3, r3, #3
 800034c:	429a      	cmp	r2, r3
 800034e:	dbf6      	blt.n	800033e <LCD_data+0x62>
}
 8000350:	46c0      	nop			@ (mov r8, r8)
 8000352:	46c0      	nop			@ (mov r8, r8)
 8000354:	46bd      	mov	sp, r7
 8000356:	b004      	add	sp, #16
 8000358:	bd80      	pop	{r7, pc}
 800035a:	46c0      	nop			@ (mov r8, r8)
 800035c:	50000800 	.word	0x50000800
 8000360:	fffff00f 	.word	0xfffff00f

08000364 <PORTS_init>:

void PORTS_init(void) {
 8000364:	b580      	push	{r7, lr}
 8000366:	b082      	sub	sp, #8
 8000368:	af00      	add	r7, sp, #0
    RCC->IOPENR |= (1<<2); // Habilitar GPIOC y los pines para el LCD
 800036a:	4b4a      	ldr	r3, [pc, #296]	@ (8000494 <PORTS_init+0x130>)
 800036c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800036e:	4b49      	ldr	r3, [pc, #292]	@ (8000494 <PORTS_init+0x130>)
 8000370:	2104      	movs	r1, #4
 8000372:	430a      	orrs	r2, r1
 8000374:	62da      	str	r2, [r3, #44]	@ 0x2c
    for (int i = 0; i <= 11; i++) {
 8000376:	2300      	movs	r3, #0
 8000378:	607b      	str	r3, [r7, #4]
 800037a:	e019      	b.n	80003b0 <PORTS_init+0x4c>
        GPIOC->MODER &= ~(0x3 << (2*i));
 800037c:	4b46      	ldr	r3, [pc, #280]	@ (8000498 <PORTS_init+0x134>)
 800037e:	681a      	ldr	r2, [r3, #0]
 8000380:	687b      	ldr	r3, [r7, #4]
 8000382:	005b      	lsls	r3, r3, #1
 8000384:	2103      	movs	r1, #3
 8000386:	4099      	lsls	r1, r3
 8000388:	000b      	movs	r3, r1
 800038a:	43db      	mvns	r3, r3
 800038c:	0019      	movs	r1, r3
 800038e:	4b42      	ldr	r3, [pc, #264]	@ (8000498 <PORTS_init+0x134>)
 8000390:	400a      	ands	r2, r1
 8000392:	601a      	str	r2, [r3, #0]
        GPIOC->MODER |=  (0x1 << (2*i));
 8000394:	4b40      	ldr	r3, [pc, #256]	@ (8000498 <PORTS_init+0x134>)
 8000396:	681a      	ldr	r2, [r3, #0]
 8000398:	687b      	ldr	r3, [r7, #4]
 800039a:	005b      	lsls	r3, r3, #1
 800039c:	2101      	movs	r1, #1
 800039e:	4099      	lsls	r1, r3
 80003a0:	000b      	movs	r3, r1
 80003a2:	0019      	movs	r1, r3
 80003a4:	4b3c      	ldr	r3, [pc, #240]	@ (8000498 <PORTS_init+0x134>)
 80003a6:	430a      	orrs	r2, r1
 80003a8:	601a      	str	r2, [r3, #0]
    for (int i = 0; i <= 11; i++) {
 80003aa:	687b      	ldr	r3, [r7, #4]
 80003ac:	3301      	adds	r3, #1
 80003ae:	607b      	str	r3, [r7, #4]
 80003b0:	687b      	ldr	r3, [r7, #4]
 80003b2:	2b0b      	cmp	r3, #11
 80003b4:	dde2      	ble.n	800037c <PORTS_init+0x18>
    }

    RCC->IOPENR |= (1<<0); //Enable clock GPIOA
 80003b6:	4b37      	ldr	r3, [pc, #220]	@ (8000494 <PORTS_init+0x130>)
 80003b8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80003ba:	4b36      	ldr	r3, [pc, #216]	@ (8000494 <PORTS_init+0x130>)
 80003bc:	2101      	movs	r1, #1
 80003be:	430a      	orrs	r2, r1
 80003c0:	62da      	str	r2, [r3, #44]	@ 0x2c
    RCC->IOPENR |= (1<<1); //Enable clock GPIOB
 80003c2:	4b34      	ldr	r3, [pc, #208]	@ (8000494 <PORTS_init+0x130>)
 80003c4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80003c6:	4b33      	ldr	r3, [pc, #204]	@ (8000494 <PORTS_init+0x130>)
 80003c8:	2102      	movs	r1, #2
 80003ca:	430a      	orrs	r2, r1
 80003cc:	62da      	str	r2, [r3, #44]	@ 0x2c

    GPIOA->MODER &= ~(1<<11); //Config PA5 como output Salida  0
 80003ce:	23a0      	movs	r3, #160	@ 0xa0
 80003d0:	05db      	lsls	r3, r3, #23
 80003d2:	681a      	ldr	r2, [r3, #0]
 80003d4:	23a0      	movs	r3, #160	@ 0xa0
 80003d6:	05db      	lsls	r3, r3, #23
 80003d8:	4930      	ldr	r1, [pc, #192]	@ (800049c <PORTS_init+0x138>)
 80003da:	400a      	ands	r2, r1
 80003dc:	601a      	str	r2, [r3, #0]
    GPIOA->MODER &= ~(1 << 25);   // Configurar PA12 como salida
 80003de:	23a0      	movs	r3, #160	@ 0xa0
 80003e0:	05db      	lsls	r3, r3, #23
 80003e2:	681a      	ldr	r2, [r3, #0]
 80003e4:	23a0      	movs	r3, #160	@ 0xa0
 80003e6:	05db      	lsls	r3, r3, #23
 80003e8:	492d      	ldr	r1, [pc, #180]	@ (80004a0 <PORTS_init+0x13c>)
 80003ea:	400a      	ands	r2, r1
 80003ec:	601a      	str	r2, [r3, #0]

    GPIOB->MODER &= ~(1<<1); //Config PB0 como output Salida  0
 80003ee:	4b2d      	ldr	r3, [pc, #180]	@ (80004a4 <PORTS_init+0x140>)
 80003f0:	681a      	ldr	r2, [r3, #0]
 80003f2:	4b2c      	ldr	r3, [pc, #176]	@ (80004a4 <PORTS_init+0x140>)
 80003f4:	2102      	movs	r1, #2
 80003f6:	438a      	bics	r2, r1
 80003f8:	601a      	str	r2, [r3, #0]
	GPIOB->MODER &= ~(1<<3); //Config PB1 como output Salida  1
 80003fa:	4b2a      	ldr	r3, [pc, #168]	@ (80004a4 <PORTS_init+0x140>)
 80003fc:	681a      	ldr	r2, [r3, #0]
 80003fe:	4b29      	ldr	r3, [pc, #164]	@ (80004a4 <PORTS_init+0x140>)
 8000400:	2108      	movs	r1, #8
 8000402:	438a      	bics	r2, r1
 8000404:	601a      	str	r2, [r3, #0]
	GPIOB->MODER &= ~(1<<5); //Config PB2 como output Salida  2
 8000406:	4b27      	ldr	r3, [pc, #156]	@ (80004a4 <PORTS_init+0x140>)
 8000408:	681a      	ldr	r2, [r3, #0]
 800040a:	4b26      	ldr	r3, [pc, #152]	@ (80004a4 <PORTS_init+0x140>)
 800040c:	2120      	movs	r1, #32
 800040e:	438a      	bics	r2, r1
 8000410:	601a      	str	r2, [r3, #0]
	GPIOB->MODER &= ~(1<<7); //Config PB3 como output Salida  3
 8000412:	4b24      	ldr	r3, [pc, #144]	@ (80004a4 <PORTS_init+0x140>)
 8000414:	681a      	ldr	r2, [r3, #0]
 8000416:	4b23      	ldr	r3, [pc, #140]	@ (80004a4 <PORTS_init+0x140>)
 8000418:	2180      	movs	r1, #128	@ 0x80
 800041a:	438a      	bics	r2, r1
 800041c:	601a      	str	r2, [r3, #0]
	GPIOB->MODER &= ~(1<<9); //Config PB4 como output Salida  4
 800041e:	4b21      	ldr	r3, [pc, #132]	@ (80004a4 <PORTS_init+0x140>)
 8000420:	681a      	ldr	r2, [r3, #0]
 8000422:	4b20      	ldr	r3, [pc, #128]	@ (80004a4 <PORTS_init+0x140>)
 8000424:	4920      	ldr	r1, [pc, #128]	@ (80004a8 <PORTS_init+0x144>)
 8000426:	400a      	ands	r2, r1
 8000428:	601a      	str	r2, [r3, #0]
	GPIOB->MODER &= ~(1<<11); //Config PB5 como output Salida 5
 800042a:	4b1e      	ldr	r3, [pc, #120]	@ (80004a4 <PORTS_init+0x140>)
 800042c:	681a      	ldr	r2, [r3, #0]
 800042e:	4b1d      	ldr	r3, [pc, #116]	@ (80004a4 <PORTS_init+0x140>)
 8000430:	491a      	ldr	r1, [pc, #104]	@ (800049c <PORTS_init+0x138>)
 8000432:	400a      	ands	r2, r1
 8000434:	601a      	str	r2, [r3, #0]
	GPIOB->MODER &= ~(1<<13); //Config PB6 como output Salida 6
 8000436:	4b1b      	ldr	r3, [pc, #108]	@ (80004a4 <PORTS_init+0x140>)
 8000438:	681a      	ldr	r2, [r3, #0]
 800043a:	4b1a      	ldr	r3, [pc, #104]	@ (80004a4 <PORTS_init+0x140>)
 800043c:	491b      	ldr	r1, [pc, #108]	@ (80004ac <PORTS_init+0x148>)
 800043e:	400a      	ands	r2, r1
 8000440:	601a      	str	r2, [r3, #0]
	GPIOB->MODER &= ~(1<<15); //Config PB7 como output (Push 1)
 8000442:	4b18      	ldr	r3, [pc, #96]	@ (80004a4 <PORTS_init+0x140>)
 8000444:	681a      	ldr	r2, [r3, #0]
 8000446:	4b17      	ldr	r3, [pc, #92]	@ (80004a4 <PORTS_init+0x140>)
 8000448:	4919      	ldr	r1, [pc, #100]	@ (80004b0 <PORTS_init+0x14c>)
 800044a:	400a      	ands	r2, r1
 800044c:	601a      	str	r2, [r3, #0]
	GPIOB->MODER &= ~(1<<17); //Config PB8 como output (Push 2)
 800044e:	4b15      	ldr	r3, [pc, #84]	@ (80004a4 <PORTS_init+0x140>)
 8000450:	681a      	ldr	r2, [r3, #0]
 8000452:	4b14      	ldr	r3, [pc, #80]	@ (80004a4 <PORTS_init+0x140>)
 8000454:	4917      	ldr	r1, [pc, #92]	@ (80004b4 <PORTS_init+0x150>)
 8000456:	400a      	ands	r2, r1
 8000458:	601a      	str	r2, [r3, #0]
	GPIOB->MODER &= ~(1<<19); //Config PB9 como output (Push 3)
 800045a:	4b12      	ldr	r3, [pc, #72]	@ (80004a4 <PORTS_init+0x140>)
 800045c:	681a      	ldr	r2, [r3, #0]
 800045e:	4b11      	ldr	r3, [pc, #68]	@ (80004a4 <PORTS_init+0x140>)
 8000460:	4915      	ldr	r1, [pc, #84]	@ (80004b8 <PORTS_init+0x154>)
 8000462:	400a      	ands	r2, r1
 8000464:	601a      	str	r2, [r3, #0]
	GPIOB->MODER &= ~(1<<21); //Config PB10 como output (Push 4)
 8000466:	4b0f      	ldr	r3, [pc, #60]	@ (80004a4 <PORTS_init+0x140>)
 8000468:	681a      	ldr	r2, [r3, #0]
 800046a:	4b0e      	ldr	r3, [pc, #56]	@ (80004a4 <PORTS_init+0x140>)
 800046c:	4913      	ldr	r1, [pc, #76]	@ (80004bc <PORTS_init+0x158>)
 800046e:	400a      	ands	r2, r1
 8000470:	601a      	str	r2, [r3, #0]
	GPIOB->MODER &= ~(1<<23); //Config PB11 como output (Push 4)
 8000472:	4b0c      	ldr	r3, [pc, #48]	@ (80004a4 <PORTS_init+0x140>)
 8000474:	681a      	ldr	r2, [r3, #0]
 8000476:	4b0b      	ldr	r3, [pc, #44]	@ (80004a4 <PORTS_init+0x140>)
 8000478:	4911      	ldr	r1, [pc, #68]	@ (80004c0 <PORTS_init+0x15c>)
 800047a:	400a      	ands	r2, r1
 800047c:	601a      	str	r2, [r3, #0]
	GPIOB->MODER &= ~(1<<25); //Config PB12 como output (Push 4)
 800047e:	4b09      	ldr	r3, [pc, #36]	@ (80004a4 <PORTS_init+0x140>)
 8000480:	681a      	ldr	r2, [r3, #0]
 8000482:	4b08      	ldr	r3, [pc, #32]	@ (80004a4 <PORTS_init+0x140>)
 8000484:	4906      	ldr	r1, [pc, #24]	@ (80004a0 <PORTS_init+0x13c>)
 8000486:	400a      	ands	r2, r1
 8000488:	601a      	str	r2, [r3, #0]
}
 800048a:	46c0      	nop			@ (mov r8, r8)
 800048c:	46bd      	mov	sp, r7
 800048e:	b002      	add	sp, #8
 8000490:	bd80      	pop	{r7, pc}
 8000492:	46c0      	nop			@ (mov r8, r8)
 8000494:	40021000 	.word	0x40021000
 8000498:	50000800 	.word	0x50000800
 800049c:	fffff7ff 	.word	0xfffff7ff
 80004a0:	fdffffff 	.word	0xfdffffff
 80004a4:	50000400 	.word	0x50000400
 80004a8:	fffffdff 	.word	0xfffffdff
 80004ac:	ffffdfff 	.word	0xffffdfff
 80004b0:	ffff7fff 	.word	0xffff7fff
 80004b4:	fffdffff 	.word	0xfffdffff
 80004b8:	fff7ffff 	.word	0xfff7ffff
 80004bc:	ffdfffff 	.word	0xffdfffff
 80004c0:	ff7fffff 	.word	0xff7fffff

080004c4 <LCD_INIT>:

void LCD_INIT(void) {
 80004c4:	b580      	push	{r7, lr}
 80004c6:	b088      	sub	sp, #32
 80004c8:	af00      	add	r7, sp, #0
	for (volatile int i = 0; i < 40000; i++) __NOP();  // Pausa de 50ms
 80004ca:	2300      	movs	r3, #0
 80004cc:	61fb      	str	r3, [r7, #28]
 80004ce:	e003      	b.n	80004d8 <LCD_INIT+0x14>
 80004d0:	46c0      	nop			@ (mov r8, r8)
 80004d2:	69fb      	ldr	r3, [r7, #28]
 80004d4:	3301      	adds	r3, #1
 80004d6:	61fb      	str	r3, [r7, #28]
 80004d8:	69fb      	ldr	r3, [r7, #28]
 80004da:	4a32      	ldr	r2, [pc, #200]	@ (80005a4 <LCD_INIT+0xe0>)
 80004dc:	4293      	cmp	r3, r2
 80004de:	ddf7      	ble.n	80004d0 <LCD_INIT+0xc>
    LCD_command(0x30);
 80004e0:	2030      	movs	r0, #48	@ 0x30
 80004e2:	f7ff febb 	bl	800025c <LCD_command>
    for (volatile int i = 0; i < 4000; i++) __NOP();  // Pausa de 5ms
 80004e6:	2300      	movs	r3, #0
 80004e8:	61bb      	str	r3, [r7, #24]
 80004ea:	e003      	b.n	80004f4 <LCD_INIT+0x30>
 80004ec:	46c0      	nop			@ (mov r8, r8)
 80004ee:	69bb      	ldr	r3, [r7, #24]
 80004f0:	3301      	adds	r3, #1
 80004f2:	61bb      	str	r3, [r7, #24]
 80004f4:	69ba      	ldr	r2, [r7, #24]
 80004f6:	23fa      	movs	r3, #250	@ 0xfa
 80004f8:	011b      	lsls	r3, r3, #4
 80004fa:	429a      	cmp	r2, r3
 80004fc:	dbf6      	blt.n	80004ec <LCD_INIT+0x28>
    LCD_command(0x30);
 80004fe:	2030      	movs	r0, #48	@ 0x30
 8000500:	f7ff feac 	bl	800025c <LCD_command>
    for (volatile int i = 0; i < 800; i++) __NOP();  // Pausa de 1ms
 8000504:	2300      	movs	r3, #0
 8000506:	617b      	str	r3, [r7, #20]
 8000508:	e003      	b.n	8000512 <LCD_INIT+0x4e>
 800050a:	46c0      	nop			@ (mov r8, r8)
 800050c:	697b      	ldr	r3, [r7, #20]
 800050e:	3301      	adds	r3, #1
 8000510:	617b      	str	r3, [r7, #20]
 8000512:	697a      	ldr	r2, [r7, #20]
 8000514:	23c8      	movs	r3, #200	@ 0xc8
 8000516:	009b      	lsls	r3, r3, #2
 8000518:	429a      	cmp	r2, r3
 800051a:	dbf6      	blt.n	800050a <LCD_INIT+0x46>
    LCD_command(0x30);
 800051c:	2030      	movs	r0, #48	@ 0x30
 800051e:	f7ff fe9d 	bl	800025c <LCD_command>
    for (volatile int i = 0; i < 800; i++) __NOP();  // Pausa de 1ms
 8000522:	2300      	movs	r3, #0
 8000524:	613b      	str	r3, [r7, #16]
 8000526:	e003      	b.n	8000530 <LCD_INIT+0x6c>
 8000528:	46c0      	nop			@ (mov r8, r8)
 800052a:	693b      	ldr	r3, [r7, #16]
 800052c:	3301      	adds	r3, #1
 800052e:	613b      	str	r3, [r7, #16]
 8000530:	693a      	ldr	r2, [r7, #16]
 8000532:	23c8      	movs	r3, #200	@ 0xc8
 8000534:	009b      	lsls	r3, r3, #2
 8000536:	429a      	cmp	r2, r3
 8000538:	dbf6      	blt.n	8000528 <LCD_INIT+0x64>
    LCD_command(0x38); // 8 bits, 2 líneas
 800053a:	2038      	movs	r0, #56	@ 0x38
 800053c:	f7ff fe8e 	bl	800025c <LCD_command>
    for (volatile int i = 0; i < 800; i++) __NOP();  // Pausa de 1ms
 8000540:	2300      	movs	r3, #0
 8000542:	60fb      	str	r3, [r7, #12]
 8000544:	e003      	b.n	800054e <LCD_INIT+0x8a>
 8000546:	46c0      	nop			@ (mov r8, r8)
 8000548:	68fb      	ldr	r3, [r7, #12]
 800054a:	3301      	adds	r3, #1
 800054c:	60fb      	str	r3, [r7, #12]
 800054e:	68fa      	ldr	r2, [r7, #12]
 8000550:	23c8      	movs	r3, #200	@ 0xc8
 8000552:	009b      	lsls	r3, r3, #2
 8000554:	429a      	cmp	r2, r3
 8000556:	dbf6      	blt.n	8000546 <LCD_INIT+0x82>
    LCD_command(0x06); // Modo entrada (incremento)
 8000558:	2006      	movs	r0, #6
 800055a:	f7ff fe7f 	bl	800025c <LCD_command>
    for (volatile int i = 0; i < 800; i++) __NOP();  // Pausa de 1ms
 800055e:	2300      	movs	r3, #0
 8000560:	60bb      	str	r3, [r7, #8]
 8000562:	e003      	b.n	800056c <LCD_INIT+0xa8>
 8000564:	46c0      	nop			@ (mov r8, r8)
 8000566:	68bb      	ldr	r3, [r7, #8]
 8000568:	3301      	adds	r3, #1
 800056a:	60bb      	str	r3, [r7, #8]
 800056c:	68ba      	ldr	r2, [r7, #8]
 800056e:	23c8      	movs	r3, #200	@ 0xc8
 8000570:	009b      	lsls	r3, r3, #2
 8000572:	429a      	cmp	r2, r3
 8000574:	dbf6      	blt.n	8000564 <LCD_INIT+0xa0>
    LCD_command(0x01); // Clear Display
 8000576:	2001      	movs	r0, #1
 8000578:	f7ff fe70 	bl	800025c <LCD_command>
    for (volatile int i = 0; i < 1600; i++) __NOP();  // Pausa de 2ms
 800057c:	2300      	movs	r3, #0
 800057e:	607b      	str	r3, [r7, #4]
 8000580:	e003      	b.n	800058a <LCD_INIT+0xc6>
 8000582:	46c0      	nop			@ (mov r8, r8)
 8000584:	687b      	ldr	r3, [r7, #4]
 8000586:	3301      	adds	r3, #1
 8000588:	607b      	str	r3, [r7, #4]
 800058a:	687a      	ldr	r2, [r7, #4]
 800058c:	23c8      	movs	r3, #200	@ 0xc8
 800058e:	00db      	lsls	r3, r3, #3
 8000590:	429a      	cmp	r2, r3
 8000592:	dbf6      	blt.n	8000582 <LCD_INIT+0xbe>
    LCD_command(0x0C); // Display ON, cursor OFF
 8000594:	200c      	movs	r0, #12
 8000596:	f7ff fe61 	bl	800025c <LCD_command>
}
 800059a:	46c0      	nop			@ (mov r8, r8)
 800059c:	46bd      	mov	sp, r7
 800059e:	b008      	add	sp, #32
 80005a0:	bd80      	pop	{r7, pc}
 80005a2:	46c0      	nop			@ (mov r8, r8)
 80005a4:	00009c3f 	.word	0x00009c3f

080005a8 <TIM2config>:

void TIM2config(void) {
 80005a8:	b580      	push	{r7, lr}
 80005aa:	af00      	add	r7, sp, #0
    RCC->APB1ENR |= (1<<0);   // Habilitar reloj a TIM2
 80005ac:	4b11      	ldr	r3, [pc, #68]	@ (80005f4 <TIM2config+0x4c>)
 80005ae:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80005b0:	4b10      	ldr	r3, [pc, #64]	@ (80005f4 <TIM2config+0x4c>)
 80005b2:	2101      	movs	r1, #1
 80005b4:	430a      	orrs	r2, r1
 80005b6:	639a      	str	r2, [r3, #56]	@ 0x38
    TIM2->PSC = 16000 - 1;    // Prescaler: 16 MHz / 16000 = 1 kHz (1ms)
 80005b8:	2380      	movs	r3, #128	@ 0x80
 80005ba:	05db      	lsls	r3, r3, #23
 80005bc:	4a0e      	ldr	r2, [pc, #56]	@ (80005f8 <TIM2config+0x50>)
 80005be:	629a      	str	r2, [r3, #40]	@ 0x28
    TIM2->ARR = 200 - 1;      // Cada 200 * 1 ms = 200 ms
 80005c0:	2380      	movs	r3, #128	@ 0x80
 80005c2:	05db      	lsls	r3, r3, #23
 80005c4:	22c7      	movs	r2, #199	@ 0xc7
 80005c6:	62da      	str	r2, [r3, #44]	@ 0x2c
    TIM2->CNT = 0;
 80005c8:	2380      	movs	r3, #128	@ 0x80
 80005ca:	05db      	lsls	r3, r3, #23
 80005cc:	2200      	movs	r2, #0
 80005ce:	625a      	str	r2, [r3, #36]	@ 0x24
    TIM2->DIER |= (1<<0);     // Habilitar interrupción
 80005d0:	2380      	movs	r3, #128	@ 0x80
 80005d2:	05db      	lsls	r3, r3, #23
 80005d4:	68da      	ldr	r2, [r3, #12]
 80005d6:	2380      	movs	r3, #128	@ 0x80
 80005d8:	05db      	lsls	r3, r3, #23
 80005da:	2101      	movs	r1, #1
 80005dc:	430a      	orrs	r2, r1
 80005de:	60da      	str	r2, [r3, #12]
    TIM2->CR1 = (1<<0);       // Enable contador
 80005e0:	2380      	movs	r3, #128	@ 0x80
 80005e2:	05db      	lsls	r3, r3, #23
 80005e4:	2201      	movs	r2, #1
 80005e6:	601a      	str	r2, [r3, #0]
    NVIC_EnableIRQ(TIM2_IRQn);// Permitir interrupción
 80005e8:	200f      	movs	r0, #15
 80005ea:	f7ff fd8d 	bl	8000108 <__NVIC_EnableIRQ>
}
 80005ee:	46c0      	nop			@ (mov r8, r8)
 80005f0:	46bd      	mov	sp, r7
 80005f2:	bd80      	pop	{r7, pc}
 80005f4:	40021000 	.word	0x40021000
 80005f8:	00003e7f 	.word	0x00003e7f

080005fc <TIM2_IRQHandler>:

void TIM2_IRQHandler(void) {
 80005fc:	b580      	push	{r7, lr}
 80005fe:	af00      	add	r7, sp, #0
    TIM2->SR &= ~(1<<0); // Limpiar bandera de actualización (UIF)
 8000600:	2380      	movs	r3, #128	@ 0x80
 8000602:	05db      	lsls	r3, r3, #23
 8000604:	691a      	ldr	r2, [r3, #16]
 8000606:	2380      	movs	r3, #128	@ 0x80
 8000608:	05db      	lsls	r3, r3, #23
 800060a:	2101      	movs	r1, #1
 800060c:	438a      	bics	r2, r1
 800060e:	611a      	str	r2, [r3, #16]
    if (current_menu == 0) {
 8000610:	4bce      	ldr	r3, [pc, #824]	@ (800094c <TIM2_IRQHandler+0x350>)
 8000612:	781b      	ldrb	r3, [r3, #0]
 8000614:	b2db      	uxtb	r3, r3
 8000616:	2b00      	cmp	r3, #0
 8000618:	d000      	beq.n	800061c <TIM2_IRQHandler+0x20>
 800061a:	e0aa      	b.n	8000772 <TIM2_IRQHandler+0x176>
        switch (lcd_step) {
 800061c:	4bcc      	ldr	r3, [pc, #816]	@ (8000950 <TIM2_IRQHandler+0x354>)
 800061e:	781b      	ldrb	r3, [r3, #0]
 8000620:	b2db      	uxtb	r3, r3
 8000622:	2b24      	cmp	r3, #36	@ 0x24
 8000624:	d900      	bls.n	8000628 <TIM2_IRQHandler+0x2c>
 8000626:	e234      	b.n	8000a92 <TIM2_IRQHandler+0x496>
 8000628:	009a      	lsls	r2, r3, #2
 800062a:	4bca      	ldr	r3, [pc, #808]	@ (8000954 <TIM2_IRQHandler+0x358>)
 800062c:	18d3      	adds	r3, r2, r3
 800062e:	681b      	ldr	r3, [r3, #0]
 8000630:	469f      	mov	pc, r3
            case 0: LCD_command(0x01); LCD_command(0x80); break;
 8000632:	2001      	movs	r0, #1
 8000634:	f7ff fe12 	bl	800025c <LCD_command>
 8000638:	2080      	movs	r0, #128	@ 0x80
 800063a:	f7ff fe0f 	bl	800025c <LCD_command>
 800063e:	e22f      	b.n	8000aa0 <TIM2_IRQHandler+0x4a4>
            case 1: LCD_data('1'); break;
 8000640:	2031      	movs	r0, #49	@ 0x31
 8000642:	f7ff fe4b 	bl	80002dc <LCD_data>
 8000646:	e22b      	b.n	8000aa0 <TIM2_IRQHandler+0x4a4>
            case 2: LCD_data('.'); break;
 8000648:	202e      	movs	r0, #46	@ 0x2e
 800064a:	f7ff fe47 	bl	80002dc <LCD_data>
 800064e:	e227      	b.n	8000aa0 <TIM2_IRQHandler+0x4a4>
            case 3: LCD_data('U'); break;
 8000650:	2055      	movs	r0, #85	@ 0x55
 8000652:	f7ff fe43 	bl	80002dc <LCD_data>
 8000656:	e223      	b.n	8000aa0 <TIM2_IRQHandler+0x4a4>
            case 4: LCD_data('s'); break;
 8000658:	2073      	movs	r0, #115	@ 0x73
 800065a:	f7ff fe3f 	bl	80002dc <LCD_data>
 800065e:	e21f      	b.n	8000aa0 <TIM2_IRQHandler+0x4a4>
            case 5: LCD_data('u'); break;
 8000660:	2075      	movs	r0, #117	@ 0x75
 8000662:	f7ff fe3b 	bl	80002dc <LCD_data>
 8000666:	e21b      	b.n	8000aa0 <TIM2_IRQHandler+0x4a4>
            case 6: LCD_data('a'); break;
 8000668:	2061      	movs	r0, #97	@ 0x61
 800066a:	f7ff fe37 	bl	80002dc <LCD_data>
 800066e:	e217      	b.n	8000aa0 <TIM2_IRQHandler+0x4a4>
            case 7: LCD_data('r'); break;
 8000670:	2072      	movs	r0, #114	@ 0x72
 8000672:	f7ff fe33 	bl	80002dc <LCD_data>
 8000676:	e213      	b.n	8000aa0 <TIM2_IRQHandler+0x4a4>
            case 8: LCD_data('i'); break;
 8000678:	2069      	movs	r0, #105	@ 0x69
 800067a:	f7ff fe2f 	bl	80002dc <LCD_data>
 800067e:	e20f      	b.n	8000aa0 <TIM2_IRQHandler+0x4a4>
            case 9: LCD_data('o'); break;
 8000680:	206f      	movs	r0, #111	@ 0x6f
 8000682:	f7ff fe2b 	bl	80002dc <LCD_data>
 8000686:	e20b      	b.n	8000aa0 <TIM2_IRQHandler+0x4a4>
            case 10: LCD_data(' '); break;
 8000688:	2020      	movs	r0, #32
 800068a:	f7ff fe27 	bl	80002dc <LCD_data>
 800068e:	e207      	b.n	8000aa0 <TIM2_IRQHandler+0x4a4>
            case 11: LCD_data('y'); break;
 8000690:	2079      	movs	r0, #121	@ 0x79
 8000692:	f7ff fe23 	bl	80002dc <LCD_data>
 8000696:	e203      	b.n	8000aa0 <TIM2_IRQHandler+0x4a4>
            case 12: LCD_data(' '); break;
 8000698:	2020      	movs	r0, #32
 800069a:	f7ff fe1f 	bl	80002dc <LCD_data>
 800069e:	e1ff      	b.n	8000aa0 <TIM2_IRQHandler+0x4a4>
            case 13: LCD_data('P'); break;
 80006a0:	2050      	movs	r0, #80	@ 0x50
 80006a2:	f7ff fe1b 	bl	80002dc <LCD_data>
 80006a6:	e1fb      	b.n	8000aa0 <TIM2_IRQHandler+0x4a4>
            case 14: LCD_data('I'); break;
 80006a8:	2049      	movs	r0, #73	@ 0x49
 80006aa:	f7ff fe17 	bl	80002dc <LCD_data>
 80006ae:	e1f7      	b.n	8000aa0 <TIM2_IRQHandler+0x4a4>
            case 15: LCD_data('N'); break;
 80006b0:	204e      	movs	r0, #78	@ 0x4e
 80006b2:	f7ff fe13 	bl	80002dc <LCD_data>
 80006b6:	e1f3      	b.n	8000aa0 <TIM2_IRQHandler+0x4a4>
            case 16: LCD_command(0x01); LCD_command(0x80); break;
 80006b8:	2001      	movs	r0, #1
 80006ba:	f7ff fdcf 	bl	800025c <LCD_command>
 80006be:	2080      	movs	r0, #128	@ 0x80
 80006c0:	f7ff fdcc 	bl	800025c <LCD_command>
 80006c4:	e1ec      	b.n	8000aa0 <TIM2_IRQHandler+0x4a4>
            case 17: LCD_data('2'); break;
 80006c6:	2032      	movs	r0, #50	@ 0x32
 80006c8:	f7ff fe08 	bl	80002dc <LCD_data>
 80006cc:	e1e8      	b.n	8000aa0 <TIM2_IRQHandler+0x4a4>
            case 18: LCD_data('.'); break;
 80006ce:	202e      	movs	r0, #46	@ 0x2e
 80006d0:	f7ff fe04 	bl	80002dc <LCD_data>
 80006d4:	e1e4      	b.n	8000aa0 <TIM2_IRQHandler+0x4a4>
            case 19: LCD_data('C'); break;
 80006d6:	2043      	movs	r0, #67	@ 0x43
 80006d8:	f7ff fe00 	bl	80002dc <LCD_data>
 80006dc:	e1e0      	b.n	8000aa0 <TIM2_IRQHandler+0x4a4>
            case 20: LCD_data('e'); break;
 80006de:	2065      	movs	r0, #101	@ 0x65
 80006e0:	f7ff fdfc 	bl	80002dc <LCD_data>
 80006e4:	e1dc      	b.n	8000aa0 <TIM2_IRQHandler+0x4a4>
            case 21: LCD_data('l'); break;
 80006e6:	206c      	movs	r0, #108	@ 0x6c
 80006e8:	f7ff fdf8 	bl	80002dc <LCD_data>
 80006ec:	e1d8      	b.n	8000aa0 <TIM2_IRQHandler+0x4a4>
            case 22: LCD_data('u'); break;
 80006ee:	2075      	movs	r0, #117	@ 0x75
 80006f0:	f7ff fdf4 	bl	80002dc <LCD_data>
 80006f4:	e1d4      	b.n	8000aa0 <TIM2_IRQHandler+0x4a4>
            case 23: LCD_data('l'); break;
 80006f6:	206c      	movs	r0, #108	@ 0x6c
 80006f8:	f7ff fdf0 	bl	80002dc <LCD_data>
 80006fc:	e1d0      	b.n	8000aa0 <TIM2_IRQHandler+0x4a4>
            case 24: LCD_data('a'); break;
 80006fe:	2061      	movs	r0, #97	@ 0x61
 8000700:	f7ff fdec 	bl	80002dc <LCD_data>
 8000704:	e1cc      	b.n	8000aa0 <TIM2_IRQHandler+0x4a4>
            case 25: LCD_data('r'); break;
 8000706:	2072      	movs	r0, #114	@ 0x72
 8000708:	f7ff fde8 	bl	80002dc <LCD_data>
 800070c:	e1c8      	b.n	8000aa0 <TIM2_IRQHandler+0x4a4>
            case 26: LCD_command(0x01); LCD_command(0x80); break;
 800070e:	2001      	movs	r0, #1
 8000710:	f7ff fda4 	bl	800025c <LCD_command>
 8000714:	2080      	movs	r0, #128	@ 0x80
 8000716:	f7ff fda1 	bl	800025c <LCD_command>
 800071a:	e1c1      	b.n	8000aa0 <TIM2_IRQHandler+0x4a4>
            case 27: LCD_data('3'); break;
 800071c:	2033      	movs	r0, #51	@ 0x33
 800071e:	f7ff fddd 	bl	80002dc <LCD_data>
 8000722:	e1bd      	b.n	8000aa0 <TIM2_IRQHandler+0x4a4>
            case 28: LCD_data('.'); break;
 8000724:	202e      	movs	r0, #46	@ 0x2e
 8000726:	f7ff fdd9 	bl	80002dc <LCD_data>
 800072a:	e1b9      	b.n	8000aa0 <TIM2_IRQHandler+0x4a4>
            case 29: LCD_data('S'); break;
 800072c:	2053      	movs	r0, #83	@ 0x53
 800072e:	f7ff fdd5 	bl	80002dc <LCD_data>
 8000732:	e1b5      	b.n	8000aa0 <TIM2_IRQHandler+0x4a4>
            case 30: LCD_data('e'); break;
 8000734:	2065      	movs	r0, #101	@ 0x65
 8000736:	f7ff fdd1 	bl	80002dc <LCD_data>
 800073a:	e1b1      	b.n	8000aa0 <TIM2_IRQHandler+0x4a4>
            case 31: LCD_data('r'); break;
 800073c:	2072      	movs	r0, #114	@ 0x72
 800073e:	f7ff fdcd 	bl	80002dc <LCD_data>
 8000742:	e1ad      	b.n	8000aa0 <TIM2_IRQHandler+0x4a4>
            case 32: LCD_data('i'); break;
 8000744:	2069      	movs	r0, #105	@ 0x69
 8000746:	f7ff fdc9 	bl	80002dc <LCD_data>
 800074a:	e1a9      	b.n	8000aa0 <TIM2_IRQHandler+0x4a4>
            case 33: LCD_data('a'); break;
 800074c:	2061      	movs	r0, #97	@ 0x61
 800074e:	f7ff fdc5 	bl	80002dc <LCD_data>
 8000752:	e1a5      	b.n	8000aa0 <TIM2_IRQHandler+0x4a4>
            case 34: LCD_data('l'); break;
 8000754:	206c      	movs	r0, #108	@ 0x6c
 8000756:	f7ff fdc1 	bl	80002dc <LCD_data>
 800075a:	e1a1      	b.n	8000aa0 <TIM2_IRQHandler+0x4a4>
            case 35: LCD_command(0x01); LCD_command(0x80); break;
 800075c:	2001      	movs	r0, #1
 800075e:	f7ff fd7d 	bl	800025c <LCD_command>
 8000762:	2080      	movs	r0, #128	@ 0x80
 8000764:	f7ff fd7a 	bl	800025c <LCD_command>
 8000768:	e19a      	b.n	8000aa0 <TIM2_IRQHandler+0x4a4>
            case 36: lcd_step = 0; break; // Reiniciar al menú principal
 800076a:	4b79      	ldr	r3, [pc, #484]	@ (8000950 <TIM2_IRQHandler+0x354>)
 800076c:	2200      	movs	r2, #0
 800076e:	701a      	strb	r2, [r3, #0]
 8000770:	e196      	b.n	8000aa0 <TIM2_IRQHandler+0x4a4>
            default: break;
        }
    }
    else if (current_menu == 1) {
 8000772:	4b76      	ldr	r3, [pc, #472]	@ (800094c <TIM2_IRQHandler+0x350>)
 8000774:	781b      	ldrb	r3, [r3, #0]
 8000776:	b2db      	uxtb	r3, r3
 8000778:	2b01      	cmp	r3, #1
 800077a:	d000      	beq.n	800077e <TIM2_IRQHandler+0x182>
 800077c:	e0ee      	b.n	800095c <TIM2_IRQHandler+0x360>
        // Menú secundario (cuando recibes '3')
        switch (lcd_step) {
 800077e:	4b74      	ldr	r3, [pc, #464]	@ (8000950 <TIM2_IRQHandler+0x354>)
 8000780:	781b      	ldrb	r3, [r3, #0]
 8000782:	b2db      	uxtb	r3, r3
 8000784:	2b33      	cmp	r3, #51	@ 0x33
 8000786:	d900      	bls.n	800078a <TIM2_IRQHandler+0x18e>
 8000788:	e185      	b.n	8000a96 <TIM2_IRQHandler+0x49a>
 800078a:	009a      	lsls	r2, r3, #2
 800078c:	4b72      	ldr	r3, [pc, #456]	@ (8000958 <TIM2_IRQHandler+0x35c>)
 800078e:	18d3      	adds	r3, r2, r3
 8000790:	681b      	ldr	r3, [r3, #0]
 8000792:	469f      	mov	pc, r3
            case 0: LCD_command(0x01); LCD_command(0x80); break;
 8000794:	2001      	movs	r0, #1
 8000796:	f7ff fd61 	bl	800025c <LCD_command>
 800079a:	2080      	movs	r0, #128	@ 0x80
 800079c:	f7ff fd5e 	bl	800025c <LCD_command>
 80007a0:	e17e      	b.n	8000aa0 <TIM2_IRQHandler+0x4a4>
            case 1: LCD_data('1'); break;
 80007a2:	2031      	movs	r0, #49	@ 0x31
 80007a4:	f7ff fd9a 	bl	80002dc <LCD_data>
 80007a8:	e17a      	b.n	8000aa0 <TIM2_IRQHandler+0x4a4>
            case 2: LCD_data('.'); break;
 80007aa:	202e      	movs	r0, #46	@ 0x2e
 80007ac:	f7ff fd96 	bl	80002dc <LCD_data>
 80007b0:	e176      	b.n	8000aa0 <TIM2_IRQHandler+0x4a4>
            case 3: LCD_data('R'); break;
 80007b2:	2052      	movs	r0, #82	@ 0x52
 80007b4:	f7ff fd92 	bl	80002dc <LCD_data>
 80007b8:	e172      	b.n	8000aa0 <TIM2_IRQHandler+0x4a4>
            case 4: LCD_data('e'); break;
 80007ba:	2065      	movs	r0, #101	@ 0x65
 80007bc:	f7ff fd8e 	bl	80002dc <LCD_data>
 80007c0:	e16e      	b.n	8000aa0 <TIM2_IRQHandler+0x4a4>
            case 5: LCD_data('t'); break;
 80007c2:	2074      	movs	r0, #116	@ 0x74
 80007c4:	f7ff fd8a 	bl	80002dc <LCD_data>
 80007c8:	e16a      	b.n	8000aa0 <TIM2_IRQHandler+0x4a4>
            case 6: LCD_data('i'); break;
 80007ca:	2069      	movs	r0, #105	@ 0x69
 80007cc:	f7ff fd86 	bl	80002dc <LCD_data>
 80007d0:	e166      	b.n	8000aa0 <TIM2_IRQHandler+0x4a4>
            case 7: LCD_data('r'); break;
 80007d2:	2072      	movs	r0, #114	@ 0x72
 80007d4:	f7ff fd82 	bl	80002dc <LCD_data>
 80007d8:	e162      	b.n	8000aa0 <TIM2_IRQHandler+0x4a4>
            case 8: LCD_data('o'); break;
 80007da:	206f      	movs	r0, #111	@ 0x6f
 80007dc:	f7ff fd7e 	bl	80002dc <LCD_data>
 80007e0:	e15e      	b.n	8000aa0 <TIM2_IRQHandler+0x4a4>
            case 9: LCD_data(' '); break;
 80007e2:	2020      	movs	r0, #32
 80007e4:	f7ff fd7a 	bl	80002dc <LCD_data>
 80007e8:	e15a      	b.n	8000aa0 <TIM2_IRQHandler+0x4a4>
            case 10: LCD_data('s'); break;
 80007ea:	2073      	movs	r0, #115	@ 0x73
 80007ec:	f7ff fd76 	bl	80002dc <LCD_data>
 80007f0:	e156      	b.n	8000aa0 <TIM2_IRQHandler+0x4a4>
            case 11: LCD_data('i'); break;
 80007f2:	2069      	movs	r0, #105	@ 0x69
 80007f4:	f7ff fd72 	bl	80002dc <LCD_data>
 80007f8:	e152      	b.n	8000aa0 <TIM2_IRQHandler+0x4a4>
            case 12: LCD_data('n'); break;
 80007fa:	206e      	movs	r0, #110	@ 0x6e
 80007fc:	f7ff fd6e 	bl	80002dc <LCD_data>
 8000800:	e14e      	b.n	8000aa0 <TIM2_IRQHandler+0x4a4>
            case 13: LCD_data(' '); break;
 8000802:	2020      	movs	r0, #32
 8000804:	f7ff fd6a 	bl	80002dc <LCD_data>
 8000808:	e14a      	b.n	8000aa0 <TIM2_IRQHandler+0x4a4>
            case 14: LCD_data('P'); break;
 800080a:	2050      	movs	r0, #80	@ 0x50
 800080c:	f7ff fd66 	bl	80002dc <LCD_data>
 8000810:	e146      	b.n	8000aa0 <TIM2_IRQHandler+0x4a4>
            case 15: LCD_data('I'); break;
 8000812:	2049      	movs	r0, #73	@ 0x49
 8000814:	f7ff fd62 	bl	80002dc <LCD_data>
 8000818:	e142      	b.n	8000aa0 <TIM2_IRQHandler+0x4a4>
            case 16: LCD_data('N'); break;
 800081a:	204e      	movs	r0, #78	@ 0x4e
 800081c:	f7ff fd5e 	bl	80002dc <LCD_data>
 8000820:	e13e      	b.n	8000aa0 <TIM2_IRQHandler+0x4a4>
            case 17: LCD_command(0x01); LCD_command(0x80); break;
 8000822:	2001      	movs	r0, #1
 8000824:	f7ff fd1a 	bl	800025c <LCD_command>
 8000828:	2080      	movs	r0, #128	@ 0x80
 800082a:	f7ff fd17 	bl	800025c <LCD_command>
 800082e:	e137      	b.n	8000aa0 <TIM2_IRQHandler+0x4a4>
            case 18: LCD_data('2'); break;
 8000830:	2032      	movs	r0, #50	@ 0x32
 8000832:	f7ff fd53 	bl	80002dc <LCD_data>
 8000836:	e133      	b.n	8000aa0 <TIM2_IRQHandler+0x4a4>
            case 19: LCD_data('.'); break;
 8000838:	202e      	movs	r0, #46	@ 0x2e
 800083a:	f7ff fd4f 	bl	80002dc <LCD_data>
 800083e:	e12f      	b.n	8000aa0 <TIM2_IRQHandler+0x4a4>
            case 20: LCD_data('E'); break;
 8000840:	2045      	movs	r0, #69	@ 0x45
 8000842:	f7ff fd4b 	bl	80002dc <LCD_data>
 8000846:	e12b      	b.n	8000aa0 <TIM2_IRQHandler+0x4a4>
            case 21: LCD_data('n'); break;
 8000848:	206e      	movs	r0, #110	@ 0x6e
 800084a:	f7ff fd47 	bl	80002dc <LCD_data>
 800084e:	e127      	b.n	8000aa0 <TIM2_IRQHandler+0x4a4>
            case 22: LCD_data('v'); break;
 8000850:	2076      	movs	r0, #118	@ 0x76
 8000852:	f7ff fd43 	bl	80002dc <LCD_data>
 8000856:	e123      	b.n	8000aa0 <TIM2_IRQHandler+0x4a4>
            case 23: LCD_data('i'); break;
 8000858:	2069      	movs	r0, #105	@ 0x69
 800085a:	f7ff fd3f 	bl	80002dc <LCD_data>
 800085e:	e11f      	b.n	8000aa0 <TIM2_IRQHandler+0x4a4>
            case 24: LCD_data('o'); break;
 8000860:	206f      	movs	r0, #111	@ 0x6f
 8000862:	f7ff fd3b 	bl	80002dc <LCD_data>
 8000866:	e11b      	b.n	8000aa0 <TIM2_IRQHandler+0x4a4>
            case 25: LCD_data(' '); break;
 8000868:	2020      	movs	r0, #32
 800086a:	f7ff fd37 	bl	80002dc <LCD_data>
 800086e:	e117      	b.n	8000aa0 <TIM2_IRQHandler+0x4a4>
            case 26: LCD_data('r'); break;
 8000870:	2072      	movs	r0, #114	@ 0x72
 8000872:	f7ff fd33 	bl	80002dc <LCD_data>
 8000876:	e113      	b.n	8000aa0 <TIM2_IRQHandler+0x4a4>
            case 27: LCD_data('e'); break;
 8000878:	2065      	movs	r0, #101	@ 0x65
 800087a:	f7ff fd2f 	bl	80002dc <LCD_data>
 800087e:	e10f      	b.n	8000aa0 <TIM2_IRQHandler+0x4a4>
            case 28: LCD_data('m'); break;
 8000880:	206d      	movs	r0, #109	@ 0x6d
 8000882:	f7ff fd2b 	bl	80002dc <LCD_data>
 8000886:	e10b      	b.n	8000aa0 <TIM2_IRQHandler+0x4a4>
            case 29: LCD_data('e'); break;
 8000888:	2065      	movs	r0, #101	@ 0x65
 800088a:	f7ff fd27 	bl	80002dc <LCD_data>
 800088e:	e107      	b.n	8000aa0 <TIM2_IRQHandler+0x4a4>
            case 30: LCD_data('s'); break;
 8000890:	2073      	movs	r0, #115	@ 0x73
 8000892:	f7ff fd23 	bl	80002dc <LCD_data>
 8000896:	e103      	b.n	8000aa0 <TIM2_IRQHandler+0x4a4>
            case 31: LCD_data('a'); break;
 8000898:	2061      	movs	r0, #97	@ 0x61
 800089a:	f7ff fd1f 	bl	80002dc <LCD_data>
 800089e:	e0ff      	b.n	8000aa0 <TIM2_IRQHandler+0x4a4>
            case 32: LCD_data('s'); break;
 80008a0:	2073      	movs	r0, #115	@ 0x73
 80008a2:	f7ff fd1b 	bl	80002dc <LCD_data>
 80008a6:	e0fb      	b.n	8000aa0 <TIM2_IRQHandler+0x4a4>
            case 33: LCD_command(0x01); LCD_command(0x80); break;
 80008a8:	2001      	movs	r0, #1
 80008aa:	f7ff fcd7 	bl	800025c <LCD_command>
 80008ae:	2080      	movs	r0, #128	@ 0x80
 80008b0:	f7ff fcd4 	bl	800025c <LCD_command>
 80008b4:	e0f4      	b.n	8000aa0 <TIM2_IRQHandler+0x4a4>
            case 34: LCD_data('3'); break;
 80008b6:	2033      	movs	r0, #51	@ 0x33
 80008b8:	f7ff fd10 	bl	80002dc <LCD_data>
 80008bc:	e0f0      	b.n	8000aa0 <TIM2_IRQHandler+0x4a4>
            case 35: LCD_data('.'); break;
 80008be:	202e      	movs	r0, #46	@ 0x2e
 80008c0:	f7ff fd0c 	bl	80002dc <LCD_data>
 80008c4:	e0ec      	b.n	8000aa0 <TIM2_IRQHandler+0x4a4>
            case 36: LCD_data('C'); break;
 80008c6:	2043      	movs	r0, #67	@ 0x43
 80008c8:	f7ff fd08 	bl	80002dc <LCD_data>
 80008cc:	e0e8      	b.n	8000aa0 <TIM2_IRQHandler+0x4a4>
            case 37: LCD_data('o'); break;
 80008ce:	206f      	movs	r0, #111	@ 0x6f
 80008d0:	f7ff fd04 	bl	80002dc <LCD_data>
 80008d4:	e0e4      	b.n	8000aa0 <TIM2_IRQHandler+0x4a4>
            case 38: LCD_data('n'); break;
 80008d6:	206e      	movs	r0, #110	@ 0x6e
 80008d8:	f7ff fd00 	bl	80002dc <LCD_data>
 80008dc:	e0e0      	b.n	8000aa0 <TIM2_IRQHandler+0x4a4>
            case 39: LCD_data('s'); break;
 80008de:	2073      	movs	r0, #115	@ 0x73
 80008e0:	f7ff fcfc 	bl	80002dc <LCD_data>
 80008e4:	e0dc      	b.n	8000aa0 <TIM2_IRQHandler+0x4a4>
            case 40: LCD_data('u'); break;
 80008e6:	2075      	movs	r0, #117	@ 0x75
 80008e8:	f7ff fcf8 	bl	80002dc <LCD_data>
 80008ec:	e0d8      	b.n	8000aa0 <TIM2_IRQHandler+0x4a4>
            case 41: LCD_data('l'); break;
 80008ee:	206c      	movs	r0, #108	@ 0x6c
 80008f0:	f7ff fcf4 	bl	80002dc <LCD_data>
 80008f4:	e0d4      	b.n	8000aa0 <TIM2_IRQHandler+0x4a4>
            case 42: LCD_data('t'); break;
 80008f6:	2074      	movs	r0, #116	@ 0x74
 80008f8:	f7ff fcf0 	bl	80002dc <LCD_data>
 80008fc:	e0d0      	b.n	8000aa0 <TIM2_IRQHandler+0x4a4>
            case 43: LCD_data('a'); break;
 80008fe:	2061      	movs	r0, #97	@ 0x61
 8000900:	f7ff fcec 	bl	80002dc <LCD_data>
 8000904:	e0cc      	b.n	8000aa0 <TIM2_IRQHandler+0x4a4>
            case 44: LCD_data(' '); break;
 8000906:	2020      	movs	r0, #32
 8000908:	f7ff fce8 	bl	80002dc <LCD_data>
 800090c:	e0c8      	b.n	8000aa0 <TIM2_IRQHandler+0x4a4>
            case 45: LCD_data('s'); break;
 800090e:	2073      	movs	r0, #115	@ 0x73
 8000910:	f7ff fce4 	bl	80002dc <LCD_data>
 8000914:	e0c4      	b.n	8000aa0 <TIM2_IRQHandler+0x4a4>
            case 46: LCD_data('a'); break;
 8000916:	2061      	movs	r0, #97	@ 0x61
 8000918:	f7ff fce0 	bl	80002dc <LCD_data>
 800091c:	e0c0      	b.n	8000aa0 <TIM2_IRQHandler+0x4a4>
            case 47: LCD_data('l'); break;
 800091e:	206c      	movs	r0, #108	@ 0x6c
 8000920:	f7ff fcdc 	bl	80002dc <LCD_data>
 8000924:	e0bc      	b.n	8000aa0 <TIM2_IRQHandler+0x4a4>
            case 48: LCD_data('d'); break;
 8000926:	2064      	movs	r0, #100	@ 0x64
 8000928:	f7ff fcd8 	bl	80002dc <LCD_data>
 800092c:	e0b8      	b.n	8000aa0 <TIM2_IRQHandler+0x4a4>
            case 49: LCD_data('o'); break;
 800092e:	206f      	movs	r0, #111	@ 0x6f
 8000930:	f7ff fcd4 	bl	80002dc <LCD_data>
 8000934:	e0b4      	b.n	8000aa0 <TIM2_IRQHandler+0x4a4>
            case 50: LCD_command(0x01); LCD_command(0x80); break;
 8000936:	2001      	movs	r0, #1
 8000938:	f7ff fc90 	bl	800025c <LCD_command>
 800093c:	2080      	movs	r0, #128	@ 0x80
 800093e:	f7ff fc8d 	bl	800025c <LCD_command>
 8000942:	e0ad      	b.n	8000aa0 <TIM2_IRQHandler+0x4a4>
            case 51: lcd_step = 0; break; // Reiniciar al nuevo menú
 8000944:	4b02      	ldr	r3, [pc, #8]	@ (8000950 <TIM2_IRQHandler+0x354>)
 8000946:	2200      	movs	r2, #0
 8000948:	701a      	strb	r2, [r3, #0]
 800094a:	e0a9      	b.n	8000aa0 <TIM2_IRQHandler+0x4a4>
 800094c:	20000039 	.word	0x20000039
 8000950:	20000038 	.word	0x20000038
 8000954:	08001518 	.word	0x08001518
 8000958:	080015ac 	.word	0x080015ac
            default: break;
        }
    }
    else if (current_menu == 2) {
 800095c:	4b55      	ldr	r3, [pc, #340]	@ (8000ab4 <TIM2_IRQHandler+0x4b8>)
 800095e:	781b      	ldrb	r3, [r3, #0]
 8000960:	b2db      	uxtb	r3, r3
 8000962:	2b02      	cmp	r3, #2
 8000964:	d000      	beq.n	8000968 <TIM2_IRQHandler+0x36c>
 8000966:	e06b      	b.n	8000a40 <TIM2_IRQHandler+0x444>

            // Menú secundario (cuando recibes '3')
            switch (lcd_step) {
 8000968:	4b53      	ldr	r3, [pc, #332]	@ (8000ab8 <TIM2_IRQHandler+0x4bc>)
 800096a:	781b      	ldrb	r3, [r3, #0]
 800096c:	b2db      	uxtb	r3, r3
 800096e:	2b15      	cmp	r3, #21
 8000970:	d900      	bls.n	8000974 <TIM2_IRQHandler+0x378>
 8000972:	e092      	b.n	8000a9a <TIM2_IRQHandler+0x49e>
 8000974:	009a      	lsls	r2, r3, #2
 8000976:	4b51      	ldr	r3, [pc, #324]	@ (8000abc <TIM2_IRQHandler+0x4c0>)
 8000978:	18d3      	adds	r3, r2, r3
 800097a:	681b      	ldr	r3, [r3, #0]
 800097c:	469f      	mov	pc, r3
                case 0: LCD_command(0x01); LCD_command(0x80); break;
 800097e:	2001      	movs	r0, #1
 8000980:	f7ff fc6c 	bl	800025c <LCD_command>
 8000984:	2080      	movs	r0, #128	@ 0x80
 8000986:	f7ff fc69 	bl	800025c <LCD_command>
 800098a:	e089      	b.n	8000aa0 <TIM2_IRQHandler+0x4a4>
                case 1: LCD_data('1'); break;
 800098c:	2031      	movs	r0, #49	@ 0x31
 800098e:	f7ff fca5 	bl	80002dc <LCD_data>
 8000992:	e085      	b.n	8000aa0 <TIM2_IRQHandler+0x4a4>
                case 2: LCD_data('.'); break;
 8000994:	202e      	movs	r0, #46	@ 0x2e
 8000996:	f7ff fca1 	bl	80002dc <LCD_data>
 800099a:	e081      	b.n	8000aa0 <TIM2_IRQHandler+0x4a4>
                case 3: LCD_data('R'); break;
 800099c:	2052      	movs	r0, #82	@ 0x52
 800099e:	f7ff fc9d 	bl	80002dc <LCD_data>
 80009a2:	e07d      	b.n	8000aa0 <TIM2_IRQHandler+0x4a4>
                case 4: LCD_data('E'); break;
 80009a4:	2045      	movs	r0, #69	@ 0x45
 80009a6:	f7ff fc99 	bl	80002dc <LCD_data>
 80009aa:	e079      	b.n	8000aa0 <TIM2_IRQHandler+0x4a4>
                case 5: LCD_data('T'); break;
 80009ac:	2054      	movs	r0, #84	@ 0x54
 80009ae:	f7ff fc95 	bl	80002dc <LCD_data>
 80009b2:	e075      	b.n	8000aa0 <TIM2_IRQHandler+0x4a4>
                case 6: LCD_data('I'); break;
 80009b4:	2049      	movs	r0, #73	@ 0x49
 80009b6:	f7ff fc91 	bl	80002dc <LCD_data>
 80009ba:	e071      	b.n	8000aa0 <TIM2_IRQHandler+0x4a4>
                case 7: LCD_data('R'); break;
 80009bc:	2052      	movs	r0, #82	@ 0x52
 80009be:	f7ff fc8d 	bl	80002dc <LCD_data>
 80009c2:	e06d      	b.n	8000aa0 <TIM2_IRQHandler+0x4a4>
                case 8: LCD_data('O'); break;
 80009c4:	204f      	movs	r0, #79	@ 0x4f
 80009c6:	f7ff fc89 	bl	80002dc <LCD_data>
 80009ca:	e069      	b.n	8000aa0 <TIM2_IRQHandler+0x4a4>
                case 9: LCD_command(0x01); LCD_command(0x80); break;
 80009cc:	2001      	movs	r0, #1
 80009ce:	f7ff fc45 	bl	800025c <LCD_command>
 80009d2:	2080      	movs	r0, #128	@ 0x80
 80009d4:	f7ff fc42 	bl	800025c <LCD_command>
 80009d8:	e062      	b.n	8000aa0 <TIM2_IRQHandler+0x4a4>
                case 10: LCD_data('Q'); break;
 80009da:	2051      	movs	r0, #81	@ 0x51
 80009dc:	f7ff fc7e 	bl	80002dc <LCD_data>
 80009e0:	e05e      	b.n	8000aa0 <TIM2_IRQHandler+0x4a4>
                case 11: LCD_data('+'); break;
 80009e2:	202b      	movs	r0, #43	@ 0x2b
 80009e4:	f7ff fc7a 	bl	80002dc <LCD_data>
 80009e8:	e05a      	b.n	8000aa0 <TIM2_IRQHandler+0x4a4>
                case 12: LCD_data('C'); break;
 80009ea:	2043      	movs	r0, #67	@ 0x43
 80009ec:	f7ff fc76 	bl	80002dc <LCD_data>
 80009f0:	e056      	b.n	8000aa0 <TIM2_IRQHandler+0x4a4>
                case 13: LCD_data('A'); break;
 80009f2:	2041      	movs	r0, #65	@ 0x41
 80009f4:	f7ff fc72 	bl	80002dc <LCD_data>
 80009f8:	e052      	b.n	8000aa0 <TIM2_IRQHandler+0x4a4>
                case 14: LCD_data('N'); break;
 80009fa:	204e      	movs	r0, #78	@ 0x4e
 80009fc:	f7ff fc6e 	bl	80002dc <LCD_data>
 8000a00:	e04e      	b.n	8000aa0 <TIM2_IRQHandler+0x4a4>
                case 15: LCD_data('T'); break;
 8000a02:	2054      	movs	r0, #84	@ 0x54
 8000a04:	f7ff fc6a 	bl	80002dc <LCD_data>
 8000a08:	e04a      	b.n	8000aa0 <TIM2_IRQHandler+0x4a4>
                case 16: LCD_data('I'); break;
 8000a0a:	2049      	movs	r0, #73	@ 0x49
 8000a0c:	f7ff fc66 	bl	80002dc <LCD_data>
 8000a10:	e046      	b.n	8000aa0 <TIM2_IRQHandler+0x4a4>
                case 17: LCD_data('D'); break;
 8000a12:	2044      	movs	r0, #68	@ 0x44
 8000a14:	f7ff fc62 	bl	80002dc <LCD_data>
 8000a18:	e042      	b.n	8000aa0 <TIM2_IRQHandler+0x4a4>
                case 18: LCD_data('A'); break;
 8000a1a:	2041      	movs	r0, #65	@ 0x41
 8000a1c:	f7ff fc5e 	bl	80002dc <LCD_data>
 8000a20:	e03e      	b.n	8000aa0 <TIM2_IRQHandler+0x4a4>
                case 19: LCD_data('D'); break;
 8000a22:	2044      	movs	r0, #68	@ 0x44
 8000a24:	f7ff fc5a 	bl	80002dc <LCD_data>
 8000a28:	e03a      	b.n	8000aa0 <TIM2_IRQHandler+0x4a4>
                case 20: LCD_command(0x01); LCD_command(0x80); break;
 8000a2a:	2001      	movs	r0, #1
 8000a2c:	f7ff fc16 	bl	800025c <LCD_command>
 8000a30:	2080      	movs	r0, #128	@ 0x80
 8000a32:	f7ff fc13 	bl	800025c <LCD_command>
 8000a36:	e033      	b.n	8000aa0 <TIM2_IRQHandler+0x4a4>
                case 21: lcd_step = 0; break;
 8000a38:	4b1f      	ldr	r3, [pc, #124]	@ (8000ab8 <TIM2_IRQHandler+0x4bc>)
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	701a      	strb	r2, [r3, #0]
 8000a3e:	e02f      	b.n	8000aa0 <TIM2_IRQHandler+0x4a4>
                default: break;
            }
        }

    else if (current_menu == 3) {
 8000a40:	4b1c      	ldr	r3, [pc, #112]	@ (8000ab4 <TIM2_IRQHandler+0x4b8>)
 8000a42:	781b      	ldrb	r3, [r3, #0]
 8000a44:	b2db      	uxtb	r3, r3
 8000a46:	2b03      	cmp	r3, #3
 8000a48:	d12a      	bne.n	8000aa0 <TIM2_IRQHandler+0x4a4>
			switch (lcd_step) {
 8000a4a:	4b1b      	ldr	r3, [pc, #108]	@ (8000ab8 <TIM2_IRQHandler+0x4bc>)
 8000a4c:	781b      	ldrb	r3, [r3, #0]
 8000a4e:	b2db      	uxtb	r3, r3
 8000a50:	2b04      	cmp	r3, #4
 8000a52:	d824      	bhi.n	8000a9e <TIM2_IRQHandler+0x4a2>
 8000a54:	009a      	lsls	r2, r3, #2
 8000a56:	4b1a      	ldr	r3, [pc, #104]	@ (8000ac0 <TIM2_IRQHandler+0x4c4>)
 8000a58:	18d3      	adds	r3, r2, r3
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	469f      	mov	pc, r3
				case 0: LCD_command(0x01); LCD_command(0x80); break;
 8000a5e:	2001      	movs	r0, #1
 8000a60:	f7ff fbfc 	bl	800025c <LCD_command>
 8000a64:	2080      	movs	r0, #128	@ 0x80
 8000a66:	f7ff fbf9 	bl	800025c <LCD_command>
 8000a6a:	e019      	b.n	8000aa0 <TIM2_IRQHandler+0x4a4>
				case 1: LCD_data('Q'); break;
 8000a6c:	2051      	movs	r0, #81	@ 0x51
 8000a6e:	f7ff fc35 	bl	80002dc <LCD_data>
 8000a72:	e015      	b.n	8000aa0 <TIM2_IRQHandler+0x4a4>
				case 2: LCD_data('1'); break;
 8000a74:	2031      	movs	r0, #49	@ 0x31
 8000a76:	f7ff fc31 	bl	80002dc <LCD_data>
 8000a7a:	e011      	b.n	8000aa0 <TIM2_IRQHandler+0x4a4>
				case 3: LCD_data('0'); break;
 8000a7c:	2030      	movs	r0, #48	@ 0x30
 8000a7e:	f7ff fc2d 	bl	80002dc <LCD_data>
 8000a82:	e00d      	b.n	8000aa0 <TIM2_IRQHandler+0x4a4>
				case 4: current_menu = 0;  lcd_step = 0;  break; // Reiniciar al nuevo menú
 8000a84:	4b0b      	ldr	r3, [pc, #44]	@ (8000ab4 <TIM2_IRQHandler+0x4b8>)
 8000a86:	2200      	movs	r2, #0
 8000a88:	701a      	strb	r2, [r3, #0]
 8000a8a:	4b0b      	ldr	r3, [pc, #44]	@ (8000ab8 <TIM2_IRQHandler+0x4bc>)
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	701a      	strb	r2, [r3, #0]
 8000a90:	e006      	b.n	8000aa0 <TIM2_IRQHandler+0x4a4>
            default: break;
 8000a92:	46c0      	nop			@ (mov r8, r8)
 8000a94:	e004      	b.n	8000aa0 <TIM2_IRQHandler+0x4a4>
            default: break;
 8000a96:	46c0      	nop			@ (mov r8, r8)
 8000a98:	e002      	b.n	8000aa0 <TIM2_IRQHandler+0x4a4>
                default: break;
 8000a9a:	46c0      	nop			@ (mov r8, r8)
 8000a9c:	e000      	b.n	8000aa0 <TIM2_IRQHandler+0x4a4>
				default: break;
 8000a9e:	46c0      	nop			@ (mov r8, r8)
			}
		}

    lcd_step++;
 8000aa0:	4b05      	ldr	r3, [pc, #20]	@ (8000ab8 <TIM2_IRQHandler+0x4bc>)
 8000aa2:	781b      	ldrb	r3, [r3, #0]
 8000aa4:	b2db      	uxtb	r3, r3
 8000aa6:	3301      	adds	r3, #1
 8000aa8:	b2da      	uxtb	r2, r3
 8000aaa:	4b03      	ldr	r3, [pc, #12]	@ (8000ab8 <TIM2_IRQHandler+0x4bc>)
 8000aac:	701a      	strb	r2, [r3, #0]
}
 8000aae:	46c0      	nop			@ (mov r8, r8)
 8000ab0:	46bd      	mov	sp, r7
 8000ab2:	bd80      	pop	{r7, pc}
 8000ab4:	20000039 	.word	0x20000039
 8000ab8:	20000038 	.word	0x20000038
 8000abc:	0800167c 	.word	0x0800167c
 8000ac0:	080016d4 	.word	0x080016d4

08000ac4 <TIM21config>:

void TIM21config (void) {
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	af00      	add	r7, sp, #0

	RCC->APB2ENR |= (1<<2); //Se encuentra operando a 2ms
 8000ac8:	4b10      	ldr	r3, [pc, #64]	@ (8000b0c <TIM21config+0x48>)
 8000aca:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000acc:	4b0f      	ldr	r3, [pc, #60]	@ (8000b0c <TIM21config+0x48>)
 8000ace:	2104      	movs	r1, #4
 8000ad0:	430a      	orrs	r2, r1
 8000ad2:	635a      	str	r2, [r3, #52]	@ 0x34
	TIM21->PSC = 16000-1;
 8000ad4:	4b0e      	ldr	r3, [pc, #56]	@ (8000b10 <TIM21config+0x4c>)
 8000ad6:	4a0f      	ldr	r2, [pc, #60]	@ (8000b14 <TIM21config+0x50>)
 8000ad8:	629a      	str	r2, [r3, #40]	@ 0x28
	TIM21->ARR = 2-1;
 8000ada:	4b0d      	ldr	r3, [pc, #52]	@ (8000b10 <TIM21config+0x4c>)
 8000adc:	2201      	movs	r2, #1
 8000ade:	62da      	str	r2, [r3, #44]	@ 0x2c
	TIM21->CNT = 0;
 8000ae0:	4b0b      	ldr	r3, [pc, #44]	@ (8000b10 <TIM21config+0x4c>)
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	625a      	str	r2, [r3, #36]	@ 0x24
	TIM21->CR1 = (1<<0);
 8000ae6:	4b0a      	ldr	r3, [pc, #40]	@ (8000b10 <TIM21config+0x4c>)
 8000ae8:	2201      	movs	r2, #1
 8000aea:	601a      	str	r2, [r3, #0]
	TIM21->DIER |= (1<<0);  //Enable Mode Interrupt
 8000aec:	4b08      	ldr	r3, [pc, #32]	@ (8000b10 <TIM21config+0x4c>)
 8000aee:	68da      	ldr	r2, [r3, #12]
 8000af0:	4b07      	ldr	r3, [pc, #28]	@ (8000b10 <TIM21config+0x4c>)
 8000af2:	2101      	movs	r1, #1
 8000af4:	430a      	orrs	r2, r1
 8000af6:	60da      	str	r2, [r3, #12]
	NVIC_SetPriority(TIM21_IRQn, 2);   /* más bajo que USART */
 8000af8:	2102      	movs	r1, #2
 8000afa:	2014      	movs	r0, #20
 8000afc:	f7ff fb1e 	bl	800013c <__NVIC_SetPriority>
	NVIC_EnableIRQ(TIM21_IRQn);
 8000b00:	2014      	movs	r0, #20
 8000b02:	f7ff fb01 	bl	8000108 <__NVIC_EnableIRQ>
}
 8000b06:	46c0      	nop			@ (mov r8, r8)
 8000b08:	46bd      	mov	sp, r7
 8000b0a:	bd80      	pop	{r7, pc}
 8000b0c:	40021000 	.word	0x40021000
 8000b10:	40010800 	.word	0x40010800
 8000b14:	00003e7f 	.word	0x00003e7f

08000b18 <TIM21_IRQHandler>:

void TIM21_IRQHandler() {
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	af00      	add	r7, sp, #0
	if (flag_received_USART2) {
 8000b1c:	4bac      	ldr	r3, [pc, #688]	@ (8000dd0 <TIM21_IRQHandler+0x2b8>)
 8000b1e:	781b      	ldrb	r3, [r3, #0]
 8000b20:	b2db      	uxtb	r3, r3
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	d100      	bne.n	8000b28 <TIM21_IRQHandler+0x10>
 8000b26:	e08a      	b.n	8000c3e <TIM21_IRQHandler+0x126>
		flag_received_USART2 = 0;
 8000b28:	4ba9      	ldr	r3, [pc, #676]	@ (8000dd0 <TIM21_IRQHandler+0x2b8>)
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	701a      	strb	r2, [r3, #0]
		if (current_menu == 0 && received_char_USART2 == '3') {
 8000b2e:	4ba9      	ldr	r3, [pc, #676]	@ (8000dd4 <TIM21_IRQHandler+0x2bc>)
 8000b30:	781b      	ldrb	r3, [r3, #0]
 8000b32:	b2db      	uxtb	r3, r3
 8000b34:	2b00      	cmp	r3, #0
 8000b36:	d11b      	bne.n	8000b70 <TIM21_IRQHandler+0x58>
 8000b38:	4ba7      	ldr	r3, [pc, #668]	@ (8000dd8 <TIM21_IRQHandler+0x2c0>)
 8000b3a:	781b      	ldrb	r3, [r3, #0]
 8000b3c:	b2db      	uxtb	r3, r3
 8000b3e:	2b33      	cmp	r3, #51	@ 0x33
 8000b40:	d116      	bne.n	8000b70 <TIM21_IRQHandler+0x58>
			current_menu = 1;
 8000b42:	4ba4      	ldr	r3, [pc, #656]	@ (8000dd4 <TIM21_IRQHandler+0x2bc>)
 8000b44:	2201      	movs	r2, #1
 8000b46:	701a      	strb	r2, [r3, #0]
			lcd_step     = 0;
 8000b48:	4ba4      	ldr	r3, [pc, #656]	@ (8000ddc <TIM21_IRQHandler+0x2c4>)
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	701a      	strb	r2, [r3, #0]
			TIM2->CNT    = 0;
 8000b4e:	2380      	movs	r3, #128	@ 0x80
 8000b50:	05db      	lsls	r3, r3, #23
 8000b52:	2200      	movs	r2, #0
 8000b54:	625a      	str	r2, [r3, #36]	@ 0x24
			USART2_PutstringE("\r\n1. Retiro sin PIN");
 8000b56:	4ba2      	ldr	r3, [pc, #648]	@ (8000de0 <TIM21_IRQHandler+0x2c8>)
 8000b58:	0018      	movs	r0, r3
 8000b5a:	f000 f9ed 	bl	8000f38 <USART2_PutstringE>
			USART2_PutstringE("2. Envio remesas");
 8000b5e:	4ba1      	ldr	r3, [pc, #644]	@ (8000de4 <TIM21_IRQHandler+0x2cc>)
 8000b60:	0018      	movs	r0, r3
 8000b62:	f000 f9e9 	bl	8000f38 <USART2_PutstringE>
			USART2_PutstringE("3. Consulta saldo");
 8000b66:	4ba0      	ldr	r3, [pc, #640]	@ (8000de8 <TIM21_IRQHandler+0x2d0>)
 8000b68:	0018      	movs	r0, r3
 8000b6a:	f000 f9e5 	bl	8000f38 <USART2_PutstringE>
		if (current_menu == 0 && received_char_USART2 == '3') {
 8000b6e:	e066      	b.n	8000c3e <TIM21_IRQHandler+0x126>
		}
		else if (current_menu == 1) {
 8000b70:	4b98      	ldr	r3, [pc, #608]	@ (8000dd4 <TIM21_IRQHandler+0x2bc>)
 8000b72:	781b      	ldrb	r3, [r3, #0]
 8000b74:	b2db      	uxtb	r3, r3
 8000b76:	2b01      	cmp	r3, #1
 8000b78:	d161      	bne.n	8000c3e <TIM21_IRQHandler+0x126>

			if (received_char_USART2 == '1')
 8000b7a:	4b97      	ldr	r3, [pc, #604]	@ (8000dd8 <TIM21_IRQHandler+0x2c0>)
 8000b7c:	781b      	ldrb	r3, [r3, #0]
 8000b7e:	b2db      	uxtb	r3, r3
 8000b80:	2b31      	cmp	r3, #49	@ 0x31
 8000b82:	d11a      	bne.n	8000bba <TIM21_IRQHandler+0xa2>
			{
				GPIOA->ODR |= LED_PIN;    /* LED ON                */
 8000b84:	23a0      	movs	r3, #160	@ 0xa0
 8000b86:	05db      	lsls	r3, r3, #23
 8000b88:	695a      	ldr	r2, [r3, #20]
 8000b8a:	23a0      	movs	r3, #160	@ 0xa0
 8000b8c:	05db      	lsls	r3, r3, #23
 8000b8e:	2120      	movs	r1, #32
 8000b90:	430a      	orrs	r2, r1
 8000b92:	615a      	str	r2, [r3, #20]
				GPIOA->ODR |= (1 << 12);
 8000b94:	23a0      	movs	r3, #160	@ 0xa0
 8000b96:	05db      	lsls	r3, r3, #23
 8000b98:	695a      	ldr	r2, [r3, #20]
 8000b9a:	23a0      	movs	r3, #160	@ 0xa0
 8000b9c:	05db      	lsls	r3, r3, #23
 8000b9e:	2180      	movs	r1, #128	@ 0x80
 8000ba0:	0149      	lsls	r1, r1, #5
 8000ba2:	430a      	orrs	r2, r1
 8000ba4:	615a      	str	r2, [r3, #20]
				led_ticks   = 10000000;         /* 50 × 2 ms = 100 ms    */
 8000ba6:	4b91      	ldr	r3, [pc, #580]	@ (8000dec <TIM21_IRQHandler+0x2d4>)
 8000ba8:	2280      	movs	r2, #128	@ 0x80
 8000baa:	701a      	strb	r2, [r3, #0]
				current_menu = 0;         /* volver al menú 0      */
 8000bac:	4b89      	ldr	r3, [pc, #548]	@ (8000dd4 <TIM21_IRQHandler+0x2bc>)
 8000bae:	2200      	movs	r2, #0
 8000bb0:	701a      	strb	r2, [r3, #0]
				lcd_step     = 0;
 8000bb2:	4b8a      	ldr	r3, [pc, #552]	@ (8000ddc <TIM21_IRQHandler+0x2c4>)
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	701a      	strb	r2, [r3, #0]
 8000bb8:	e041      	b.n	8000c3e <TIM21_IRQHandler+0x126>
			}

			else if (received_char_USART2 == '2') {
 8000bba:	4b87      	ldr	r3, [pc, #540]	@ (8000dd8 <TIM21_IRQHandler+0x2c0>)
 8000bbc:	781b      	ldrb	r3, [r3, #0]
 8000bbe:	b2db      	uxtb	r3, r3
 8000bc0:	2b32      	cmp	r3, #50	@ 0x32
 8000bc2:	d11a      	bne.n	8000bfa <TIM21_IRQHandler+0xe2>
				GPIOA->ODR |= LED_PIN;    /* LED ON                */
 8000bc4:	23a0      	movs	r3, #160	@ 0xa0
 8000bc6:	05db      	lsls	r3, r3, #23
 8000bc8:	695a      	ldr	r2, [r3, #20]
 8000bca:	23a0      	movs	r3, #160	@ 0xa0
 8000bcc:	05db      	lsls	r3, r3, #23
 8000bce:	2120      	movs	r1, #32
 8000bd0:	430a      	orrs	r2, r1
 8000bd2:	615a      	str	r2, [r3, #20]
				GPIOA->ODR |= (1 << 12);
 8000bd4:	23a0      	movs	r3, #160	@ 0xa0
 8000bd6:	05db      	lsls	r3, r3, #23
 8000bd8:	695a      	ldr	r2, [r3, #20]
 8000bda:	23a0      	movs	r3, #160	@ 0xa0
 8000bdc:	05db      	lsls	r3, r3, #23
 8000bde:	2180      	movs	r1, #128	@ 0x80
 8000be0:	0149      	lsls	r1, r1, #5
 8000be2:	430a      	orrs	r2, r1
 8000be4:	615a      	str	r2, [r3, #20]
				led_ticks   = 10000000;         /* 50 × 2 ms = 100 ms    */
 8000be6:	4b81      	ldr	r3, [pc, #516]	@ (8000dec <TIM21_IRQHandler+0x2d4>)
 8000be8:	2280      	movs	r2, #128	@ 0x80
 8000bea:	701a      	strb	r2, [r3, #0]
				current_menu = 0;         /* volver al menú 0      */
 8000bec:	4b79      	ldr	r3, [pc, #484]	@ (8000dd4 <TIM21_IRQHandler+0x2bc>)
 8000bee:	2200      	movs	r2, #0
 8000bf0:	701a      	strb	r2, [r3, #0]
				lcd_step     = 0;
 8000bf2:	4b7a      	ldr	r3, [pc, #488]	@ (8000ddc <TIM21_IRQHandler+0x2c4>)
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	701a      	strb	r2, [r3, #0]
 8000bf8:	e021      	b.n	8000c3e <TIM21_IRQHandler+0x126>
			}
			else if (received_char_USART2 == '3'){
 8000bfa:	4b77      	ldr	r3, [pc, #476]	@ (8000dd8 <TIM21_IRQHandler+0x2c0>)
 8000bfc:	781b      	ldrb	r3, [r3, #0]
 8000bfe:	b2db      	uxtb	r3, r3
 8000c00:	2b33      	cmp	r3, #51	@ 0x33
 8000c02:	d11c      	bne.n	8000c3e <TIM21_IRQHandler+0x126>
				GPIOA->ODR |= LED_PIN;    /* LED ON                */
 8000c04:	23a0      	movs	r3, #160	@ 0xa0
 8000c06:	05db      	lsls	r3, r3, #23
 8000c08:	695a      	ldr	r2, [r3, #20]
 8000c0a:	23a0      	movs	r3, #160	@ 0xa0
 8000c0c:	05db      	lsls	r3, r3, #23
 8000c0e:	2120      	movs	r1, #32
 8000c10:	430a      	orrs	r2, r1
 8000c12:	615a      	str	r2, [r3, #20]
				GPIOA->ODR |= (1 << 12);
 8000c14:	23a0      	movs	r3, #160	@ 0xa0
 8000c16:	05db      	lsls	r3, r3, #23
 8000c18:	695a      	ldr	r2, [r3, #20]
 8000c1a:	23a0      	movs	r3, #160	@ 0xa0
 8000c1c:	05db      	lsls	r3, r3, #23
 8000c1e:	2180      	movs	r1, #128	@ 0x80
 8000c20:	0149      	lsls	r1, r1, #5
 8000c22:	430a      	orrs	r2, r1
 8000c24:	615a      	str	r2, [r3, #20]
				menu_state = 1;
 8000c26:	4b72      	ldr	r3, [pc, #456]	@ (8000df0 <TIM21_IRQHandler+0x2d8>)
 8000c28:	2201      	movs	r2, #1
 8000c2a:	601a      	str	r2, [r3, #0]
				led_ticks   = 1000000;         /* 50 × 2 ms = 100 ms    */
 8000c2c:	4b6f      	ldr	r3, [pc, #444]	@ (8000dec <TIM21_IRQHandler+0x2d4>)
 8000c2e:	2240      	movs	r2, #64	@ 0x40
 8000c30:	701a      	strb	r2, [r3, #0]
				current_menu = 0;         /* volver al menú 0      */
 8000c32:	4b68      	ldr	r3, [pc, #416]	@ (8000dd4 <TIM21_IRQHandler+0x2bc>)
 8000c34:	2200      	movs	r2, #0
 8000c36:	701a      	strb	r2, [r3, #0]
				lcd_step     = 0;
 8000c38:	4b68      	ldr	r3, [pc, #416]	@ (8000ddc <TIM21_IRQHandler+0x2c4>)
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	701a      	strb	r2, [r3, #0]

			}
		}
	}

	if (led_ticks) { /* ---------- temporizador LED ---------- */
 8000c3e:	4b6b      	ldr	r3, [pc, #428]	@ (8000dec <TIM21_IRQHandler+0x2d4>)
 8000c40:	781b      	ldrb	r3, [r3, #0]
 8000c42:	b2db      	uxtb	r3, r3
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	d019      	beq.n	8000c7c <TIM21_IRQHandler+0x164>
		if (--led_ticks == 0)
 8000c48:	4b68      	ldr	r3, [pc, #416]	@ (8000dec <TIM21_IRQHandler+0x2d4>)
 8000c4a:	781b      	ldrb	r3, [r3, #0]
 8000c4c:	b2db      	uxtb	r3, r3
 8000c4e:	3b01      	subs	r3, #1
 8000c50:	b2db      	uxtb	r3, r3
 8000c52:	4a66      	ldr	r2, [pc, #408]	@ (8000dec <TIM21_IRQHandler+0x2d4>)
 8000c54:	1c19      	adds	r1, r3, #0
 8000c56:	7011      	strb	r1, [r2, #0]
 8000c58:	2b00      	cmp	r3, #0
 8000c5a:	d107      	bne.n	8000c6c <TIM21_IRQHandler+0x154>
			GPIOA->ODR &= ~LED_PIN;            /* LED OFF */
 8000c5c:	23a0      	movs	r3, #160	@ 0xa0
 8000c5e:	05db      	lsls	r3, r3, #23
 8000c60:	695a      	ldr	r2, [r3, #20]
 8000c62:	23a0      	movs	r3, #160	@ 0xa0
 8000c64:	05db      	lsls	r3, r3, #23
 8000c66:	2120      	movs	r1, #32
 8000c68:	438a      	bics	r2, r1
 8000c6a:	615a      	str	r2, [r3, #20]
			GPIOA->ODR &= ~(1 << 12);
 8000c6c:	23a0      	movs	r3, #160	@ 0xa0
 8000c6e:	05db      	lsls	r3, r3, #23
 8000c70:	695a      	ldr	r2, [r3, #20]
 8000c72:	23a0      	movs	r3, #160	@ 0xa0
 8000c74:	05db      	lsls	r3, r3, #23
 8000c76:	495f      	ldr	r1, [pc, #380]	@ (8000df4 <TIM21_IRQHandler+0x2dc>)
 8000c78:	400a      	ands	r2, r1
 8000c7a:	615a      	str	r2, [r3, #20]
	}

	if (menu_state == 1) {
 8000c7c:	4b5c      	ldr	r3, [pc, #368]	@ (8000df0 <TIM21_IRQHandler+0x2d8>)
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	2b01      	cmp	r3, #1
 8000c82:	d10f      	bne.n	8000ca4 <TIM21_IRQHandler+0x18c>
		menu2_timer++;  // Incrementar el temporizador de Menú 2
 8000c84:	4b5c      	ldr	r3, [pc, #368]	@ (8000df8 <TIM21_IRQHandler+0x2e0>)
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	1c5a      	adds	r2, r3, #1
 8000c8a:	4b5b      	ldr	r3, [pc, #364]	@ (8000df8 <TIM21_IRQHandler+0x2e0>)
 8000c8c:	601a      	str	r2, [r3, #0]
		if (menu2_timer >= 3000) {  // 5000 interrupciones = 10 segundos (suponiendo 2ms por interrupción)
 8000c8e:	4b5a      	ldr	r3, [pc, #360]	@ (8000df8 <TIM21_IRQHandler+0x2e0>)
 8000c90:	681b      	ldr	r3, [r3, #0]
 8000c92:	4a5a      	ldr	r2, [pc, #360]	@ (8000dfc <TIM21_IRQHandler+0x2e4>)
 8000c94:	4293      	cmp	r3, r2
 8000c96:	dd05      	ble.n	8000ca4 <TIM21_IRQHandler+0x18c>
			menu_state = 0;  // Volver a Menú 1 después del tiempo
 8000c98:	4b55      	ldr	r3, [pc, #340]	@ (8000df0 <TIM21_IRQHandler+0x2d8>)
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	601a      	str	r2, [r3, #0]
			menu2_timer = 0; // Resetear el temporizador
 8000c9e:	4b56      	ldr	r3, [pc, #344]	@ (8000df8 <TIM21_IRQHandler+0x2e0>)
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	601a      	str	r2, [r3, #0]
	}



	// Apagar los displays antes de escribir
	GPIOB->ODR = 0x0000;
 8000ca4:	4b56      	ldr	r3, [pc, #344]	@ (8000e00 <TIM21_IRQHandler+0x2e8>)
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	615a      	str	r2, [r3, #20]
	// Mostrar los valores según el menú actual
	switch (menu_state) {
 8000caa:	4b51      	ldr	r3, [pc, #324]	@ (8000df0 <TIM21_IRQHandler+0x2d8>)
 8000cac:	681b      	ldr	r3, [r3, #0]
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	d002      	beq.n	8000cb8 <TIM21_IRQHandler+0x1a0>
 8000cb2:	2b01      	cmp	r3, #1
 8000cb4:	d03a      	beq.n	8000d2c <TIM21_IRQHandler+0x214>
 8000cb6:	e073      	b.n	8000da0 <TIM21_IRQHandler+0x288>
		case 0:  // Menú 1
			switch (display_index) {
 8000cb8:	4b52      	ldr	r3, [pc, #328]	@ (8000e04 <TIM21_IRQHandler+0x2ec>)
 8000cba:	781b      	ldrb	r3, [r3, #0]
 8000cbc:	b2db      	uxtb	r3, r3
 8000cbe:	2b05      	cmp	r3, #5
 8000cc0:	d82f      	bhi.n	8000d22 <TIM21_IRQHandler+0x20a>
 8000cc2:	009a      	lsls	r2, r3, #2
 8000cc4:	4b50      	ldr	r3, [pc, #320]	@ (8000e08 <TIM21_IRQHandler+0x2f0>)
 8000cc6:	18d3      	adds	r3, r2, r3
 8000cc8:	681b      	ldr	r3, [r3, #0]
 8000cca:	469f      	mov	pc, r3
				case 0:
					GPIOB->ODR |= NUM_0 | (1<<7);  // Número 0 en display 1
 8000ccc:	4b4c      	ldr	r3, [pc, #304]	@ (8000e00 <TIM21_IRQHandler+0x2e8>)
 8000cce:	695a      	ldr	r2, [r3, #20]
 8000cd0:	4b4b      	ldr	r3, [pc, #300]	@ (8000e00 <TIM21_IRQHandler+0x2e8>)
 8000cd2:	21bf      	movs	r1, #191	@ 0xbf
 8000cd4:	430a      	orrs	r2, r1
 8000cd6:	615a      	str	r2, [r3, #20]
					break;
 8000cd8:	e027      	b.n	8000d2a <TIM21_IRQHandler+0x212>
				case 1:
					GPIOB->ODR |= NUM_0 | (1<<8);  // Número 1 en display 2
 8000cda:	4b49      	ldr	r3, [pc, #292]	@ (8000e00 <TIM21_IRQHandler+0x2e8>)
 8000cdc:	695a      	ldr	r2, [r3, #20]
 8000cde:	4b48      	ldr	r3, [pc, #288]	@ (8000e00 <TIM21_IRQHandler+0x2e8>)
 8000ce0:	2140      	movs	r1, #64	@ 0x40
 8000ce2:	31ff      	adds	r1, #255	@ 0xff
 8000ce4:	430a      	orrs	r2, r1
 8000ce6:	615a      	str	r2, [r3, #20]
					break;
 8000ce8:	e01f      	b.n	8000d2a <TIM21_IRQHandler+0x212>
				case 2:
					GPIOB->ODR |= NUM_0 | (1<<9);  // Número 2 en display 3
 8000cea:	4b45      	ldr	r3, [pc, #276]	@ (8000e00 <TIM21_IRQHandler+0x2e8>)
 8000cec:	695a      	ldr	r2, [r3, #20]
 8000cee:	4b44      	ldr	r3, [pc, #272]	@ (8000e00 <TIM21_IRQHandler+0x2e8>)
 8000cf0:	4946      	ldr	r1, [pc, #280]	@ (8000e0c <TIM21_IRQHandler+0x2f4>)
 8000cf2:	430a      	orrs	r2, r1
 8000cf4:	615a      	str	r2, [r3, #20]
					break;
 8000cf6:	e018      	b.n	8000d2a <TIM21_IRQHandler+0x212>
				case 3:
					GPIOB->ODR |= NUM_0 | (1<<10); // Número 3 en display 4
 8000cf8:	4b41      	ldr	r3, [pc, #260]	@ (8000e00 <TIM21_IRQHandler+0x2e8>)
 8000cfa:	695a      	ldr	r2, [r3, #20]
 8000cfc:	4b40      	ldr	r3, [pc, #256]	@ (8000e00 <TIM21_IRQHandler+0x2e8>)
 8000cfe:	4944      	ldr	r1, [pc, #272]	@ (8000e10 <TIM21_IRQHandler+0x2f8>)
 8000d00:	430a      	orrs	r2, r1
 8000d02:	615a      	str	r2, [r3, #20]
					break;
 8000d04:	e011      	b.n	8000d2a <TIM21_IRQHandler+0x212>
				case 4:
					GPIOB->ODR |= NUM_0 | (1<<11); // Número 4 en display 5
 8000d06:	4b3e      	ldr	r3, [pc, #248]	@ (8000e00 <TIM21_IRQHandler+0x2e8>)
 8000d08:	695a      	ldr	r2, [r3, #20]
 8000d0a:	4b3d      	ldr	r3, [pc, #244]	@ (8000e00 <TIM21_IRQHandler+0x2e8>)
 8000d0c:	4941      	ldr	r1, [pc, #260]	@ (8000e14 <TIM21_IRQHandler+0x2fc>)
 8000d0e:	430a      	orrs	r2, r1
 8000d10:	615a      	str	r2, [r3, #20]
					break;
 8000d12:	e00a      	b.n	8000d2a <TIM21_IRQHandler+0x212>
				case 5:
					GPIOB->ODR |= NUM_0 | (1<<12); // Número 5 en display 6
 8000d14:	4b3a      	ldr	r3, [pc, #232]	@ (8000e00 <TIM21_IRQHandler+0x2e8>)
 8000d16:	695a      	ldr	r2, [r3, #20]
 8000d18:	4b39      	ldr	r3, [pc, #228]	@ (8000e00 <TIM21_IRQHandler+0x2e8>)
 8000d1a:	493f      	ldr	r1, [pc, #252]	@ (8000e18 <TIM21_IRQHandler+0x300>)
 8000d1c:	430a      	orrs	r2, r1
 8000d1e:	615a      	str	r2, [r3, #20]
					break;
 8000d20:	e003      	b.n	8000d2a <TIM21_IRQHandler+0x212>
				default:
					display_index = 0;  // Reiniciar ciclo
 8000d22:	4b38      	ldr	r3, [pc, #224]	@ (8000e04 <TIM21_IRQHandler+0x2ec>)
 8000d24:	2200      	movs	r2, #0
 8000d26:	701a      	strb	r2, [r3, #0]
					return;
 8000d28:	e04f      	b.n	8000dca <TIM21_IRQHandler+0x2b2>
			}
			break;
 8000d2a:	e039      	b.n	8000da0 <TIM21_IRQHandler+0x288>

		case 1:  // Menú 2
			switch (display_index) {
 8000d2c:	4b35      	ldr	r3, [pc, #212]	@ (8000e04 <TIM21_IRQHandler+0x2ec>)
 8000d2e:	781b      	ldrb	r3, [r3, #0]
 8000d30:	b2db      	uxtb	r3, r3
 8000d32:	2b05      	cmp	r3, #5
 8000d34:	d82f      	bhi.n	8000d96 <TIM21_IRQHandler+0x27e>
 8000d36:	009a      	lsls	r2, r3, #2
 8000d38:	4b38      	ldr	r3, [pc, #224]	@ (8000e1c <TIM21_IRQHandler+0x304>)
 8000d3a:	18d3      	adds	r3, r2, r3
 8000d3c:	681b      	ldr	r3, [r3, #0]
 8000d3e:	469f      	mov	pc, r3
				case 0:
					GPIOB->ODR |= NUM_0 | (1<<7);  // Número 6 en display 1
 8000d40:	4b2f      	ldr	r3, [pc, #188]	@ (8000e00 <TIM21_IRQHandler+0x2e8>)
 8000d42:	695a      	ldr	r2, [r3, #20]
 8000d44:	4b2e      	ldr	r3, [pc, #184]	@ (8000e00 <TIM21_IRQHandler+0x2e8>)
 8000d46:	21bf      	movs	r1, #191	@ 0xbf
 8000d48:	430a      	orrs	r2, r1
 8000d4a:	615a      	str	r2, [r3, #20]
					break;
 8000d4c:	e027      	b.n	8000d9e <TIM21_IRQHandler+0x286>
				case 1:
					GPIOB->ODR |= NUM_0 | (1<<8);  // Número 7 en display 2
 8000d4e:	4b2c      	ldr	r3, [pc, #176]	@ (8000e00 <TIM21_IRQHandler+0x2e8>)
 8000d50:	695a      	ldr	r2, [r3, #20]
 8000d52:	4b2b      	ldr	r3, [pc, #172]	@ (8000e00 <TIM21_IRQHandler+0x2e8>)
 8000d54:	2140      	movs	r1, #64	@ 0x40
 8000d56:	31ff      	adds	r1, #255	@ 0xff
 8000d58:	430a      	orrs	r2, r1
 8000d5a:	615a      	str	r2, [r3, #20]
					break;
 8000d5c:	e01f      	b.n	8000d9e <TIM21_IRQHandler+0x286>
				case 2:
					GPIOB->ODR |= NUM_3 | (1<<9);  // Número 8 en display 3
 8000d5e:	4b28      	ldr	r3, [pc, #160]	@ (8000e00 <TIM21_IRQHandler+0x2e8>)
 8000d60:	695a      	ldr	r2, [r3, #20]
 8000d62:	4b27      	ldr	r3, [pc, #156]	@ (8000e00 <TIM21_IRQHandler+0x2e8>)
 8000d64:	492e      	ldr	r1, [pc, #184]	@ (8000e20 <TIM21_IRQHandler+0x308>)
 8000d66:	430a      	orrs	r2, r1
 8000d68:	615a      	str	r2, [r3, #20]
					break;
 8000d6a:	e018      	b.n	8000d9e <TIM21_IRQHandler+0x286>
				case 3:
					GPIOB->ODR |= NUM_0 | (1<<10); // Número 9 en display 4
 8000d6c:	4b24      	ldr	r3, [pc, #144]	@ (8000e00 <TIM21_IRQHandler+0x2e8>)
 8000d6e:	695a      	ldr	r2, [r3, #20]
 8000d70:	4b23      	ldr	r3, [pc, #140]	@ (8000e00 <TIM21_IRQHandler+0x2e8>)
 8000d72:	4927      	ldr	r1, [pc, #156]	@ (8000e10 <TIM21_IRQHandler+0x2f8>)
 8000d74:	430a      	orrs	r2, r1
 8000d76:	615a      	str	r2, [r3, #20]
					break;
 8000d78:	e011      	b.n	8000d9e <TIM21_IRQHandler+0x286>
				case 4:
					GPIOB->ODR |= NUM_5 | (1<<11); // Número 0 en display 5
 8000d7a:	4b21      	ldr	r3, [pc, #132]	@ (8000e00 <TIM21_IRQHandler+0x2e8>)
 8000d7c:	695a      	ldr	r2, [r3, #20]
 8000d7e:	4b20      	ldr	r3, [pc, #128]	@ (8000e00 <TIM21_IRQHandler+0x2e8>)
 8000d80:	4928      	ldr	r1, [pc, #160]	@ (8000e24 <TIM21_IRQHandler+0x30c>)
 8000d82:	430a      	orrs	r2, r1
 8000d84:	615a      	str	r2, [r3, #20]
					break;
 8000d86:	e00a      	b.n	8000d9e <TIM21_IRQHandler+0x286>
				case 5:
					GPIOB->ODR |= NUM_0 | (1<<12); // Número 1 en display 6
 8000d88:	4b1d      	ldr	r3, [pc, #116]	@ (8000e00 <TIM21_IRQHandler+0x2e8>)
 8000d8a:	695a      	ldr	r2, [r3, #20]
 8000d8c:	4b1c      	ldr	r3, [pc, #112]	@ (8000e00 <TIM21_IRQHandler+0x2e8>)
 8000d8e:	4922      	ldr	r1, [pc, #136]	@ (8000e18 <TIM21_IRQHandler+0x300>)
 8000d90:	430a      	orrs	r2, r1
 8000d92:	615a      	str	r2, [r3, #20]
					break;
 8000d94:	e003      	b.n	8000d9e <TIM21_IRQHandler+0x286>
				default:
					display_index = 0;  // Reiniciar ciclo
 8000d96:	4b1b      	ldr	r3, [pc, #108]	@ (8000e04 <TIM21_IRQHandler+0x2ec>)
 8000d98:	2200      	movs	r2, #0
 8000d9a:	701a      	strb	r2, [r3, #0]
					return;
 8000d9c:	e015      	b.n	8000dca <TIM21_IRQHandler+0x2b2>
			}
			break;
 8000d9e:	46c0      	nop			@ (mov r8, r8)
	}

	// Incrementar el índice de displays
	display_index++;
 8000da0:	4b18      	ldr	r3, [pc, #96]	@ (8000e04 <TIM21_IRQHandler+0x2ec>)
 8000da2:	781b      	ldrb	r3, [r3, #0]
 8000da4:	b2db      	uxtb	r3, r3
 8000da6:	3301      	adds	r3, #1
 8000da8:	b2da      	uxtb	r2, r3
 8000daa:	4b16      	ldr	r3, [pc, #88]	@ (8000e04 <TIM21_IRQHandler+0x2ec>)
 8000dac:	701a      	strb	r2, [r3, #0]
	if (display_index > 5) {
 8000dae:	4b15      	ldr	r3, [pc, #84]	@ (8000e04 <TIM21_IRQHandler+0x2ec>)
 8000db0:	781b      	ldrb	r3, [r3, #0]
 8000db2:	b2db      	uxtb	r3, r3
 8000db4:	2b05      	cmp	r3, #5
 8000db6:	d902      	bls.n	8000dbe <TIM21_IRQHandler+0x2a6>
		display_index = 0; // Ciclar
 8000db8:	4b12      	ldr	r3, [pc, #72]	@ (8000e04 <TIM21_IRQHandler+0x2ec>)
 8000dba:	2200      	movs	r2, #0
 8000dbc:	701a      	strb	r2, [r3, #0]
	}

	TIM21->SR &= ~(1<<0);  // Clear UIF flag
 8000dbe:	4b1a      	ldr	r3, [pc, #104]	@ (8000e28 <TIM21_IRQHandler+0x310>)
 8000dc0:	691a      	ldr	r2, [r3, #16]
 8000dc2:	4b19      	ldr	r3, [pc, #100]	@ (8000e28 <TIM21_IRQHandler+0x310>)
 8000dc4:	2101      	movs	r1, #1
 8000dc6:	438a      	bics	r2, r1
 8000dc8:	611a      	str	r2, [r3, #16]
}
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	bd80      	pop	{r7, pc}
 8000dce:	46c0      	nop			@ (mov r8, r8)
 8000dd0:	2000001f 	.word	0x2000001f
 8000dd4:	20000039 	.word	0x20000039
 8000dd8:	2000001d 	.word	0x2000001d
 8000ddc:	20000038 	.word	0x20000038
 8000de0:	080014d0 	.word	0x080014d0
 8000de4:	080014e4 	.word	0x080014e4
 8000de8:	080014f8 	.word	0x080014f8
 8000dec:	2000003a 	.word	0x2000003a
 8000df0:	20000030 	.word	0x20000030
 8000df4:	ffffefff 	.word	0xffffefff
 8000df8:	20000034 	.word	0x20000034
 8000dfc:	00000bb7 	.word	0x00000bb7
 8000e00:	50000400 	.word	0x50000400
 8000e04:	2000002d 	.word	0x2000002d
 8000e08:	080016e8 	.word	0x080016e8
 8000e0c:	0000023f 	.word	0x0000023f
 8000e10:	0000043f 	.word	0x0000043f
 8000e14:	0000083f 	.word	0x0000083f
 8000e18:	0000103f 	.word	0x0000103f
 8000e1c:	08001700 	.word	0x08001700
 8000e20:	0000024f 	.word	0x0000024f
 8000e24:	0000086d 	.word	0x0000086d
 8000e28:	40010800 	.word	0x40010800

08000e2c <USART2Init>:


//Inicialización de USART2
void USART2Init(void) {
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	af00      	add	r7, sp, #0
	RCC->APB1ENR |= (1<<17); //USART CLK ENABLE
 8000e30:	4b26      	ldr	r3, [pc, #152]	@ (8000ecc <USART2Init+0xa0>)
 8000e32:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8000e34:	4b25      	ldr	r3, [pc, #148]	@ (8000ecc <USART2Init+0xa0>)
 8000e36:	2180      	movs	r1, #128	@ 0x80
 8000e38:	0289      	lsls	r1, r1, #10
 8000e3a:	430a      	orrs	r2, r1
 8000e3c:	639a      	str	r2, [r3, #56]	@ 0x38
	RCC->IOPENR |= (1<<0); //GPIOA CLK ENABLE
 8000e3e:	4b23      	ldr	r3, [pc, #140]	@ (8000ecc <USART2Init+0xa0>)
 8000e40:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000e42:	4b22      	ldr	r3, [pc, #136]	@ (8000ecc <USART2Init+0xa0>)
 8000e44:	2101      	movs	r1, #1
 8000e46:	430a      	orrs	r2, r1
 8000e48:	62da      	str	r2, [r3, #44]	@ 0x2c
	//ALTERNATE FUNCTION PA2(TX) Y PA3(RX)
	GPIOA->MODER &= ~(1<<4);  //PA2 as AF
 8000e4a:	23a0      	movs	r3, #160	@ 0xa0
 8000e4c:	05db      	lsls	r3, r3, #23
 8000e4e:	681a      	ldr	r2, [r3, #0]
 8000e50:	23a0      	movs	r3, #160	@ 0xa0
 8000e52:	05db      	lsls	r3, r3, #23
 8000e54:	2110      	movs	r1, #16
 8000e56:	438a      	bics	r2, r1
 8000e58:	601a      	str	r2, [r3, #0]
	GPIOA->MODER &= ~(1<<6);  //PA3 as AF
 8000e5a:	23a0      	movs	r3, #160	@ 0xa0
 8000e5c:	05db      	lsls	r3, r3, #23
 8000e5e:	681a      	ldr	r2, [r3, #0]
 8000e60:	23a0      	movs	r3, #160	@ 0xa0
 8000e62:	05db      	lsls	r3, r3, #23
 8000e64:	2140      	movs	r1, #64	@ 0x40
 8000e66:	438a      	bics	r2, r1
 8000e68:	601a      	str	r2, [r3, #0]
	GPIOA->AFR[0] |= (1<<10); //PA2 AS  AF4
 8000e6a:	23a0      	movs	r3, #160	@ 0xa0
 8000e6c:	05db      	lsls	r3, r3, #23
 8000e6e:	6a1a      	ldr	r2, [r3, #32]
 8000e70:	23a0      	movs	r3, #160	@ 0xa0
 8000e72:	05db      	lsls	r3, r3, #23
 8000e74:	2180      	movs	r1, #128	@ 0x80
 8000e76:	00c9      	lsls	r1, r1, #3
 8000e78:	430a      	orrs	r2, r1
 8000e7a:	621a      	str	r2, [r3, #32]
	GPIOA->AFR[0] |= (1<<14); //PA3 AS AF4
 8000e7c:	23a0      	movs	r3, #160	@ 0xa0
 8000e7e:	05db      	lsls	r3, r3, #23
 8000e80:	6a1a      	ldr	r2, [r3, #32]
 8000e82:	23a0      	movs	r3, #160	@ 0xa0
 8000e84:	05db      	lsls	r3, r3, #23
 8000e86:	2180      	movs	r1, #128	@ 0x80
 8000e88:	01c9      	lsls	r1, r1, #7
 8000e8a:	430a      	orrs	r2, r1
 8000e8c:	621a      	str	r2, [r3, #32]
	USART2->BRR = 139;        //USART2 @115200 bps with 16Mhz clock HSi
 8000e8e:	4b10      	ldr	r3, [pc, #64]	@ (8000ed0 <USART2Init+0xa4>)
 8000e90:	228b      	movs	r2, #139	@ 0x8b
 8000e92:	60da      	str	r2, [r3, #12]
	USART2->CR1 = 0;          // Apagar USART2 primero
 8000e94:	4b0e      	ldr	r3, [pc, #56]	@ (8000ed0 <USART2Init+0xa4>)
 8000e96:	2200      	movs	r2, #0
 8000e98:	601a      	str	r2, [r3, #0]
	USART2->CR1 |= (1<<2) | (1<<3); // Habilitar RX y TX
 8000e9a:	4b0d      	ldr	r3, [pc, #52]	@ (8000ed0 <USART2Init+0xa4>)
 8000e9c:	681a      	ldr	r2, [r3, #0]
 8000e9e:	4b0c      	ldr	r3, [pc, #48]	@ (8000ed0 <USART2Init+0xa4>)
 8000ea0:	210c      	movs	r1, #12
 8000ea2:	430a      	orrs	r2, r1
 8000ea4:	601a      	str	r2, [r3, #0]
	USART2->CR1 |= (1<<5);          // Habilitar interrupción por RXNE
 8000ea6:	4b0a      	ldr	r3, [pc, #40]	@ (8000ed0 <USART2Init+0xa4>)
 8000ea8:	681a      	ldr	r2, [r3, #0]
 8000eaa:	4b09      	ldr	r3, [pc, #36]	@ (8000ed0 <USART2Init+0xa4>)
 8000eac:	2120      	movs	r1, #32
 8000eae:	430a      	orrs	r2, r1
 8000eb0:	601a      	str	r2, [r3, #0]
	USART2->CR1 |= (1<<0);          // Habilitar USART2
 8000eb2:	4b07      	ldr	r3, [pc, #28]	@ (8000ed0 <USART2Init+0xa4>)
 8000eb4:	681a      	ldr	r2, [r3, #0]
 8000eb6:	4b06      	ldr	r3, [pc, #24]	@ (8000ed0 <USART2Init+0xa4>)
 8000eb8:	2101      	movs	r1, #1
 8000eba:	430a      	orrs	r2, r1
 8000ebc:	601a      	str	r2, [r3, #0]
	NVIC_EnableIRQ(USART2_IRQn);    // Habilitar interrupción en NVIC*/
 8000ebe:	201c      	movs	r0, #28
 8000ec0:	f7ff f922 	bl	8000108 <__NVIC_EnableIRQ>
}
 8000ec4:	46c0      	nop			@ (mov r8, r8)
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	bd80      	pop	{r7, pc}
 8000eca:	46c0      	nop			@ (mov r8, r8)
 8000ecc:	40021000 	.word	0x40021000
 8000ed0:	40004400 	.word	0x40004400

08000ed4 <USART2_write>:

void USART2_write (uint8_t ch)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b082      	sub	sp, #8
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	0002      	movs	r2, r0
 8000edc:	1dfb      	adds	r3, r7, #7
 8000ede:	701a      	strb	r2, [r3, #0]
	while (!(USART2->ISR & 0X0080)){}
 8000ee0:	46c0      	nop			@ (mov r8, r8)
 8000ee2:	4b06      	ldr	r3, [pc, #24]	@ (8000efc <USART2_write+0x28>)
 8000ee4:	69db      	ldr	r3, [r3, #28]
 8000ee6:	2280      	movs	r2, #128	@ 0x80
 8000ee8:	4013      	ands	r3, r2
 8000eea:	d0fa      	beq.n	8000ee2 <USART2_write+0xe>
	USART2->TDR = ch;
 8000eec:	4b03      	ldr	r3, [pc, #12]	@ (8000efc <USART2_write+0x28>)
 8000eee:	1dfa      	adds	r2, r7, #7
 8000ef0:	7812      	ldrb	r2, [r2, #0]
 8000ef2:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8000ef4:	46c0      	nop			@ (mov r8, r8)
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	b002      	add	sp, #8
 8000efa:	bd80      	pop	{r7, pc}
 8000efc:	40004400 	.word	0x40004400

08000f00 <USART2_VALID>:

void USART2_VALID(char* command) {
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b082      	sub	sp, #8
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	6078      	str	r0, [r7, #4]
    while (*command != 0) {
 8000f08:	e00b      	b.n	8000f22 <USART2_VALID+0x22>
        while (!(USART2->ISR & USART_ISR_TXE));
 8000f0a:	46c0      	nop			@ (mov r8, r8)
 8000f0c:	4b09      	ldr	r3, [pc, #36]	@ (8000f34 <USART2_VALID+0x34>)
 8000f0e:	69db      	ldr	r3, [r3, #28]
 8000f10:	2280      	movs	r2, #128	@ 0x80
 8000f12:	4013      	ands	r3, r2
 8000f14:	d0fa      	beq.n	8000f0c <USART2_VALID+0xc>
        USART2->TDR = *command++;
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	1c5a      	adds	r2, r3, #1
 8000f1a:	607a      	str	r2, [r7, #4]
 8000f1c:	781a      	ldrb	r2, [r3, #0]
 8000f1e:	4b05      	ldr	r3, [pc, #20]	@ (8000f34 <USART2_VALID+0x34>)
 8000f20:	629a      	str	r2, [r3, #40]	@ 0x28
    while (*command != 0) {
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	781b      	ldrb	r3, [r3, #0]
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d1ef      	bne.n	8000f0a <USART2_VALID+0xa>
    }
}
 8000f2a:	46c0      	nop			@ (mov r8, r8)
 8000f2c:	46c0      	nop			@ (mov r8, r8)
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	b002      	add	sp, #8
 8000f32:	bd80      	pop	{r7, pc}
 8000f34:	40004400 	.word	0x40004400

08000f38 <USART2_PutstringE>:
		USART2_write(*stringptr);
		stringptr++;
	}
}

void USART2_PutstringE(uint8_t* stringptr) {
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b082      	sub	sp, #8
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	6078      	str	r0, [r7, #4]
	while(*stringptr != 0x00) {
 8000f40:	e007      	b.n	8000f52 <USART2_PutstringE+0x1a>
		USART2_write(*stringptr);
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	781b      	ldrb	r3, [r3, #0]
 8000f46:	0018      	movs	r0, r3
 8000f48:	f7ff ffc4 	bl	8000ed4 <USART2_write>
		stringptr++;
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	3301      	adds	r3, #1
 8000f50:	607b      	str	r3, [r7, #4]
	while(*stringptr != 0x00) {
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	781b      	ldrb	r3, [r3, #0]
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d1f3      	bne.n	8000f42 <USART2_PutstringE+0xa>
	}
	USART2_write(0x0A);
 8000f5a:	200a      	movs	r0, #10
 8000f5c:	f7ff ffba 	bl	8000ed4 <USART2_write>
	USART2_write(0x0D);
 8000f60:	200d      	movs	r0, #13
 8000f62:	f7ff ffb7 	bl	8000ed4 <USART2_write>
}
 8000f66:	46c0      	nop			@ (mov r8, r8)
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	b002      	add	sp, #8
 8000f6c:	bd80      	pop	{r7, pc}
	...

08000f70 <USART2_IRQHandler>:


void USART2_IRQHandler(void) {
 8000f70:	b580      	push	{r7, lr}
 8000f72:	af00      	add	r7, sp, #0
    if (USART2->ISR & (1<<5)) { // RXNE = 1
 8000f74:	4b07      	ldr	r3, [pc, #28]	@ (8000f94 <USART2_IRQHandler+0x24>)
 8000f76:	69db      	ldr	r3, [r3, #28]
 8000f78:	2220      	movs	r2, #32
 8000f7a:	4013      	ands	r3, r2
 8000f7c:	d007      	beq.n	8000f8e <USART2_IRQHandler+0x1e>
    	received_char_USART2 = USART2->RDR; // Leer valor de entrada
 8000f7e:	4b05      	ldr	r3, [pc, #20]	@ (8000f94 <USART2_IRQHandler+0x24>)
 8000f80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000f82:	b2da      	uxtb	r2, r3
 8000f84:	4b04      	ldr	r3, [pc, #16]	@ (8000f98 <USART2_IRQHandler+0x28>)
 8000f86:	701a      	strb	r2, [r3, #0]
    	flag_received_USART2 = 1;           // Se activa la bandera de valor  recibido
 8000f88:	4b04      	ldr	r3, [pc, #16]	@ (8000f9c <USART2_IRQHandler+0x2c>)
 8000f8a:	2201      	movs	r2, #1
 8000f8c:	701a      	strb	r2, [r3, #0]
    }
}
 8000f8e:	46c0      	nop			@ (mov r8, r8)
 8000f90:	46bd      	mov	sp, r7
 8000f92:	bd80      	pop	{r7, pc}
 8000f94:	40004400 	.word	0x40004400
 8000f98:	2000001d 	.word	0x2000001d
 8000f9c:	2000001f 	.word	0x2000001f

08000fa0 <USART1_Init>:

void USART1_Init(void) {
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	af00      	add	r7, sp, #0
    RCC->APB2ENR |= (1 << 14);
 8000fa4:	4b25      	ldr	r3, [pc, #148]	@ (800103c <USART1_Init+0x9c>)
 8000fa6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000fa8:	4b24      	ldr	r3, [pc, #144]	@ (800103c <USART1_Init+0x9c>)
 8000faa:	2180      	movs	r1, #128	@ 0x80
 8000fac:	01c9      	lsls	r1, r1, #7
 8000fae:	430a      	orrs	r2, r1
 8000fb0:	635a      	str	r2, [r3, #52]	@ 0x34
    RCC->IOPENR |= (1 << 0);
 8000fb2:	4b22      	ldr	r3, [pc, #136]	@ (800103c <USART1_Init+0x9c>)
 8000fb4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000fb6:	4b21      	ldr	r3, [pc, #132]	@ (800103c <USART1_Init+0x9c>)
 8000fb8:	2101      	movs	r1, #1
 8000fba:	430a      	orrs	r2, r1
 8000fbc:	62da      	str	r2, [r3, #44]	@ 0x2c
    GPIOA->MODER &= ~(1 << 18);
 8000fbe:	23a0      	movs	r3, #160	@ 0xa0
 8000fc0:	05db      	lsls	r3, r3, #23
 8000fc2:	681a      	ldr	r2, [r3, #0]
 8000fc4:	23a0      	movs	r3, #160	@ 0xa0
 8000fc6:	05db      	lsls	r3, r3, #23
 8000fc8:	491d      	ldr	r1, [pc, #116]	@ (8001040 <USART1_Init+0xa0>)
 8000fca:	400a      	ands	r2, r1
 8000fcc:	601a      	str	r2, [r3, #0]
    GPIOA->MODER &= ~(1 << 20);
 8000fce:	23a0      	movs	r3, #160	@ 0xa0
 8000fd0:	05db      	lsls	r3, r3, #23
 8000fd2:	681a      	ldr	r2, [r3, #0]
 8000fd4:	23a0      	movs	r3, #160	@ 0xa0
 8000fd6:	05db      	lsls	r3, r3, #23
 8000fd8:	491a      	ldr	r1, [pc, #104]	@ (8001044 <USART1_Init+0xa4>)
 8000fda:	400a      	ands	r2, r1
 8000fdc:	601a      	str	r2, [r3, #0]
    GPIOA->AFR[1] |= (1 << 6);
 8000fde:	23a0      	movs	r3, #160	@ 0xa0
 8000fe0:	05db      	lsls	r3, r3, #23
 8000fe2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000fe4:	23a0      	movs	r3, #160	@ 0xa0
 8000fe6:	05db      	lsls	r3, r3, #23
 8000fe8:	2140      	movs	r1, #64	@ 0x40
 8000fea:	430a      	orrs	r2, r1
 8000fec:	625a      	str	r2, [r3, #36]	@ 0x24
    GPIOA->AFR[1] |= (1 << 10);
 8000fee:	23a0      	movs	r3, #160	@ 0xa0
 8000ff0:	05db      	lsls	r3, r3, #23
 8000ff2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000ff4:	23a0      	movs	r3, #160	@ 0xa0
 8000ff6:	05db      	lsls	r3, r3, #23
 8000ff8:	2180      	movs	r1, #128	@ 0x80
 8000ffa:	00c9      	lsls	r1, r1, #3
 8000ffc:	430a      	orrs	r2, r1
 8000ffe:	625a      	str	r2, [r3, #36]	@ 0x24
    USART1->BRR = 139;
 8001000:	4b11      	ldr	r3, [pc, #68]	@ (8001048 <USART1_Init+0xa8>)
 8001002:	228b      	movs	r2, #139	@ 0x8b
 8001004:	60da      	str	r2, [r3, #12]
    USART1->CR1 = USART_CR1_TE | USART_CR1_UE;   // Habilitar TX y USART1
 8001006:	4b10      	ldr	r3, [pc, #64]	@ (8001048 <USART1_Init+0xa8>)
 8001008:	2209      	movs	r2, #9
 800100a:	601a      	str	r2, [r3, #0]
    USART1->CR1 |= (1 << 2) | (1 << 3); // Habilitar RX y TX
 800100c:	4b0e      	ldr	r3, [pc, #56]	@ (8001048 <USART1_Init+0xa8>)
 800100e:	681a      	ldr	r2, [r3, #0]
 8001010:	4b0d      	ldr	r3, [pc, #52]	@ (8001048 <USART1_Init+0xa8>)
 8001012:	210c      	movs	r1, #12
 8001014:	430a      	orrs	r2, r1
 8001016:	601a      	str	r2, [r3, #0]
    USART1->CR1 |= (1 << 5);          // Habilitar interrupción por RXNE
 8001018:	4b0b      	ldr	r3, [pc, #44]	@ (8001048 <USART1_Init+0xa8>)
 800101a:	681a      	ldr	r2, [r3, #0]
 800101c:	4b0a      	ldr	r3, [pc, #40]	@ (8001048 <USART1_Init+0xa8>)
 800101e:	2120      	movs	r1, #32
 8001020:	430a      	orrs	r2, r1
 8001022:	601a      	str	r2, [r3, #0]
    USART1->CR1 |= (1 << 0);          // Habilitar USART1
 8001024:	4b08      	ldr	r3, [pc, #32]	@ (8001048 <USART1_Init+0xa8>)
 8001026:	681a      	ldr	r2, [r3, #0]
 8001028:	4b07      	ldr	r3, [pc, #28]	@ (8001048 <USART1_Init+0xa8>)
 800102a:	2101      	movs	r1, #1
 800102c:	430a      	orrs	r2, r1
 800102e:	601a      	str	r2, [r3, #0]
    NVIC_EnableIRQ(USART1_IRQn);      // Habilitar la interrupción para USART1
 8001030:	201b      	movs	r0, #27
 8001032:	f7ff f869 	bl	8000108 <__NVIC_EnableIRQ>
}
 8001036:	46c0      	nop			@ (mov r8, r8)
 8001038:	46bd      	mov	sp, r7
 800103a:	bd80      	pop	{r7, pc}
 800103c:	40021000 	.word	0x40021000
 8001040:	fffbffff 	.word	0xfffbffff
 8001044:	ffefffff 	.word	0xffefffff
 8001048:	40013800 	.word	0x40013800

0800104c <USART1_Write>:

void USART1_Write(char* command) {
 800104c:	b580      	push	{r7, lr}
 800104e:	b082      	sub	sp, #8
 8001050:	af00      	add	r7, sp, #0
 8001052:	6078      	str	r0, [r7, #4]
    while (*command != 0) {
 8001054:	e00b      	b.n	800106e <USART1_Write+0x22>
        while (!(USART1->ISR & USART_ISR_TXE));
 8001056:	46c0      	nop			@ (mov r8, r8)
 8001058:	4b09      	ldr	r3, [pc, #36]	@ (8001080 <USART1_Write+0x34>)
 800105a:	69db      	ldr	r3, [r3, #28]
 800105c:	2280      	movs	r2, #128	@ 0x80
 800105e:	4013      	ands	r3, r2
 8001060:	d0fa      	beq.n	8001058 <USART1_Write+0xc>
        USART1->TDR = *command++;
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	1c5a      	adds	r2, r3, #1
 8001066:	607a      	str	r2, [r7, #4]
 8001068:	781a      	ldrb	r2, [r3, #0]
 800106a:	4b05      	ldr	r3, [pc, #20]	@ (8001080 <USART1_Write+0x34>)
 800106c:	629a      	str	r2, [r3, #40]	@ 0x28
    while (*command != 0) {
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	781b      	ldrb	r3, [r3, #0]
 8001072:	2b00      	cmp	r3, #0
 8001074:	d1ef      	bne.n	8001056 <USART1_Write+0xa>
    }
}
 8001076:	46c0      	nop			@ (mov r8, r8)
 8001078:	46c0      	nop			@ (mov r8, r8)
 800107a:	46bd      	mov	sp, r7
 800107c:	b002      	add	sp, #8
 800107e:	bd80      	pop	{r7, pc}
 8001080:	40013800 	.word	0x40013800

08001084 <USART1_IRQHandler>:

void USART1_IRQHandler(void) {
 8001084:	b580      	push	{r7, lr}
 8001086:	af00      	add	r7, sp, #0
	if((USART1->ISR & USART_ISR_RXNE) == USART_ISR_RXNE)
 8001088:	4bc2      	ldr	r3, [pc, #776]	@ (8001394 <USART1_IRQHandler+0x310>)
 800108a:	69db      	ldr	r3, [r3, #28]
 800108c:	2220      	movs	r2, #32
 800108e:	4013      	ands	r3, r2
 8001090:	2b20      	cmp	r3, #32
 8001092:	d107      	bne.n	80010a4 <USART1_IRQHandler+0x20>
	 {
		received_char_USART1 = (uint8_t)(USART1->RDR);
 8001094:	4bbf      	ldr	r3, [pc, #764]	@ (8001394 <USART1_IRQHandler+0x310>)
 8001096:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001098:	b2da      	uxtb	r2, r3
 800109a:	4bbf      	ldr	r3, [pc, #764]	@ (8001398 <USART1_IRQHandler+0x314>)
 800109c:	701a      	strb	r2, [r3, #0]
		flag_received_USART1 = 1;
 800109e:	4bbf      	ldr	r3, [pc, #764]	@ (800139c <USART1_IRQHandler+0x318>)
 80010a0:	2201      	movs	r2, #1
 80010a2:	701a      	strb	r2, [r3, #0]
	 }

	if (flag_received_USART1) {  // Si se ha recibido un carácter desde USART1
 80010a4:	4bbd      	ldr	r3, [pc, #756]	@ (800139c <USART1_IRQHandler+0x318>)
 80010a6:	781b      	ldrb	r3, [r3, #0]
 80010a8:	b2db      	uxtb	r3, r3
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d100      	bne.n	80010b0 <USART1_IRQHandler+0x2c>
 80010ae:	e16d      	b.n	800138c <USART1_IRQHandler+0x308>
	            flag_received_USART1 = 0;  // Limpiar la bandera
 80010b0:	4bba      	ldr	r3, [pc, #744]	@ (800139c <USART1_IRQHandler+0x318>)
 80010b2:	2200      	movs	r2, #0
 80010b4:	701a      	strb	r2, [r3, #0]
	            // Solo enviar a USART2 si es un carácter válido
	            if (received_char_USART1 != 0) {
 80010b6:	4bb8      	ldr	r3, [pc, #736]	@ (8001398 <USART1_IRQHandler+0x314>)
 80010b8:	781b      	ldrb	r3, [r3, #0]
 80010ba:	b2db      	uxtb	r3, r3
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d100      	bne.n	80010c2 <USART1_IRQHandler+0x3e>
 80010c0:	e164      	b.n	800138c <USART1_IRQHandler+0x308>
	            	if (received_char_USART1 == 'F') {
 80010c2:	4bb5      	ldr	r3, [pc, #724]	@ (8001398 <USART1_IRQHandler+0x314>)
 80010c4:	781b      	ldrb	r3, [r3, #0]
 80010c6:	b2db      	uxtb	r3, r3
 80010c8:	2b46      	cmp	r3, #70	@ 0x46
 80010ca:	d10a      	bne.n	80010e2 <USART1_IRQHandler+0x5e>
	            		waiting_for_data0 = 1;
 80010cc:	4bb4      	ldr	r3, [pc, #720]	@ (80013a0 <USART1_IRQHandler+0x31c>)
 80010ce:	2201      	movs	r2, #1
 80010d0:	701a      	strb	r2, [r3, #0]
	            		USART2_VALID(&received_char_USART1);
 80010d2:	4bb1      	ldr	r3, [pc, #708]	@ (8001398 <USART1_IRQHandler+0x314>)
 80010d4:	0018      	movs	r0, r3
 80010d6:	f7ff ff13 	bl	8000f00 <USART2_VALID>
	            		received_char_USART1 = 0;
 80010da:	4baf      	ldr	r3, [pc, #700]	@ (8001398 <USART1_IRQHandler+0x314>)
 80010dc:	2200      	movs	r2, #0
 80010de:	701a      	strb	r2, [r3, #0]
						received_char_USART1 = 0;
						current_menu = 0;
	            	}
	            }
	        }
}
 80010e0:	e154      	b.n	800138c <USART1_IRQHandler+0x308>
	            	else if (waiting_for_data0 && received_char_USART1 == 'E')
 80010e2:	4baf      	ldr	r3, [pc, #700]	@ (80013a0 <USART1_IRQHandler+0x31c>)
 80010e4:	781b      	ldrb	r3, [r3, #0]
 80010e6:	b2db      	uxtb	r3, r3
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d012      	beq.n	8001112 <USART1_IRQHandler+0x8e>
 80010ec:	4baa      	ldr	r3, [pc, #680]	@ (8001398 <USART1_IRQHandler+0x314>)
 80010ee:	781b      	ldrb	r3, [r3, #0]
 80010f0:	b2db      	uxtb	r3, r3
 80010f2:	2b45      	cmp	r3, #69	@ 0x45
 80010f4:	d10d      	bne.n	8001112 <USART1_IRQHandler+0x8e>
	            		waiting_for_data0 = 0;
 80010f6:	4baa      	ldr	r3, [pc, #680]	@ (80013a0 <USART1_IRQHandler+0x31c>)
 80010f8:	2200      	movs	r2, #0
 80010fa:	701a      	strb	r2, [r3, #0]
	            		waiting_for_data1 = 1;
 80010fc:	4ba9      	ldr	r3, [pc, #676]	@ (80013a4 <USART1_IRQHandler+0x320>)
 80010fe:	2201      	movs	r2, #1
 8001100:	701a      	strb	r2, [r3, #0]
	            		USART2_VALID(&received_char_USART1);
 8001102:	4ba5      	ldr	r3, [pc, #660]	@ (8001398 <USART1_IRQHandler+0x314>)
 8001104:	0018      	movs	r0, r3
 8001106:	f7ff fefb 	bl	8000f00 <USART2_VALID>
	            		received_char_USART1 = 0;
 800110a:	4ba3      	ldr	r3, [pc, #652]	@ (8001398 <USART1_IRQHandler+0x314>)
 800110c:	2200      	movs	r2, #0
 800110e:	701a      	strb	r2, [r3, #0]
 8001110:	e13c      	b.n	800138c <USART1_IRQHandler+0x308>
	            	else if (waiting_for_data1 && received_char_USART1 == 'R')
 8001112:	4ba4      	ldr	r3, [pc, #656]	@ (80013a4 <USART1_IRQHandler+0x320>)
 8001114:	781b      	ldrb	r3, [r3, #0]
 8001116:	b2db      	uxtb	r3, r3
 8001118:	2b00      	cmp	r3, #0
 800111a:	d012      	beq.n	8001142 <USART1_IRQHandler+0xbe>
 800111c:	4b9e      	ldr	r3, [pc, #632]	@ (8001398 <USART1_IRQHandler+0x314>)
 800111e:	781b      	ldrb	r3, [r3, #0]
 8001120:	b2db      	uxtb	r3, r3
 8001122:	2b52      	cmp	r3, #82	@ 0x52
 8001124:	d10d      	bne.n	8001142 <USART1_IRQHandler+0xbe>
						waiting_for_data1 = 0;
 8001126:	4b9f      	ldr	r3, [pc, #636]	@ (80013a4 <USART1_IRQHandler+0x320>)
 8001128:	2200      	movs	r2, #0
 800112a:	701a      	strb	r2, [r3, #0]
						USART2_VALID(&received_char_USART1);
 800112c:	4b9a      	ldr	r3, [pc, #616]	@ (8001398 <USART1_IRQHandler+0x314>)
 800112e:	0018      	movs	r0, r3
 8001130:	f7ff fee6 	bl	8000f00 <USART2_VALID>
						received_char_USART1 = 0;
 8001134:	4b98      	ldr	r3, [pc, #608]	@ (8001398 <USART1_IRQHandler+0x314>)
 8001136:	2200      	movs	r2, #0
 8001138:	701a      	strb	r2, [r3, #0]
						waiting_for_data2 = 1;
 800113a:	4b9b      	ldr	r3, [pc, #620]	@ (80013a8 <USART1_IRQHandler+0x324>)
 800113c:	2201      	movs	r2, #1
 800113e:	701a      	strb	r2, [r3, #0]
 8001140:	e124      	b.n	800138c <USART1_IRQHandler+0x308>
	            	else if (waiting_for_data2 && received_char_USART1 == '.')
 8001142:	4b99      	ldr	r3, [pc, #612]	@ (80013a8 <USART1_IRQHandler+0x324>)
 8001144:	781b      	ldrb	r3, [r3, #0]
 8001146:	b2db      	uxtb	r3, r3
 8001148:	2b00      	cmp	r3, #0
 800114a:	d012      	beq.n	8001172 <USART1_IRQHandler+0xee>
 800114c:	4b92      	ldr	r3, [pc, #584]	@ (8001398 <USART1_IRQHandler+0x314>)
 800114e:	781b      	ldrb	r3, [r3, #0]
 8001150:	b2db      	uxtb	r3, r3
 8001152:	2b2e      	cmp	r3, #46	@ 0x2e
 8001154:	d10d      	bne.n	8001172 <USART1_IRQHandler+0xee>
						waiting_for_data2 = 0;
 8001156:	4b94      	ldr	r3, [pc, #592]	@ (80013a8 <USART1_IRQHandler+0x324>)
 8001158:	2200      	movs	r2, #0
 800115a:	701a      	strb	r2, [r3, #0]
						USART2_VALID(&received_char_USART1);
 800115c:	4b8e      	ldr	r3, [pc, #568]	@ (8001398 <USART1_IRQHandler+0x314>)
 800115e:	0018      	movs	r0, r3
 8001160:	f7ff fece 	bl	8000f00 <USART2_VALID>
						received_char_USART1 = 0;
 8001164:	4b8c      	ldr	r3, [pc, #560]	@ (8001398 <USART1_IRQHandler+0x314>)
 8001166:	2200      	movs	r2, #0
 8001168:	701a      	strb	r2, [r3, #0]
						waiting_for_data3 = 1;
 800116a:	4b90      	ldr	r3, [pc, #576]	@ (80013ac <USART1_IRQHandler+0x328>)
 800116c:	2201      	movs	r2, #1
 800116e:	701a      	strb	r2, [r3, #0]
 8001170:	e10c      	b.n	800138c <USART1_IRQHandler+0x308>
	            	else if (waiting_for_data3 && received_char_USART1 == '0')
 8001172:	4b8e      	ldr	r3, [pc, #568]	@ (80013ac <USART1_IRQHandler+0x328>)
 8001174:	781b      	ldrb	r3, [r3, #0]
 8001176:	b2db      	uxtb	r3, r3
 8001178:	2b00      	cmp	r3, #0
 800117a:	d012      	beq.n	80011a2 <USART1_IRQHandler+0x11e>
 800117c:	4b86      	ldr	r3, [pc, #536]	@ (8001398 <USART1_IRQHandler+0x314>)
 800117e:	781b      	ldrb	r3, [r3, #0]
 8001180:	b2db      	uxtb	r3, r3
 8001182:	2b30      	cmp	r3, #48	@ 0x30
 8001184:	d10d      	bne.n	80011a2 <USART1_IRQHandler+0x11e>
						waiting_for_data3 = 0;
 8001186:	4b89      	ldr	r3, [pc, #548]	@ (80013ac <USART1_IRQHandler+0x328>)
 8001188:	2200      	movs	r2, #0
 800118a:	701a      	strb	r2, [r3, #0]
						USART2_VALID(&received_char_USART1);
 800118c:	4b82      	ldr	r3, [pc, #520]	@ (8001398 <USART1_IRQHandler+0x314>)
 800118e:	0018      	movs	r0, r3
 8001190:	f7ff feb6 	bl	8000f00 <USART2_VALID>
						received_char_USART1 = 0;
 8001194:	4b80      	ldr	r3, [pc, #512]	@ (8001398 <USART1_IRQHandler+0x314>)
 8001196:	2200      	movs	r2, #0
 8001198:	701a      	strb	r2, [r3, #0]
						waiting_for_data4 = 1;
 800119a:	4b85      	ldr	r3, [pc, #532]	@ (80013b0 <USART1_IRQHandler+0x32c>)
 800119c:	2201      	movs	r2, #1
 800119e:	701a      	strb	r2, [r3, #0]
 80011a0:	e0f4      	b.n	800138c <USART1_IRQHandler+0x308>
	            	else if (waiting_for_data4 && received_char_USART1 == '1')
 80011a2:	4b83      	ldr	r3, [pc, #524]	@ (80013b0 <USART1_IRQHandler+0x32c>)
 80011a4:	781b      	ldrb	r3, [r3, #0]
 80011a6:	b2db      	uxtb	r3, r3
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d012      	beq.n	80011d2 <USART1_IRQHandler+0x14e>
 80011ac:	4b7a      	ldr	r3, [pc, #488]	@ (8001398 <USART1_IRQHandler+0x314>)
 80011ae:	781b      	ldrb	r3, [r3, #0]
 80011b0:	b2db      	uxtb	r3, r3
 80011b2:	2b31      	cmp	r3, #49	@ 0x31
 80011b4:	d10d      	bne.n	80011d2 <USART1_IRQHandler+0x14e>
						waiting_for_data4 = 0;
 80011b6:	4b7e      	ldr	r3, [pc, #504]	@ (80013b0 <USART1_IRQHandler+0x32c>)
 80011b8:	2200      	movs	r2, #0
 80011ba:	701a      	strb	r2, [r3, #0]
						USART2_VALID(&received_char_USART1);
 80011bc:	4b76      	ldr	r3, [pc, #472]	@ (8001398 <USART1_IRQHandler+0x314>)
 80011be:	0018      	movs	r0, r3
 80011c0:	f7ff fe9e 	bl	8000f00 <USART2_VALID>
						received_char_USART1 = 0;
 80011c4:	4b74      	ldr	r3, [pc, #464]	@ (8001398 <USART1_IRQHandler+0x314>)
 80011c6:	2200      	movs	r2, #0
 80011c8:	701a      	strb	r2, [r3, #0]
						waiting_for_data5 = 1;
 80011ca:	4b7a      	ldr	r3, [pc, #488]	@ (80013b4 <USART1_IRQHandler+0x330>)
 80011cc:	2201      	movs	r2, #1
 80011ce:	701a      	strb	r2, [r3, #0]
 80011d0:	e0dc      	b.n	800138c <USART1_IRQHandler+0x308>
	            	else if (waiting_for_data5 && received_char_USART1 == '0')
 80011d2:	4b78      	ldr	r3, [pc, #480]	@ (80013b4 <USART1_IRQHandler+0x330>)
 80011d4:	781b      	ldrb	r3, [r3, #0]
 80011d6:	b2db      	uxtb	r3, r3
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d012      	beq.n	8001202 <USART1_IRQHandler+0x17e>
 80011dc:	4b6e      	ldr	r3, [pc, #440]	@ (8001398 <USART1_IRQHandler+0x314>)
 80011de:	781b      	ldrb	r3, [r3, #0]
 80011e0:	b2db      	uxtb	r3, r3
 80011e2:	2b30      	cmp	r3, #48	@ 0x30
 80011e4:	d10d      	bne.n	8001202 <USART1_IRQHandler+0x17e>
						waiting_for_data5 = 0;
 80011e6:	4b73      	ldr	r3, [pc, #460]	@ (80013b4 <USART1_IRQHandler+0x330>)
 80011e8:	2200      	movs	r2, #0
 80011ea:	701a      	strb	r2, [r3, #0]
						USART2_VALID(&received_char_USART1);
 80011ec:	4b6a      	ldr	r3, [pc, #424]	@ (8001398 <USART1_IRQHandler+0x314>)
 80011ee:	0018      	movs	r0, r3
 80011f0:	f7ff fe86 	bl	8000f00 <USART2_VALID>
						received_char_USART1 = 0;
 80011f4:	4b68      	ldr	r3, [pc, #416]	@ (8001398 <USART1_IRQHandler+0x314>)
 80011f6:	2200      	movs	r2, #0
 80011f8:	701a      	strb	r2, [r3, #0]
						waiting_for_data6 = 1;
 80011fa:	4b6f      	ldr	r3, [pc, #444]	@ (80013b8 <USART1_IRQHandler+0x334>)
 80011fc:	2201      	movs	r2, #1
 80011fe:	701a      	strb	r2, [r3, #0]
 8001200:	e0c4      	b.n	800138c <USART1_IRQHandler+0x308>
	            	else if (waiting_for_data6 && received_char_USART1 == '2')
 8001202:	4b6d      	ldr	r3, [pc, #436]	@ (80013b8 <USART1_IRQHandler+0x334>)
 8001204:	781b      	ldrb	r3, [r3, #0]
 8001206:	b2db      	uxtb	r3, r3
 8001208:	2b00      	cmp	r3, #0
 800120a:	d015      	beq.n	8001238 <USART1_IRQHandler+0x1b4>
 800120c:	4b62      	ldr	r3, [pc, #392]	@ (8001398 <USART1_IRQHandler+0x314>)
 800120e:	781b      	ldrb	r3, [r3, #0]
 8001210:	b2db      	uxtb	r3, r3
 8001212:	2b32      	cmp	r3, #50	@ 0x32
 8001214:	d110      	bne.n	8001238 <USART1_IRQHandler+0x1b4>
						waiting_for_data6 = 0;
 8001216:	4b68      	ldr	r3, [pc, #416]	@ (80013b8 <USART1_IRQHandler+0x334>)
 8001218:	2200      	movs	r2, #0
 800121a:	701a      	strb	r2, [r3, #0]
						USART2_VALID(&received_char_USART1);
 800121c:	4b5e      	ldr	r3, [pc, #376]	@ (8001398 <USART1_IRQHandler+0x314>)
 800121e:	0018      	movs	r0, r3
 8001220:	f7ff fe6e 	bl	8000f00 <USART2_VALID>
						received_char_USART1 = 0;
 8001224:	4b5c      	ldr	r3, [pc, #368]	@ (8001398 <USART1_IRQHandler+0x314>)
 8001226:	2200      	movs	r2, #0
 8001228:	701a      	strb	r2, [r3, #0]
						waiting_for_data7 = 1;
 800122a:	4b64      	ldr	r3, [pc, #400]	@ (80013bc <USART1_IRQHandler+0x338>)
 800122c:	2201      	movs	r2, #1
 800122e:	701a      	strb	r2, [r3, #0]
						current_menu = 2;
 8001230:	4b63      	ldr	r3, [pc, #396]	@ (80013c0 <USART1_IRQHandler+0x33c>)
 8001232:	2202      	movs	r2, #2
 8001234:	701a      	strb	r2, [r3, #0]
 8001236:	e0a9      	b.n	800138c <USART1_IRQHandler+0x308>
	            	else if (waiting_for_data7 && received_char_USART1 == 'Q')
 8001238:	4b60      	ldr	r3, [pc, #384]	@ (80013bc <USART1_IRQHandler+0x338>)
 800123a:	781b      	ldrb	r3, [r3, #0]
 800123c:	b2db      	uxtb	r3, r3
 800123e:	2b00      	cmp	r3, #0
 8001240:	d012      	beq.n	8001268 <USART1_IRQHandler+0x1e4>
 8001242:	4b55      	ldr	r3, [pc, #340]	@ (8001398 <USART1_IRQHandler+0x314>)
 8001244:	781b      	ldrb	r3, [r3, #0]
 8001246:	b2db      	uxtb	r3, r3
 8001248:	2b51      	cmp	r3, #81	@ 0x51
 800124a:	d10d      	bne.n	8001268 <USART1_IRQHandler+0x1e4>
						waiting_for_data7 = 0;
 800124c:	4b5b      	ldr	r3, [pc, #364]	@ (80013bc <USART1_IRQHandler+0x338>)
 800124e:	2200      	movs	r2, #0
 8001250:	701a      	strb	r2, [r3, #0]
						USART2_VALID(&received_char_USART1);
 8001252:	4b51      	ldr	r3, [pc, #324]	@ (8001398 <USART1_IRQHandler+0x314>)
 8001254:	0018      	movs	r0, r3
 8001256:	f7ff fe53 	bl	8000f00 <USART2_VALID>
						received_char_USART1 = 0;
 800125a:	4b4f      	ldr	r3, [pc, #316]	@ (8001398 <USART1_IRQHandler+0x314>)
 800125c:	2200      	movs	r2, #0
 800125e:	701a      	strb	r2, [r3, #0]
						waiting_for_data8 = 1;
 8001260:	4b58      	ldr	r3, [pc, #352]	@ (80013c4 <USART1_IRQHandler+0x340>)
 8001262:	2201      	movs	r2, #1
 8001264:	701a      	strb	r2, [r3, #0]
 8001266:	e091      	b.n	800138c <USART1_IRQHandler+0x308>
	            	else if (waiting_for_data8 && (received_char_USART1 == '1' |received_char_USART1 == '2' | received_char_USART1 == '3')) {  // Si recibimos el valor '1'
 8001268:	4b56      	ldr	r3, [pc, #344]	@ (80013c4 <USART1_IRQHandler+0x340>)
 800126a:	781b      	ldrb	r3, [r3, #0]
 800126c:	b2db      	uxtb	r3, r3
 800126e:	2b00      	cmp	r3, #0
 8001270:	d044      	beq.n	80012fc <USART1_IRQHandler+0x278>
 8001272:	4b49      	ldr	r3, [pc, #292]	@ (8001398 <USART1_IRQHandler+0x314>)
 8001274:	781b      	ldrb	r3, [r3, #0]
 8001276:	b2db      	uxtb	r3, r3
 8001278:	3b31      	subs	r3, #49	@ 0x31
 800127a:	425a      	negs	r2, r3
 800127c:	4153      	adcs	r3, r2
 800127e:	b2da      	uxtb	r2, r3
 8001280:	4b45      	ldr	r3, [pc, #276]	@ (8001398 <USART1_IRQHandler+0x314>)
 8001282:	781b      	ldrb	r3, [r3, #0]
 8001284:	b2db      	uxtb	r3, r3
 8001286:	3b32      	subs	r3, #50	@ 0x32
 8001288:	4259      	negs	r1, r3
 800128a:	414b      	adcs	r3, r1
 800128c:	b2db      	uxtb	r3, r3
 800128e:	4313      	orrs	r3, r2
 8001290:	b2db      	uxtb	r3, r3
 8001292:	001a      	movs	r2, r3
 8001294:	4b40      	ldr	r3, [pc, #256]	@ (8001398 <USART1_IRQHandler+0x314>)
 8001296:	781b      	ldrb	r3, [r3, #0]
 8001298:	b2db      	uxtb	r3, r3
 800129a:	3b33      	subs	r3, #51	@ 0x33
 800129c:	4259      	negs	r1, r3
 800129e:	414b      	adcs	r3, r1
 80012a0:	b2db      	uxtb	r3, r3
 80012a2:	4313      	orrs	r3, r2
 80012a4:	d02a      	beq.n	80012fc <USART1_IRQHandler+0x278>
	            		waiting_for_data8 = 0;  // Terminamos de esperar
 80012a6:	4b47      	ldr	r3, [pc, #284]	@ (80013c4 <USART1_IRQHandler+0x340>)
 80012a8:	2200      	movs	r2, #0
 80012aa:	701a      	strb	r2, [r3, #0]
	            		if(received_char_USART1 == '1'){
 80012ac:	4b3a      	ldr	r3, [pc, #232]	@ (8001398 <USART1_IRQHandler+0x314>)
 80012ae:	781b      	ldrb	r3, [r3, #0]
 80012b0:	b2db      	uxtb	r3, r3
 80012b2:	2b31      	cmp	r3, #49	@ 0x31
 80012b4:	d106      	bne.n	80012c4 <USART1_IRQHandler+0x240>
							USART2_VALID(&received_char_USART1);  // Procesamos el valor '1'
 80012b6:	4b38      	ldr	r3, [pc, #224]	@ (8001398 <USART1_IRQHandler+0x314>)
 80012b8:	0018      	movs	r0, r3
 80012ba:	f7ff fe21 	bl	8000f00 <USART2_VALID>
							waiting_for_data9 = 1;  // Esperamos el siguiente carácter '0' para completar el 10
 80012be:	4b42      	ldr	r3, [pc, #264]	@ (80013c8 <USART1_IRQHandler+0x344>)
 80012c0:	2201      	movs	r2, #1
 80012c2:	701a      	strb	r2, [r3, #0]
	            		if(received_char_USART1 == '2'){
 80012c4:	4b34      	ldr	r3, [pc, #208]	@ (8001398 <USART1_IRQHandler+0x314>)
 80012c6:	781b      	ldrb	r3, [r3, #0]
 80012c8:	b2db      	uxtb	r3, r3
 80012ca:	2b32      	cmp	r3, #50	@ 0x32
 80012cc:	d106      	bne.n	80012dc <USART1_IRQHandler+0x258>
							USART2_VALID(&received_char_USART1);  // Procesamos el valor '1'
 80012ce:	4b32      	ldr	r3, [pc, #200]	@ (8001398 <USART1_IRQHandler+0x314>)
 80012d0:	0018      	movs	r0, r3
 80012d2:	f7ff fe15 	bl	8000f00 <USART2_VALID>
							waiting_for_data10 = 1;  // Esperamos el siguiente carácter '0' para completar el 10
 80012d6:	4b3d      	ldr	r3, [pc, #244]	@ (80013cc <USART1_IRQHandler+0x348>)
 80012d8:	2201      	movs	r2, #1
 80012da:	701a      	strb	r2, [r3, #0]
	            		if(received_char_USART1 == '3'){
 80012dc:	4b2e      	ldr	r3, [pc, #184]	@ (8001398 <USART1_IRQHandler+0x314>)
 80012de:	781b      	ldrb	r3, [r3, #0]
 80012e0:	b2db      	uxtb	r3, r3
 80012e2:	2b33      	cmp	r3, #51	@ 0x33
 80012e4:	d106      	bne.n	80012f4 <USART1_IRQHandler+0x270>
							USART2_VALID(&received_char_USART1);  // Procesamos el valor '1'
 80012e6:	4b2c      	ldr	r3, [pc, #176]	@ (8001398 <USART1_IRQHandler+0x314>)
 80012e8:	0018      	movs	r0, r3
 80012ea:	f7ff fe09 	bl	8000f00 <USART2_VALID>
							waiting_for_data11 = 1;  // Esperamos el siguiente carácter '0' para completar el 10
 80012ee:	4b38      	ldr	r3, [pc, #224]	@ (80013d0 <USART1_IRQHandler+0x34c>)
 80012f0:	2201      	movs	r2, #1
 80012f2:	701a      	strb	r2, [r3, #0]
	            		received_char_USART1 = 0;
 80012f4:	4b28      	ldr	r3, [pc, #160]	@ (8001398 <USART1_IRQHandler+0x314>)
 80012f6:	2200      	movs	r2, #0
 80012f8:	701a      	strb	r2, [r3, #0]
 80012fa:	e047      	b.n	800138c <USART1_IRQHandler+0x308>
	            	else if (waiting_for_data9 && received_char_USART1 == '0') {  // Si recibimos el valor '0' después de '1'
 80012fc:	4b32      	ldr	r3, [pc, #200]	@ (80013c8 <USART1_IRQHandler+0x344>)
 80012fe:	781b      	ldrb	r3, [r3, #0]
 8001300:	b2db      	uxtb	r3, r3
 8001302:	2b00      	cmp	r3, #0
 8001304:	d012      	beq.n	800132c <USART1_IRQHandler+0x2a8>
 8001306:	4b24      	ldr	r3, [pc, #144]	@ (8001398 <USART1_IRQHandler+0x314>)
 8001308:	781b      	ldrb	r3, [r3, #0]
 800130a:	b2db      	uxtb	r3, r3
 800130c:	2b30      	cmp	r3, #48	@ 0x30
 800130e:	d10d      	bne.n	800132c <USART1_IRQHandler+0x2a8>
	            	    waiting_for_data9 = 0;
 8001310:	4b2d      	ldr	r3, [pc, #180]	@ (80013c8 <USART1_IRQHandler+0x344>)
 8001312:	2200      	movs	r2, #0
 8001314:	701a      	strb	r2, [r3, #0]
	            	    USART2_VALID(&received_char_USART1);  // Procesamos el valor '0' para formar 10
 8001316:	4b20      	ldr	r3, [pc, #128]	@ (8001398 <USART1_IRQHandler+0x314>)
 8001318:	0018      	movs	r0, r3
 800131a:	f7ff fdf1 	bl	8000f00 <USART2_VALID>
	            	    received_char_USART1 = 0;
 800131e:	4b1e      	ldr	r3, [pc, #120]	@ (8001398 <USART1_IRQHandler+0x314>)
 8001320:	2200      	movs	r2, #0
 8001322:	701a      	strb	r2, [r3, #0]
	            	    current_menu = 0;
 8001324:	4b26      	ldr	r3, [pc, #152]	@ (80013c0 <USART1_IRQHandler+0x33c>)
 8001326:	2200      	movs	r2, #0
 8001328:	701a      	strb	r2, [r3, #0]
 800132a:	e02f      	b.n	800138c <USART1_IRQHandler+0x308>
	            	else if (waiting_for_data10 && received_char_USART1 == '0') {  // Si recibimos el valor '2'
 800132c:	4b27      	ldr	r3, [pc, #156]	@ (80013cc <USART1_IRQHandler+0x348>)
 800132e:	781b      	ldrb	r3, [r3, #0]
 8001330:	b2db      	uxtb	r3, r3
 8001332:	2b00      	cmp	r3, #0
 8001334:	d012      	beq.n	800135c <USART1_IRQHandler+0x2d8>
 8001336:	4b18      	ldr	r3, [pc, #96]	@ (8001398 <USART1_IRQHandler+0x314>)
 8001338:	781b      	ldrb	r3, [r3, #0]
 800133a:	b2db      	uxtb	r3, r3
 800133c:	2b30      	cmp	r3, #48	@ 0x30
 800133e:	d10d      	bne.n	800135c <USART1_IRQHandler+0x2d8>
	            	    waiting_for_data10 = 0;
 8001340:	4b22      	ldr	r3, [pc, #136]	@ (80013cc <USART1_IRQHandler+0x348>)
 8001342:	2200      	movs	r2, #0
 8001344:	701a      	strb	r2, [r3, #0]
	            	    USART2_VALID(&received_char_USART1);  // Procesamos el valor '2'
 8001346:	4b14      	ldr	r3, [pc, #80]	@ (8001398 <USART1_IRQHandler+0x314>)
 8001348:	0018      	movs	r0, r3
 800134a:	f7ff fdd9 	bl	8000f00 <USART2_VALID>
	            	    received_char_USART1 = 0;
 800134e:	4b12      	ldr	r3, [pc, #72]	@ (8001398 <USART1_IRQHandler+0x314>)
 8001350:	2200      	movs	r2, #0
 8001352:	701a      	strb	r2, [r3, #0]
						current_menu = 0;
 8001354:	4b1a      	ldr	r3, [pc, #104]	@ (80013c0 <USART1_IRQHandler+0x33c>)
 8001356:	2200      	movs	r2, #0
 8001358:	701a      	strb	r2, [r3, #0]
 800135a:	e017      	b.n	800138c <USART1_IRQHandler+0x308>
	            	else if (waiting_for_data11 && received_char_USART1 == '0') {  // Si recibimos el valor '0' después de '2'
 800135c:	4b1c      	ldr	r3, [pc, #112]	@ (80013d0 <USART1_IRQHandler+0x34c>)
 800135e:	781b      	ldrb	r3, [r3, #0]
 8001360:	b2db      	uxtb	r3, r3
 8001362:	2b00      	cmp	r3, #0
 8001364:	d012      	beq.n	800138c <USART1_IRQHandler+0x308>
 8001366:	4b0c      	ldr	r3, [pc, #48]	@ (8001398 <USART1_IRQHandler+0x314>)
 8001368:	781b      	ldrb	r3, [r3, #0]
 800136a:	b2db      	uxtb	r3, r3
 800136c:	2b30      	cmp	r3, #48	@ 0x30
 800136e:	d10d      	bne.n	800138c <USART1_IRQHandler+0x308>
	            		waiting_for_data11 = 0;
 8001370:	4b17      	ldr	r3, [pc, #92]	@ (80013d0 <USART1_IRQHandler+0x34c>)
 8001372:	2200      	movs	r2, #0
 8001374:	701a      	strb	r2, [r3, #0]
						USART2_VALID(&received_char_USART1);  // Procesamos el valor '2'
 8001376:	4b08      	ldr	r3, [pc, #32]	@ (8001398 <USART1_IRQHandler+0x314>)
 8001378:	0018      	movs	r0, r3
 800137a:	f7ff fdc1 	bl	8000f00 <USART2_VALID>
						received_char_USART1 = 0;
 800137e:	4b06      	ldr	r3, [pc, #24]	@ (8001398 <USART1_IRQHandler+0x314>)
 8001380:	2200      	movs	r2, #0
 8001382:	701a      	strb	r2, [r3, #0]
						current_menu = 0;
 8001384:	4b0e      	ldr	r3, [pc, #56]	@ (80013c0 <USART1_IRQHandler+0x33c>)
 8001386:	2200      	movs	r2, #0
 8001388:	701a      	strb	r2, [r3, #0]
}
 800138a:	e7ff      	b.n	800138c <USART1_IRQHandler+0x308>
 800138c:	46c0      	nop			@ (mov r8, r8)
 800138e:	46bd      	mov	sp, r7
 8001390:	bd80      	pop	{r7, pc}
 8001392:	46c0      	nop			@ (mov r8, r8)
 8001394:	40013800 	.word	0x40013800
 8001398:	2000001c 	.word	0x2000001c
 800139c:	2000001e 	.word	0x2000001e
 80013a0:	20000020 	.word	0x20000020
 80013a4:	20000021 	.word	0x20000021
 80013a8:	20000022 	.word	0x20000022
 80013ac:	20000023 	.word	0x20000023
 80013b0:	20000024 	.word	0x20000024
 80013b4:	20000025 	.word	0x20000025
 80013b8:	20000026 	.word	0x20000026
 80013bc:	20000027 	.word	0x20000027
 80013c0:	20000039 	.word	0x20000039
 80013c4:	20000028 	.word	0x20000028
 80013c8:	20000029 	.word	0x20000029
 80013cc:	2000002a 	.word	0x2000002a
 80013d0:	2000002b 	.word	0x2000002b

080013d4 <configureGSMForSMS>:

void configureGSMForSMS(void) { // Solo ejecutar la configuración una vez
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b082      	sub	sp, #8
 80013d8:	af00      	add	r7, sp, #0
    if (flag_configured == 0) {
 80013da:	4b0d      	ldr	r3, [pc, #52]	@ (8001410 <configureGSMForSMS+0x3c>)
 80013dc:	781b      	ldrb	r3, [r3, #0]
 80013de:	b2db      	uxtb	r3, r3
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d110      	bne.n	8001406 <configureGSMForSMS+0x32>
        USART1_Write("AT+CMGF=1");
 80013e4:	4b0b      	ldr	r3, [pc, #44]	@ (8001414 <configureGSMForSMS+0x40>)
 80013e6:	0018      	movs	r0, r3
 80013e8:	f7ff fe30 	bl	800104c <USART1_Write>
        for (volatile int i = 0; i < 10000; i++);
 80013ec:	2300      	movs	r3, #0
 80013ee:	607b      	str	r3, [r7, #4]
 80013f0:	e002      	b.n	80013f8 <configureGSMForSMS+0x24>
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	3301      	adds	r3, #1
 80013f6:	607b      	str	r3, [r7, #4]
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	4a07      	ldr	r2, [pc, #28]	@ (8001418 <configureGSMForSMS+0x44>)
 80013fc:	4293      	cmp	r3, r2
 80013fe:	ddf8      	ble.n	80013f2 <configureGSMForSMS+0x1e>
        flag_configured = 1;
 8001400:	4b03      	ldr	r3, [pc, #12]	@ (8001410 <configureGSMForSMS+0x3c>)
 8001402:	2201      	movs	r2, #1
 8001404:	701a      	strb	r2, [r3, #0]
    }
}
 8001406:	46c0      	nop			@ (mov r8, r8)
 8001408:	46bd      	mov	sp, r7
 800140a:	b002      	add	sp, #8
 800140c:	bd80      	pop	{r7, pc}
 800140e:	46c0      	nop			@ (mov r8, r8)
 8001410:	2000002c 	.word	0x2000002c
 8001414:	0800150c 	.word	0x0800150c
 8001418:	0000270f 	.word	0x0000270f

0800141c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800141c:	480d      	ldr	r0, [pc, #52]	@ (8001454 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800141e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001420:	e000      	b.n	8001424 <Reset_Handler+0x8>
 8001422:	bf00      	nop

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001424:	480c      	ldr	r0, [pc, #48]	@ (8001458 <LoopForever+0x6>)
  ldr r1, =_edata
 8001426:	490d      	ldr	r1, [pc, #52]	@ (800145c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001428:	4a0d      	ldr	r2, [pc, #52]	@ (8001460 <LoopForever+0xe>)
  movs r3, #0
 800142a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800142c:	e002      	b.n	8001434 <LoopCopyDataInit>

0800142e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800142e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001430:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001432:	3304      	adds	r3, #4

08001434 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001434:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001436:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001438:	d3f9      	bcc.n	800142e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800143a:	4a0a      	ldr	r2, [pc, #40]	@ (8001464 <LoopForever+0x12>)
  ldr r4, =_ebss
 800143c:	4c0a      	ldr	r4, [pc, #40]	@ (8001468 <LoopForever+0x16>)
  movs r3, #0
 800143e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001440:	e001      	b.n	8001446 <LoopFillZerobss>

08001442 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001442:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001444:	3204      	adds	r2, #4

08001446 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001446:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001448:	d3fb      	bcc.n	8001442 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800144a:	f000 f811 	bl	8001470 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800144e:	f7fe fee3 	bl	8000218 <main>

08001452 <LoopForever>:

LoopForever:
  b LoopForever
 8001452:	e7fe      	b.n	8001452 <LoopForever>
  ldr   r0, =_estack
 8001454:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8001458:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800145c:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8001460:	08001720 	.word	0x08001720
  ldr r2, =_sbss
 8001464:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8001468:	2000003c 	.word	0x2000003c

0800146c <ADC_COMP_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800146c:	e7fe      	b.n	800146c <ADC_COMP_IRQHandler>
	...

08001470 <__libc_init_array>:
 8001470:	b570      	push	{r4, r5, r6, lr}
 8001472:	2600      	movs	r6, #0
 8001474:	4c0c      	ldr	r4, [pc, #48]	@ (80014a8 <__libc_init_array+0x38>)
 8001476:	4d0d      	ldr	r5, [pc, #52]	@ (80014ac <__libc_init_array+0x3c>)
 8001478:	1b64      	subs	r4, r4, r5
 800147a:	10a4      	asrs	r4, r4, #2
 800147c:	42a6      	cmp	r6, r4
 800147e:	d109      	bne.n	8001494 <__libc_init_array+0x24>
 8001480:	2600      	movs	r6, #0
 8001482:	f000 f819 	bl	80014b8 <_init>
 8001486:	4c0a      	ldr	r4, [pc, #40]	@ (80014b0 <__libc_init_array+0x40>)
 8001488:	4d0a      	ldr	r5, [pc, #40]	@ (80014b4 <__libc_init_array+0x44>)
 800148a:	1b64      	subs	r4, r4, r5
 800148c:	10a4      	asrs	r4, r4, #2
 800148e:	42a6      	cmp	r6, r4
 8001490:	d105      	bne.n	800149e <__libc_init_array+0x2e>
 8001492:	bd70      	pop	{r4, r5, r6, pc}
 8001494:	00b3      	lsls	r3, r6, #2
 8001496:	58eb      	ldr	r3, [r5, r3]
 8001498:	4798      	blx	r3
 800149a:	3601      	adds	r6, #1
 800149c:	e7ee      	b.n	800147c <__libc_init_array+0xc>
 800149e:	00b3      	lsls	r3, r6, #2
 80014a0:	58eb      	ldr	r3, [r5, r3]
 80014a2:	4798      	blx	r3
 80014a4:	3601      	adds	r6, #1
 80014a6:	e7f2      	b.n	800148e <__libc_init_array+0x1e>
 80014a8:	08001718 	.word	0x08001718
 80014ac:	08001718 	.word	0x08001718
 80014b0:	0800171c 	.word	0x0800171c
 80014b4:	08001718 	.word	0x08001718

080014b8 <_init>:
 80014b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80014ba:	46c0      	nop			@ (mov r8, r8)
 80014bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80014be:	bc08      	pop	{r3}
 80014c0:	469e      	mov	lr, r3
 80014c2:	4770      	bx	lr

080014c4 <_fini>:
 80014c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80014c6:	46c0      	nop			@ (mov r8, r8)
 80014c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80014ca:	bc08      	pop	{r3}
 80014cc:	469e      	mov	lr, r3
 80014ce:	4770      	bx	lr
