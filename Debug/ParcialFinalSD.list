
ParcialFinalSD.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000c84  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001b4  08000d44  08000d44  00001d44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000ef8  08000ef8  00001f00  2**0
                  CONTENTS
  4 .ARM          00000000  08000ef8  08000ef8  00001f00  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000ef8  08000f00  00001f00  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000ef8  08000ef8  00001ef8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000efc  08000efc  00001efc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000000  20000000  20000000  00001f00  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000024  20000000  08000f00  00002000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000024  08000f00  00002024  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00001f00  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000af2  00000000  00000000  00001f28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000308  00000000  00000000  00002a1a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000000c8  00000000  00000000  00002d28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000094  00000000  00000000  00002df0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000b437  00000000  00000000  00002e84  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00000d53  00000000  00000000  0000e2bb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0003d08b  00000000  00000000  0000f00e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0004c099  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000023c  00000000  00000000  0004c0dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000065  00000000  00000000  0004c318  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000000 	.word	0x20000000
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08000d2c 	.word	0x08000d2c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000004 	.word	0x20000004
 8000104:	08000d2c 	.word	0x08000d2c

08000108 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000108:	b580      	push	{r7, lr}
 800010a:	b082      	sub	sp, #8
 800010c:	af00      	add	r7, sp, #0
 800010e:	0002      	movs	r2, r0
 8000110:	1dfb      	adds	r3, r7, #7
 8000112:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000114:	1dfb      	adds	r3, r7, #7
 8000116:	781b      	ldrb	r3, [r3, #0]
 8000118:	2b7f      	cmp	r3, #127	@ 0x7f
 800011a:	d809      	bhi.n	8000130 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800011c:	1dfb      	adds	r3, r7, #7
 800011e:	781b      	ldrb	r3, [r3, #0]
 8000120:	001a      	movs	r2, r3
 8000122:	231f      	movs	r3, #31
 8000124:	401a      	ands	r2, r3
 8000126:	4b04      	ldr	r3, [pc, #16]	@ (8000138 <__NVIC_EnableIRQ+0x30>)
 8000128:	2101      	movs	r1, #1
 800012a:	4091      	lsls	r1, r2
 800012c:	000a      	movs	r2, r1
 800012e:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8000130:	46c0      	nop			@ (mov r8, r8)
 8000132:	46bd      	mov	sp, r7
 8000134:	b002      	add	sp, #8
 8000136:	bd80      	pop	{r7, pc}
 8000138:	e000e100 	.word	0xe000e100

0800013c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800013c:	b590      	push	{r4, r7, lr}
 800013e:	b083      	sub	sp, #12
 8000140:	af00      	add	r7, sp, #0
 8000142:	0002      	movs	r2, r0
 8000144:	6039      	str	r1, [r7, #0]
 8000146:	1dfb      	adds	r3, r7, #7
 8000148:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800014a:	1dfb      	adds	r3, r7, #7
 800014c:	781b      	ldrb	r3, [r3, #0]
 800014e:	2b7f      	cmp	r3, #127	@ 0x7f
 8000150:	d828      	bhi.n	80001a4 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000152:	4a2f      	ldr	r2, [pc, #188]	@ (8000210 <__NVIC_SetPriority+0xd4>)
 8000154:	1dfb      	adds	r3, r7, #7
 8000156:	781b      	ldrb	r3, [r3, #0]
 8000158:	b25b      	sxtb	r3, r3
 800015a:	089b      	lsrs	r3, r3, #2
 800015c:	33c0      	adds	r3, #192	@ 0xc0
 800015e:	009b      	lsls	r3, r3, #2
 8000160:	589b      	ldr	r3, [r3, r2]
 8000162:	1dfa      	adds	r2, r7, #7
 8000164:	7812      	ldrb	r2, [r2, #0]
 8000166:	0011      	movs	r1, r2
 8000168:	2203      	movs	r2, #3
 800016a:	400a      	ands	r2, r1
 800016c:	00d2      	lsls	r2, r2, #3
 800016e:	21ff      	movs	r1, #255	@ 0xff
 8000170:	4091      	lsls	r1, r2
 8000172:	000a      	movs	r2, r1
 8000174:	43d2      	mvns	r2, r2
 8000176:	401a      	ands	r2, r3
 8000178:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800017a:	683b      	ldr	r3, [r7, #0]
 800017c:	019b      	lsls	r3, r3, #6
 800017e:	22ff      	movs	r2, #255	@ 0xff
 8000180:	401a      	ands	r2, r3
 8000182:	1dfb      	adds	r3, r7, #7
 8000184:	781b      	ldrb	r3, [r3, #0]
 8000186:	0018      	movs	r0, r3
 8000188:	2303      	movs	r3, #3
 800018a:	4003      	ands	r3, r0
 800018c:	00db      	lsls	r3, r3, #3
 800018e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000190:	481f      	ldr	r0, [pc, #124]	@ (8000210 <__NVIC_SetPriority+0xd4>)
 8000192:	1dfb      	adds	r3, r7, #7
 8000194:	781b      	ldrb	r3, [r3, #0]
 8000196:	b25b      	sxtb	r3, r3
 8000198:	089b      	lsrs	r3, r3, #2
 800019a:	430a      	orrs	r2, r1
 800019c:	33c0      	adds	r3, #192	@ 0xc0
 800019e:	009b      	lsls	r3, r3, #2
 80001a0:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80001a2:	e031      	b.n	8000208 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80001a4:	4a1b      	ldr	r2, [pc, #108]	@ (8000214 <__NVIC_SetPriority+0xd8>)
 80001a6:	1dfb      	adds	r3, r7, #7
 80001a8:	781b      	ldrb	r3, [r3, #0]
 80001aa:	0019      	movs	r1, r3
 80001ac:	230f      	movs	r3, #15
 80001ae:	400b      	ands	r3, r1
 80001b0:	3b08      	subs	r3, #8
 80001b2:	089b      	lsrs	r3, r3, #2
 80001b4:	3306      	adds	r3, #6
 80001b6:	009b      	lsls	r3, r3, #2
 80001b8:	18d3      	adds	r3, r2, r3
 80001ba:	3304      	adds	r3, #4
 80001bc:	681b      	ldr	r3, [r3, #0]
 80001be:	1dfa      	adds	r2, r7, #7
 80001c0:	7812      	ldrb	r2, [r2, #0]
 80001c2:	0011      	movs	r1, r2
 80001c4:	2203      	movs	r2, #3
 80001c6:	400a      	ands	r2, r1
 80001c8:	00d2      	lsls	r2, r2, #3
 80001ca:	21ff      	movs	r1, #255	@ 0xff
 80001cc:	4091      	lsls	r1, r2
 80001ce:	000a      	movs	r2, r1
 80001d0:	43d2      	mvns	r2, r2
 80001d2:	401a      	ands	r2, r3
 80001d4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80001d6:	683b      	ldr	r3, [r7, #0]
 80001d8:	019b      	lsls	r3, r3, #6
 80001da:	22ff      	movs	r2, #255	@ 0xff
 80001dc:	401a      	ands	r2, r3
 80001de:	1dfb      	adds	r3, r7, #7
 80001e0:	781b      	ldrb	r3, [r3, #0]
 80001e2:	0018      	movs	r0, r3
 80001e4:	2303      	movs	r3, #3
 80001e6:	4003      	ands	r3, r0
 80001e8:	00db      	lsls	r3, r3, #3
 80001ea:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80001ec:	4809      	ldr	r0, [pc, #36]	@ (8000214 <__NVIC_SetPriority+0xd8>)
 80001ee:	1dfb      	adds	r3, r7, #7
 80001f0:	781b      	ldrb	r3, [r3, #0]
 80001f2:	001c      	movs	r4, r3
 80001f4:	230f      	movs	r3, #15
 80001f6:	4023      	ands	r3, r4
 80001f8:	3b08      	subs	r3, #8
 80001fa:	089b      	lsrs	r3, r3, #2
 80001fc:	430a      	orrs	r2, r1
 80001fe:	3306      	adds	r3, #6
 8000200:	009b      	lsls	r3, r3, #2
 8000202:	18c3      	adds	r3, r0, r3
 8000204:	3304      	adds	r3, #4
 8000206:	601a      	str	r2, [r3, #0]
}
 8000208:	46c0      	nop			@ (mov r8, r8)
 800020a:	46bd      	mov	sp, r7
 800020c:	b003      	add	sp, #12
 800020e:	bd90      	pop	{r4, r7, pc}
 8000210:	e000e100 	.word	0xe000e100
 8000214:	e000ed00 	.word	0xe000ed00

08000218 <main>:
//LED temporal
#define LED_PIN (1<<5)          /* PA5 - LED */
volatile uint8_t led_ticks = 0;   /* 1 tick = 2 ms */


int main(void) {
 8000218:	b580      	push	{r7, lr}
 800021a:	af00      	add	r7, sp, #0
	//1. Habilitar HSI 16 MHz como SYSCLK
    RCC->CR |= (1<<0);   // HSI ON
 800021c:	4b0c      	ldr	r3, [pc, #48]	@ (8000250 <main+0x38>)
 800021e:	681a      	ldr	r2, [r3, #0]
 8000220:	4b0b      	ldr	r3, [pc, #44]	@ (8000250 <main+0x38>)
 8000222:	2101      	movs	r1, #1
 8000224:	430a      	orrs	r2, r1
 8000226:	601a      	str	r2, [r3, #0]
    RCC->CFGR |= (1<<0); // HSI16 como SYSCLK
 8000228:	4b09      	ldr	r3, [pc, #36]	@ (8000250 <main+0x38>)
 800022a:	68da      	ldr	r2, [r3, #12]
 800022c:	4b08      	ldr	r3, [pc, #32]	@ (8000250 <main+0x38>)
 800022e:	2101      	movs	r1, #1
 8000230:	430a      	orrs	r2, r1
 8000232:	60da      	str	r2, [r3, #12]


    //2. Inicializar  puertos y timers
    PORTS_init();   //Configuracion de todos los puertos
 8000234:	f000 f892 	bl	800035c <PORTS_init>
    TIM2config();   //Configuracion del TIM2 a  200 ms
 8000238:	f000 f9aa 	bl	8000590 <TIM2config>
    TIM21config();  //Configuracion del TIM21 a 2 ms
 800023c:	f000 fb8c 	bl	8000958 <TIM21config>

    //3. Inicializar LCD
    LCD_INIT();
 8000240:	f000 f934 	bl	80004ac <LCD_INIT>

    //4. Inicializar USART
    USART2Init();
 8000244:	f000 fc86 	bl	8000b54 <USART2Init>
  \details Enables IRQ interrupts by clearing special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 8000248:	b662      	cpsie	i
}
 800024a:	46c0      	nop			@ (mov r8, r8)

    __enable_irq();

    while (1);
 800024c:	46c0      	nop			@ (mov r8, r8)
 800024e:	e7fd      	b.n	800024c <main+0x34>
 8000250:	40021000 	.word	0x40021000

08000254 <LCD_command>:
}


//Envia comando al LCD
void LCD_command(unsigned char command) {
 8000254:	b580      	push	{r7, lr}
 8000256:	b084      	sub	sp, #16
 8000258:	af00      	add	r7, sp, #0
 800025a:	0002      	movs	r2, r0
 800025c:	1dfb      	adds	r3, r7, #7
 800025e:	701a      	strb	r2, [r3, #0]
    GPIOC->BSRR = (RS | RW) << 16; // RS=0, RW=0
 8000260:	4b1a      	ldr	r3, [pc, #104]	@ (80002cc <LCD_command+0x78>)
 8000262:	22c0      	movs	r2, #192	@ 0xc0
 8000264:	0292      	lsls	r2, r2, #10
 8000266:	619a      	str	r2, [r3, #24]
    GPIOC->ODR &= ~(0xFF0);
 8000268:	4b18      	ldr	r3, [pc, #96]	@ (80002cc <LCD_command+0x78>)
 800026a:	695a      	ldr	r2, [r3, #20]
 800026c:	4b17      	ldr	r3, [pc, #92]	@ (80002cc <LCD_command+0x78>)
 800026e:	4918      	ldr	r1, [pc, #96]	@ (80002d0 <LCD_command+0x7c>)
 8000270:	400a      	ands	r2, r1
 8000272:	615a      	str	r2, [r3, #20]
    GPIOC->ODR |= (command << 4);
 8000274:	4b15      	ldr	r3, [pc, #84]	@ (80002cc <LCD_command+0x78>)
 8000276:	6959      	ldr	r1, [r3, #20]
 8000278:	1dfb      	adds	r3, r7, #7
 800027a:	781b      	ldrb	r3, [r3, #0]
 800027c:	011a      	lsls	r2, r3, #4
 800027e:	4b13      	ldr	r3, [pc, #76]	@ (80002cc <LCD_command+0x78>)
 8000280:	430a      	orrs	r2, r1
 8000282:	615a      	str	r2, [r3, #20]
    GPIOC->BSRR = EN;
 8000284:	4b11      	ldr	r3, [pc, #68]	@ (80002cc <LCD_command+0x78>)
 8000286:	2208      	movs	r2, #8
 8000288:	619a      	str	r2, [r3, #24]
    for (volatile int i = 0; i < 800; i++) __NOP();  // Pausa de 1ms
 800028a:	2300      	movs	r3, #0
 800028c:	60fb      	str	r3, [r7, #12]
 800028e:	e003      	b.n	8000298 <LCD_command+0x44>
 8000290:	46c0      	nop			@ (mov r8, r8)
 8000292:	68fb      	ldr	r3, [r7, #12]
 8000294:	3301      	adds	r3, #1
 8000296:	60fb      	str	r3, [r7, #12]
 8000298:	68fa      	ldr	r2, [r7, #12]
 800029a:	23c8      	movs	r3, #200	@ 0xc8
 800029c:	009b      	lsls	r3, r3, #2
 800029e:	429a      	cmp	r2, r3
 80002a0:	dbf6      	blt.n	8000290 <LCD_command+0x3c>
    GPIOC->BSRR = EN << 16;
 80002a2:	4b0a      	ldr	r3, [pc, #40]	@ (80002cc <LCD_command+0x78>)
 80002a4:	2280      	movs	r2, #128	@ 0x80
 80002a6:	0312      	lsls	r2, r2, #12
 80002a8:	619a      	str	r2, [r3, #24]
    for (volatile int i = 0; i < 1600; i++) __NOP(); // Pausa de 2ms
 80002aa:	2300      	movs	r3, #0
 80002ac:	60bb      	str	r3, [r7, #8]
 80002ae:	e003      	b.n	80002b8 <LCD_command+0x64>
 80002b0:	46c0      	nop			@ (mov r8, r8)
 80002b2:	68bb      	ldr	r3, [r7, #8]
 80002b4:	3301      	adds	r3, #1
 80002b6:	60bb      	str	r3, [r7, #8]
 80002b8:	68ba      	ldr	r2, [r7, #8]
 80002ba:	23c8      	movs	r3, #200	@ 0xc8
 80002bc:	00db      	lsls	r3, r3, #3
 80002be:	429a      	cmp	r2, r3
 80002c0:	dbf6      	blt.n	80002b0 <LCD_command+0x5c>
}
 80002c2:	46c0      	nop			@ (mov r8, r8)
 80002c4:	46c0      	nop			@ (mov r8, r8)
 80002c6:	46bd      	mov	sp, r7
 80002c8:	b004      	add	sp, #16
 80002ca:	bd80      	pop	{r7, pc}
 80002cc:	50000800 	.word	0x50000800
 80002d0:	fffff00f 	.word	0xfffff00f

080002d4 <LCD_data>:

void LCD_data(char data) {
 80002d4:	b580      	push	{r7, lr}
 80002d6:	b084      	sub	sp, #16
 80002d8:	af00      	add	r7, sp, #0
 80002da:	0002      	movs	r2, r0
 80002dc:	1dfb      	adds	r3, r7, #7
 80002de:	701a      	strb	r2, [r3, #0]
    GPIOC->BSRR = RS;      // RS=1
 80002e0:	4b1c      	ldr	r3, [pc, #112]	@ (8000354 <LCD_data+0x80>)
 80002e2:	2201      	movs	r2, #1
 80002e4:	619a      	str	r2, [r3, #24]
    GPIOC->BSRR = RW << 16; // RW=0
 80002e6:	4b1b      	ldr	r3, [pc, #108]	@ (8000354 <LCD_data+0x80>)
 80002e8:	2280      	movs	r2, #128	@ 0x80
 80002ea:	0292      	lsls	r2, r2, #10
 80002ec:	619a      	str	r2, [r3, #24]
    GPIOC->ODR &= ~(0xFF0);
 80002ee:	4b19      	ldr	r3, [pc, #100]	@ (8000354 <LCD_data+0x80>)
 80002f0:	695a      	ldr	r2, [r3, #20]
 80002f2:	4b18      	ldr	r3, [pc, #96]	@ (8000354 <LCD_data+0x80>)
 80002f4:	4918      	ldr	r1, [pc, #96]	@ (8000358 <LCD_data+0x84>)
 80002f6:	400a      	ands	r2, r1
 80002f8:	615a      	str	r2, [r3, #20]
    GPIOC->ODR |= (data << 4);
 80002fa:	4b16      	ldr	r3, [pc, #88]	@ (8000354 <LCD_data+0x80>)
 80002fc:	6959      	ldr	r1, [r3, #20]
 80002fe:	1dfb      	adds	r3, r7, #7
 8000300:	781b      	ldrb	r3, [r3, #0]
 8000302:	011a      	lsls	r2, r3, #4
 8000304:	4b13      	ldr	r3, [pc, #76]	@ (8000354 <LCD_data+0x80>)
 8000306:	430a      	orrs	r2, r1
 8000308:	615a      	str	r2, [r3, #20]
    GPIOC->BSRR = EN;
 800030a:	4b12      	ldr	r3, [pc, #72]	@ (8000354 <LCD_data+0x80>)
 800030c:	2208      	movs	r2, #8
 800030e:	619a      	str	r2, [r3, #24]
    for (volatile int i = 0; i < 800; i++) __NOP();  // Pausa de 1ms
 8000310:	2300      	movs	r3, #0
 8000312:	60fb      	str	r3, [r7, #12]
 8000314:	e003      	b.n	800031e <LCD_data+0x4a>
 8000316:	46c0      	nop			@ (mov r8, r8)
 8000318:	68fb      	ldr	r3, [r7, #12]
 800031a:	3301      	adds	r3, #1
 800031c:	60fb      	str	r3, [r7, #12]
 800031e:	68fa      	ldr	r2, [r7, #12]
 8000320:	23c8      	movs	r3, #200	@ 0xc8
 8000322:	009b      	lsls	r3, r3, #2
 8000324:	429a      	cmp	r2, r3
 8000326:	dbf6      	blt.n	8000316 <LCD_data+0x42>
    GPIOC->BSRR = EN << 16;
 8000328:	4b0a      	ldr	r3, [pc, #40]	@ (8000354 <LCD_data+0x80>)
 800032a:	2280      	movs	r2, #128	@ 0x80
 800032c:	0312      	lsls	r2, r2, #12
 800032e:	619a      	str	r2, [r3, #24]
    for (volatile int i = 0; i < 1600; i++) __NOP(); // Pausa de 2ms
 8000330:	2300      	movs	r3, #0
 8000332:	60bb      	str	r3, [r7, #8]
 8000334:	e003      	b.n	800033e <LCD_data+0x6a>
 8000336:	46c0      	nop			@ (mov r8, r8)
 8000338:	68bb      	ldr	r3, [r7, #8]
 800033a:	3301      	adds	r3, #1
 800033c:	60bb      	str	r3, [r7, #8]
 800033e:	68ba      	ldr	r2, [r7, #8]
 8000340:	23c8      	movs	r3, #200	@ 0xc8
 8000342:	00db      	lsls	r3, r3, #3
 8000344:	429a      	cmp	r2, r3
 8000346:	dbf6      	blt.n	8000336 <LCD_data+0x62>
}
 8000348:	46c0      	nop			@ (mov r8, r8)
 800034a:	46c0      	nop			@ (mov r8, r8)
 800034c:	46bd      	mov	sp, r7
 800034e:	b004      	add	sp, #16
 8000350:	bd80      	pop	{r7, pc}
 8000352:	46c0      	nop			@ (mov r8, r8)
 8000354:	50000800 	.word	0x50000800
 8000358:	fffff00f 	.word	0xfffff00f

0800035c <PORTS_init>:

void PORTS_init(void) {
 800035c:	b580      	push	{r7, lr}
 800035e:	b082      	sub	sp, #8
 8000360:	af00      	add	r7, sp, #0
    RCC->IOPENR |= (1<<2); // Habilitar GPIOC y los pines para el LCD
 8000362:	4b46      	ldr	r3, [pc, #280]	@ (800047c <PORTS_init+0x120>)
 8000364:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000366:	4b45      	ldr	r3, [pc, #276]	@ (800047c <PORTS_init+0x120>)
 8000368:	2104      	movs	r1, #4
 800036a:	430a      	orrs	r2, r1
 800036c:	62da      	str	r2, [r3, #44]	@ 0x2c
    for (int i = 0; i <= 11; i++) {
 800036e:	2300      	movs	r3, #0
 8000370:	607b      	str	r3, [r7, #4]
 8000372:	e019      	b.n	80003a8 <PORTS_init+0x4c>
        GPIOC->MODER &= ~(0x3 << (2*i));
 8000374:	4b42      	ldr	r3, [pc, #264]	@ (8000480 <PORTS_init+0x124>)
 8000376:	681a      	ldr	r2, [r3, #0]
 8000378:	687b      	ldr	r3, [r7, #4]
 800037a:	005b      	lsls	r3, r3, #1
 800037c:	2103      	movs	r1, #3
 800037e:	4099      	lsls	r1, r3
 8000380:	000b      	movs	r3, r1
 8000382:	43db      	mvns	r3, r3
 8000384:	0019      	movs	r1, r3
 8000386:	4b3e      	ldr	r3, [pc, #248]	@ (8000480 <PORTS_init+0x124>)
 8000388:	400a      	ands	r2, r1
 800038a:	601a      	str	r2, [r3, #0]
        GPIOC->MODER |=  (0x1 << (2*i));
 800038c:	4b3c      	ldr	r3, [pc, #240]	@ (8000480 <PORTS_init+0x124>)
 800038e:	681a      	ldr	r2, [r3, #0]
 8000390:	687b      	ldr	r3, [r7, #4]
 8000392:	005b      	lsls	r3, r3, #1
 8000394:	2101      	movs	r1, #1
 8000396:	4099      	lsls	r1, r3
 8000398:	000b      	movs	r3, r1
 800039a:	0019      	movs	r1, r3
 800039c:	4b38      	ldr	r3, [pc, #224]	@ (8000480 <PORTS_init+0x124>)
 800039e:	430a      	orrs	r2, r1
 80003a0:	601a      	str	r2, [r3, #0]
    for (int i = 0; i <= 11; i++) {
 80003a2:	687b      	ldr	r3, [r7, #4]
 80003a4:	3301      	adds	r3, #1
 80003a6:	607b      	str	r3, [r7, #4]
 80003a8:	687b      	ldr	r3, [r7, #4]
 80003aa:	2b0b      	cmp	r3, #11
 80003ac:	dde2      	ble.n	8000374 <PORTS_init+0x18>
    }

    RCC->IOPENR |= (1<<0); //Enable clock GPIOA
 80003ae:	4b33      	ldr	r3, [pc, #204]	@ (800047c <PORTS_init+0x120>)
 80003b0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80003b2:	4b32      	ldr	r3, [pc, #200]	@ (800047c <PORTS_init+0x120>)
 80003b4:	2101      	movs	r1, #1
 80003b6:	430a      	orrs	r2, r1
 80003b8:	62da      	str	r2, [r3, #44]	@ 0x2c
    RCC->IOPENR |= (1<<1); //Enable clock GPIOB
 80003ba:	4b30      	ldr	r3, [pc, #192]	@ (800047c <PORTS_init+0x120>)
 80003bc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80003be:	4b2f      	ldr	r3, [pc, #188]	@ (800047c <PORTS_init+0x120>)
 80003c0:	2102      	movs	r1, #2
 80003c2:	430a      	orrs	r2, r1
 80003c4:	62da      	str	r2, [r3, #44]	@ 0x2c

    GPIOA->MODER &= ~(1<<11); //Config PA5 como output Salida  0
 80003c6:	23a0      	movs	r3, #160	@ 0xa0
 80003c8:	05db      	lsls	r3, r3, #23
 80003ca:	681a      	ldr	r2, [r3, #0]
 80003cc:	23a0      	movs	r3, #160	@ 0xa0
 80003ce:	05db      	lsls	r3, r3, #23
 80003d0:	492c      	ldr	r1, [pc, #176]	@ (8000484 <PORTS_init+0x128>)
 80003d2:	400a      	ands	r2, r1
 80003d4:	601a      	str	r2, [r3, #0]

    GPIOB->MODER &= ~(1<<1); //Config PB0 como output Salida  0
 80003d6:	4b2c      	ldr	r3, [pc, #176]	@ (8000488 <PORTS_init+0x12c>)
 80003d8:	681a      	ldr	r2, [r3, #0]
 80003da:	4b2b      	ldr	r3, [pc, #172]	@ (8000488 <PORTS_init+0x12c>)
 80003dc:	2102      	movs	r1, #2
 80003de:	438a      	bics	r2, r1
 80003e0:	601a      	str	r2, [r3, #0]
	GPIOB->MODER &= ~(1<<3); //Config PB1 como output Salida  1
 80003e2:	4b29      	ldr	r3, [pc, #164]	@ (8000488 <PORTS_init+0x12c>)
 80003e4:	681a      	ldr	r2, [r3, #0]
 80003e6:	4b28      	ldr	r3, [pc, #160]	@ (8000488 <PORTS_init+0x12c>)
 80003e8:	2108      	movs	r1, #8
 80003ea:	438a      	bics	r2, r1
 80003ec:	601a      	str	r2, [r3, #0]
	GPIOB->MODER &= ~(1<<5); //Config PB2 como output Salida  2
 80003ee:	4b26      	ldr	r3, [pc, #152]	@ (8000488 <PORTS_init+0x12c>)
 80003f0:	681a      	ldr	r2, [r3, #0]
 80003f2:	4b25      	ldr	r3, [pc, #148]	@ (8000488 <PORTS_init+0x12c>)
 80003f4:	2120      	movs	r1, #32
 80003f6:	438a      	bics	r2, r1
 80003f8:	601a      	str	r2, [r3, #0]
	GPIOB->MODER &= ~(1<<7); //Config PB3 como output Salida  3
 80003fa:	4b23      	ldr	r3, [pc, #140]	@ (8000488 <PORTS_init+0x12c>)
 80003fc:	681a      	ldr	r2, [r3, #0]
 80003fe:	4b22      	ldr	r3, [pc, #136]	@ (8000488 <PORTS_init+0x12c>)
 8000400:	2180      	movs	r1, #128	@ 0x80
 8000402:	438a      	bics	r2, r1
 8000404:	601a      	str	r2, [r3, #0]
	GPIOB->MODER &= ~(1<<9); //Config PB4 como output Salida  4
 8000406:	4b20      	ldr	r3, [pc, #128]	@ (8000488 <PORTS_init+0x12c>)
 8000408:	681a      	ldr	r2, [r3, #0]
 800040a:	4b1f      	ldr	r3, [pc, #124]	@ (8000488 <PORTS_init+0x12c>)
 800040c:	491f      	ldr	r1, [pc, #124]	@ (800048c <PORTS_init+0x130>)
 800040e:	400a      	ands	r2, r1
 8000410:	601a      	str	r2, [r3, #0]
	GPIOB->MODER &= ~(1<<11); //Config PB5 como output Salida 5
 8000412:	4b1d      	ldr	r3, [pc, #116]	@ (8000488 <PORTS_init+0x12c>)
 8000414:	681a      	ldr	r2, [r3, #0]
 8000416:	4b1c      	ldr	r3, [pc, #112]	@ (8000488 <PORTS_init+0x12c>)
 8000418:	491a      	ldr	r1, [pc, #104]	@ (8000484 <PORTS_init+0x128>)
 800041a:	400a      	ands	r2, r1
 800041c:	601a      	str	r2, [r3, #0]
	GPIOB->MODER &= ~(1<<13); //Config PB6 como output Salida 6
 800041e:	4b1a      	ldr	r3, [pc, #104]	@ (8000488 <PORTS_init+0x12c>)
 8000420:	681a      	ldr	r2, [r3, #0]
 8000422:	4b19      	ldr	r3, [pc, #100]	@ (8000488 <PORTS_init+0x12c>)
 8000424:	491a      	ldr	r1, [pc, #104]	@ (8000490 <PORTS_init+0x134>)
 8000426:	400a      	ands	r2, r1
 8000428:	601a      	str	r2, [r3, #0]
	GPIOB->MODER &= ~(1<<15); //Config PB7 como output (Push 1)
 800042a:	4b17      	ldr	r3, [pc, #92]	@ (8000488 <PORTS_init+0x12c>)
 800042c:	681a      	ldr	r2, [r3, #0]
 800042e:	4b16      	ldr	r3, [pc, #88]	@ (8000488 <PORTS_init+0x12c>)
 8000430:	4918      	ldr	r1, [pc, #96]	@ (8000494 <PORTS_init+0x138>)
 8000432:	400a      	ands	r2, r1
 8000434:	601a      	str	r2, [r3, #0]
	GPIOB->MODER &= ~(1<<17); //Config PB8 como output (Push 2)
 8000436:	4b14      	ldr	r3, [pc, #80]	@ (8000488 <PORTS_init+0x12c>)
 8000438:	681a      	ldr	r2, [r3, #0]
 800043a:	4b13      	ldr	r3, [pc, #76]	@ (8000488 <PORTS_init+0x12c>)
 800043c:	4916      	ldr	r1, [pc, #88]	@ (8000498 <PORTS_init+0x13c>)
 800043e:	400a      	ands	r2, r1
 8000440:	601a      	str	r2, [r3, #0]
	GPIOB->MODER &= ~(1<<19); //Config PB9 como output (Push 3)
 8000442:	4b11      	ldr	r3, [pc, #68]	@ (8000488 <PORTS_init+0x12c>)
 8000444:	681a      	ldr	r2, [r3, #0]
 8000446:	4b10      	ldr	r3, [pc, #64]	@ (8000488 <PORTS_init+0x12c>)
 8000448:	4914      	ldr	r1, [pc, #80]	@ (800049c <PORTS_init+0x140>)
 800044a:	400a      	ands	r2, r1
 800044c:	601a      	str	r2, [r3, #0]
	GPIOB->MODER &= ~(1<<21); //Config PB10 como output (Push 4)
 800044e:	4b0e      	ldr	r3, [pc, #56]	@ (8000488 <PORTS_init+0x12c>)
 8000450:	681a      	ldr	r2, [r3, #0]
 8000452:	4b0d      	ldr	r3, [pc, #52]	@ (8000488 <PORTS_init+0x12c>)
 8000454:	4912      	ldr	r1, [pc, #72]	@ (80004a0 <PORTS_init+0x144>)
 8000456:	400a      	ands	r2, r1
 8000458:	601a      	str	r2, [r3, #0]
	GPIOB->MODER &= ~(1<<23); //Config PB11 como output (Push 4)
 800045a:	4b0b      	ldr	r3, [pc, #44]	@ (8000488 <PORTS_init+0x12c>)
 800045c:	681a      	ldr	r2, [r3, #0]
 800045e:	4b0a      	ldr	r3, [pc, #40]	@ (8000488 <PORTS_init+0x12c>)
 8000460:	4910      	ldr	r1, [pc, #64]	@ (80004a4 <PORTS_init+0x148>)
 8000462:	400a      	ands	r2, r1
 8000464:	601a      	str	r2, [r3, #0]
	GPIOB->MODER &= ~(1<<25); //Config PB12 como output (Push 4)
 8000466:	4b08      	ldr	r3, [pc, #32]	@ (8000488 <PORTS_init+0x12c>)
 8000468:	681a      	ldr	r2, [r3, #0]
 800046a:	4b07      	ldr	r3, [pc, #28]	@ (8000488 <PORTS_init+0x12c>)
 800046c:	490e      	ldr	r1, [pc, #56]	@ (80004a8 <PORTS_init+0x14c>)
 800046e:	400a      	ands	r2, r1
 8000470:	601a      	str	r2, [r3, #0]

}
 8000472:	46c0      	nop			@ (mov r8, r8)
 8000474:	46bd      	mov	sp, r7
 8000476:	b002      	add	sp, #8
 8000478:	bd80      	pop	{r7, pc}
 800047a:	46c0      	nop			@ (mov r8, r8)
 800047c:	40021000 	.word	0x40021000
 8000480:	50000800 	.word	0x50000800
 8000484:	fffff7ff 	.word	0xfffff7ff
 8000488:	50000400 	.word	0x50000400
 800048c:	fffffdff 	.word	0xfffffdff
 8000490:	ffffdfff 	.word	0xffffdfff
 8000494:	ffff7fff 	.word	0xffff7fff
 8000498:	fffdffff 	.word	0xfffdffff
 800049c:	fff7ffff 	.word	0xfff7ffff
 80004a0:	ffdfffff 	.word	0xffdfffff
 80004a4:	ff7fffff 	.word	0xff7fffff
 80004a8:	fdffffff 	.word	0xfdffffff

080004ac <LCD_INIT>:

void LCD_INIT(void) {
 80004ac:	b580      	push	{r7, lr}
 80004ae:	b088      	sub	sp, #32
 80004b0:	af00      	add	r7, sp, #0
	for (volatile int i = 0; i < 40000; i++) __NOP();  // Pausa de 50ms
 80004b2:	2300      	movs	r3, #0
 80004b4:	61fb      	str	r3, [r7, #28]
 80004b6:	e003      	b.n	80004c0 <LCD_INIT+0x14>
 80004b8:	46c0      	nop			@ (mov r8, r8)
 80004ba:	69fb      	ldr	r3, [r7, #28]
 80004bc:	3301      	adds	r3, #1
 80004be:	61fb      	str	r3, [r7, #28]
 80004c0:	69fb      	ldr	r3, [r7, #28]
 80004c2:	4a32      	ldr	r2, [pc, #200]	@ (800058c <LCD_INIT+0xe0>)
 80004c4:	4293      	cmp	r3, r2
 80004c6:	ddf7      	ble.n	80004b8 <LCD_INIT+0xc>
    LCD_command(0x30);
 80004c8:	2030      	movs	r0, #48	@ 0x30
 80004ca:	f7ff fec3 	bl	8000254 <LCD_command>
    for (volatile int i = 0; i < 4000; i++) __NOP();  // Pausa de 5ms
 80004ce:	2300      	movs	r3, #0
 80004d0:	61bb      	str	r3, [r7, #24]
 80004d2:	e003      	b.n	80004dc <LCD_INIT+0x30>
 80004d4:	46c0      	nop			@ (mov r8, r8)
 80004d6:	69bb      	ldr	r3, [r7, #24]
 80004d8:	3301      	adds	r3, #1
 80004da:	61bb      	str	r3, [r7, #24]
 80004dc:	69ba      	ldr	r2, [r7, #24]
 80004de:	23fa      	movs	r3, #250	@ 0xfa
 80004e0:	011b      	lsls	r3, r3, #4
 80004e2:	429a      	cmp	r2, r3
 80004e4:	dbf6      	blt.n	80004d4 <LCD_INIT+0x28>
    LCD_command(0x30);
 80004e6:	2030      	movs	r0, #48	@ 0x30
 80004e8:	f7ff feb4 	bl	8000254 <LCD_command>
    for (volatile int i = 0; i < 800; i++) __NOP();  // Pausa de 1ms
 80004ec:	2300      	movs	r3, #0
 80004ee:	617b      	str	r3, [r7, #20]
 80004f0:	e003      	b.n	80004fa <LCD_INIT+0x4e>
 80004f2:	46c0      	nop			@ (mov r8, r8)
 80004f4:	697b      	ldr	r3, [r7, #20]
 80004f6:	3301      	adds	r3, #1
 80004f8:	617b      	str	r3, [r7, #20]
 80004fa:	697a      	ldr	r2, [r7, #20]
 80004fc:	23c8      	movs	r3, #200	@ 0xc8
 80004fe:	009b      	lsls	r3, r3, #2
 8000500:	429a      	cmp	r2, r3
 8000502:	dbf6      	blt.n	80004f2 <LCD_INIT+0x46>
    LCD_command(0x30);
 8000504:	2030      	movs	r0, #48	@ 0x30
 8000506:	f7ff fea5 	bl	8000254 <LCD_command>
    for (volatile int i = 0; i < 800; i++) __NOP();  // Pausa de 1ms
 800050a:	2300      	movs	r3, #0
 800050c:	613b      	str	r3, [r7, #16]
 800050e:	e003      	b.n	8000518 <LCD_INIT+0x6c>
 8000510:	46c0      	nop			@ (mov r8, r8)
 8000512:	693b      	ldr	r3, [r7, #16]
 8000514:	3301      	adds	r3, #1
 8000516:	613b      	str	r3, [r7, #16]
 8000518:	693a      	ldr	r2, [r7, #16]
 800051a:	23c8      	movs	r3, #200	@ 0xc8
 800051c:	009b      	lsls	r3, r3, #2
 800051e:	429a      	cmp	r2, r3
 8000520:	dbf6      	blt.n	8000510 <LCD_INIT+0x64>
    LCD_command(0x38); // 8 bits, 2 líneas
 8000522:	2038      	movs	r0, #56	@ 0x38
 8000524:	f7ff fe96 	bl	8000254 <LCD_command>
    for (volatile int i = 0; i < 800; i++) __NOP();  // Pausa de 1ms
 8000528:	2300      	movs	r3, #0
 800052a:	60fb      	str	r3, [r7, #12]
 800052c:	e003      	b.n	8000536 <LCD_INIT+0x8a>
 800052e:	46c0      	nop			@ (mov r8, r8)
 8000530:	68fb      	ldr	r3, [r7, #12]
 8000532:	3301      	adds	r3, #1
 8000534:	60fb      	str	r3, [r7, #12]
 8000536:	68fa      	ldr	r2, [r7, #12]
 8000538:	23c8      	movs	r3, #200	@ 0xc8
 800053a:	009b      	lsls	r3, r3, #2
 800053c:	429a      	cmp	r2, r3
 800053e:	dbf6      	blt.n	800052e <LCD_INIT+0x82>
    LCD_command(0x06); // Modo entrada (incremento)
 8000540:	2006      	movs	r0, #6
 8000542:	f7ff fe87 	bl	8000254 <LCD_command>
    for (volatile int i = 0; i < 800; i++) __NOP();  // Pausa de 1ms
 8000546:	2300      	movs	r3, #0
 8000548:	60bb      	str	r3, [r7, #8]
 800054a:	e003      	b.n	8000554 <LCD_INIT+0xa8>
 800054c:	46c0      	nop			@ (mov r8, r8)
 800054e:	68bb      	ldr	r3, [r7, #8]
 8000550:	3301      	adds	r3, #1
 8000552:	60bb      	str	r3, [r7, #8]
 8000554:	68ba      	ldr	r2, [r7, #8]
 8000556:	23c8      	movs	r3, #200	@ 0xc8
 8000558:	009b      	lsls	r3, r3, #2
 800055a:	429a      	cmp	r2, r3
 800055c:	dbf6      	blt.n	800054c <LCD_INIT+0xa0>
    LCD_command(0x01); // Clear Display
 800055e:	2001      	movs	r0, #1
 8000560:	f7ff fe78 	bl	8000254 <LCD_command>
    for (volatile int i = 0; i < 1600; i++) __NOP();  // Pausa de 2ms
 8000564:	2300      	movs	r3, #0
 8000566:	607b      	str	r3, [r7, #4]
 8000568:	e003      	b.n	8000572 <LCD_INIT+0xc6>
 800056a:	46c0      	nop			@ (mov r8, r8)
 800056c:	687b      	ldr	r3, [r7, #4]
 800056e:	3301      	adds	r3, #1
 8000570:	607b      	str	r3, [r7, #4]
 8000572:	687a      	ldr	r2, [r7, #4]
 8000574:	23c8      	movs	r3, #200	@ 0xc8
 8000576:	00db      	lsls	r3, r3, #3
 8000578:	429a      	cmp	r2, r3
 800057a:	dbf6      	blt.n	800056a <LCD_INIT+0xbe>
    LCD_command(0x0C); // Display ON, cursor OFF
 800057c:	200c      	movs	r0, #12
 800057e:	f7ff fe69 	bl	8000254 <LCD_command>
}
 8000582:	46c0      	nop			@ (mov r8, r8)
 8000584:	46bd      	mov	sp, r7
 8000586:	b008      	add	sp, #32
 8000588:	bd80      	pop	{r7, pc}
 800058a:	46c0      	nop			@ (mov r8, r8)
 800058c:	00009c3f 	.word	0x00009c3f

08000590 <TIM2config>:


void TIM2config(void) {
 8000590:	b580      	push	{r7, lr}
 8000592:	af00      	add	r7, sp, #0
    RCC->APB1ENR |= (1<<0);   // Habilitar reloj a TIM2
 8000594:	4b11      	ldr	r3, [pc, #68]	@ (80005dc <TIM2config+0x4c>)
 8000596:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8000598:	4b10      	ldr	r3, [pc, #64]	@ (80005dc <TIM2config+0x4c>)
 800059a:	2101      	movs	r1, #1
 800059c:	430a      	orrs	r2, r1
 800059e:	639a      	str	r2, [r3, #56]	@ 0x38
    TIM2->PSC = 16000 - 1;    // Prescaler: 16 MHz / 16000 = 1 kHz (1ms)
 80005a0:	2380      	movs	r3, #128	@ 0x80
 80005a2:	05db      	lsls	r3, r3, #23
 80005a4:	4a0e      	ldr	r2, [pc, #56]	@ (80005e0 <TIM2config+0x50>)
 80005a6:	629a      	str	r2, [r3, #40]	@ 0x28
    TIM2->ARR = 200 - 1;      // Cada 200 * 1 ms = 200 ms
 80005a8:	2380      	movs	r3, #128	@ 0x80
 80005aa:	05db      	lsls	r3, r3, #23
 80005ac:	22c7      	movs	r2, #199	@ 0xc7
 80005ae:	62da      	str	r2, [r3, #44]	@ 0x2c
    TIM2->CNT = 0;
 80005b0:	2380      	movs	r3, #128	@ 0x80
 80005b2:	05db      	lsls	r3, r3, #23
 80005b4:	2200      	movs	r2, #0
 80005b6:	625a      	str	r2, [r3, #36]	@ 0x24
    TIM2->DIER |= (1<<0);     // Habilitar interrupción
 80005b8:	2380      	movs	r3, #128	@ 0x80
 80005ba:	05db      	lsls	r3, r3, #23
 80005bc:	68da      	ldr	r2, [r3, #12]
 80005be:	2380      	movs	r3, #128	@ 0x80
 80005c0:	05db      	lsls	r3, r3, #23
 80005c2:	2101      	movs	r1, #1
 80005c4:	430a      	orrs	r2, r1
 80005c6:	60da      	str	r2, [r3, #12]
    TIM2->CR1 = (1<<0);       // Enable contador
 80005c8:	2380      	movs	r3, #128	@ 0x80
 80005ca:	05db      	lsls	r3, r3, #23
 80005cc:	2201      	movs	r2, #1
 80005ce:	601a      	str	r2, [r3, #0]
    NVIC_EnableIRQ(TIM2_IRQn);// Permitir interrupción
 80005d0:	200f      	movs	r0, #15
 80005d2:	f7ff fd99 	bl	8000108 <__NVIC_EnableIRQ>
}
 80005d6:	46c0      	nop			@ (mov r8, r8)
 80005d8:	46bd      	mov	sp, r7
 80005da:	bd80      	pop	{r7, pc}
 80005dc:	40021000 	.word	0x40021000
 80005e0:	00003e7f 	.word	0x00003e7f

080005e4 <TIM2_IRQHandler>:

void TIM2_IRQHandler(void) {
 80005e4:	b580      	push	{r7, lr}
 80005e6:	af00      	add	r7, sp, #0
    TIM2->SR &= ~(1<<0); // Limpiar bandera de actualización (UIF)
 80005e8:	2380      	movs	r3, #128	@ 0x80
 80005ea:	05db      	lsls	r3, r3, #23
 80005ec:	691a      	ldr	r2, [r3, #16]
 80005ee:	2380      	movs	r3, #128	@ 0x80
 80005f0:	05db      	lsls	r3, r3, #23
 80005f2:	2101      	movs	r1, #1
 80005f4:	438a      	bics	r2, r1
 80005f6:	611a      	str	r2, [r3, #16]

    if (current_menu == 0) {
 80005f8:	4bcc      	ldr	r3, [pc, #816]	@ (800092c <TIM2_IRQHandler+0x348>)
 80005fa:	781b      	ldrb	r3, [r3, #0]
 80005fc:	b2db      	uxtb	r3, r3
 80005fe:	2b00      	cmp	r3, #0
 8000600:	d000      	beq.n	8000604 <TIM2_IRQHandler+0x20>
 8000602:	e0aa      	b.n	800075a <TIM2_IRQHandler+0x176>
        // Menú principal
        switch (lcd_step) {
 8000604:	4bca      	ldr	r3, [pc, #808]	@ (8000930 <TIM2_IRQHandler+0x34c>)
 8000606:	781b      	ldrb	r3, [r3, #0]
 8000608:	b2db      	uxtb	r3, r3
 800060a:	2b24      	cmp	r3, #36	@ 0x24
 800060c:	d900      	bls.n	8000610 <TIM2_IRQHandler+0x2c>
 800060e:	e18a      	b.n	8000926 <TIM2_IRQHandler+0x342>
 8000610:	009a      	lsls	r2, r3, #2
 8000612:	4bc8      	ldr	r3, [pc, #800]	@ (8000934 <TIM2_IRQHandler+0x350>)
 8000614:	18d3      	adds	r3, r2, r3
 8000616:	681b      	ldr	r3, [r3, #0]
 8000618:	469f      	mov	pc, r3
            case 0: LCD_command(0x01); LCD_command(0x80); break;
 800061a:	2001      	movs	r0, #1
 800061c:	f7ff fe1a 	bl	8000254 <LCD_command>
 8000620:	2080      	movs	r0, #128	@ 0x80
 8000622:	f7ff fe17 	bl	8000254 <LCD_command>
 8000626:	e18a      	b.n	800093e <TIM2_IRQHandler+0x35a>
            case 1: LCD_data('1'); break;
 8000628:	2031      	movs	r0, #49	@ 0x31
 800062a:	f7ff fe53 	bl	80002d4 <LCD_data>
 800062e:	e186      	b.n	800093e <TIM2_IRQHandler+0x35a>
            case 2: LCD_data('.'); break;
 8000630:	202e      	movs	r0, #46	@ 0x2e
 8000632:	f7ff fe4f 	bl	80002d4 <LCD_data>
 8000636:	e182      	b.n	800093e <TIM2_IRQHandler+0x35a>
            case 3: LCD_data('U'); break;
 8000638:	2055      	movs	r0, #85	@ 0x55
 800063a:	f7ff fe4b 	bl	80002d4 <LCD_data>
 800063e:	e17e      	b.n	800093e <TIM2_IRQHandler+0x35a>
            case 4: LCD_data('s'); break;
 8000640:	2073      	movs	r0, #115	@ 0x73
 8000642:	f7ff fe47 	bl	80002d4 <LCD_data>
 8000646:	e17a      	b.n	800093e <TIM2_IRQHandler+0x35a>
            case 5: LCD_data('u'); break;
 8000648:	2075      	movs	r0, #117	@ 0x75
 800064a:	f7ff fe43 	bl	80002d4 <LCD_data>
 800064e:	e176      	b.n	800093e <TIM2_IRQHandler+0x35a>
            case 6: LCD_data('a'); break;
 8000650:	2061      	movs	r0, #97	@ 0x61
 8000652:	f7ff fe3f 	bl	80002d4 <LCD_data>
 8000656:	e172      	b.n	800093e <TIM2_IRQHandler+0x35a>
            case 7: LCD_data('r'); break;
 8000658:	2072      	movs	r0, #114	@ 0x72
 800065a:	f7ff fe3b 	bl	80002d4 <LCD_data>
 800065e:	e16e      	b.n	800093e <TIM2_IRQHandler+0x35a>
            case 8: LCD_data('i'); break;
 8000660:	2069      	movs	r0, #105	@ 0x69
 8000662:	f7ff fe37 	bl	80002d4 <LCD_data>
 8000666:	e16a      	b.n	800093e <TIM2_IRQHandler+0x35a>
            case 9: LCD_data('o'); break;
 8000668:	206f      	movs	r0, #111	@ 0x6f
 800066a:	f7ff fe33 	bl	80002d4 <LCD_data>
 800066e:	e166      	b.n	800093e <TIM2_IRQHandler+0x35a>
            case 10: LCD_data(' '); break;
 8000670:	2020      	movs	r0, #32
 8000672:	f7ff fe2f 	bl	80002d4 <LCD_data>
 8000676:	e162      	b.n	800093e <TIM2_IRQHandler+0x35a>
            case 11: LCD_data('y'); break;
 8000678:	2079      	movs	r0, #121	@ 0x79
 800067a:	f7ff fe2b 	bl	80002d4 <LCD_data>
 800067e:	e15e      	b.n	800093e <TIM2_IRQHandler+0x35a>
            case 12: LCD_data(' '); break;
 8000680:	2020      	movs	r0, #32
 8000682:	f7ff fe27 	bl	80002d4 <LCD_data>
 8000686:	e15a      	b.n	800093e <TIM2_IRQHandler+0x35a>
            case 13: LCD_data('P'); break;
 8000688:	2050      	movs	r0, #80	@ 0x50
 800068a:	f7ff fe23 	bl	80002d4 <LCD_data>
 800068e:	e156      	b.n	800093e <TIM2_IRQHandler+0x35a>
            case 14: LCD_data('I'); break;
 8000690:	2049      	movs	r0, #73	@ 0x49
 8000692:	f7ff fe1f 	bl	80002d4 <LCD_data>
 8000696:	e152      	b.n	800093e <TIM2_IRQHandler+0x35a>
            case 15: LCD_data('N'); break;
 8000698:	204e      	movs	r0, #78	@ 0x4e
 800069a:	f7ff fe1b 	bl	80002d4 <LCD_data>
 800069e:	e14e      	b.n	800093e <TIM2_IRQHandler+0x35a>
            case 16: LCD_command(0x01); LCD_command(0x80); break;
 80006a0:	2001      	movs	r0, #1
 80006a2:	f7ff fdd7 	bl	8000254 <LCD_command>
 80006a6:	2080      	movs	r0, #128	@ 0x80
 80006a8:	f7ff fdd4 	bl	8000254 <LCD_command>
 80006ac:	e147      	b.n	800093e <TIM2_IRQHandler+0x35a>
            case 17: LCD_data('2'); break;
 80006ae:	2032      	movs	r0, #50	@ 0x32
 80006b0:	f7ff fe10 	bl	80002d4 <LCD_data>
 80006b4:	e143      	b.n	800093e <TIM2_IRQHandler+0x35a>
            case 18: LCD_data('.'); break;
 80006b6:	202e      	movs	r0, #46	@ 0x2e
 80006b8:	f7ff fe0c 	bl	80002d4 <LCD_data>
 80006bc:	e13f      	b.n	800093e <TIM2_IRQHandler+0x35a>
            case 19: LCD_data('C'); break;
 80006be:	2043      	movs	r0, #67	@ 0x43
 80006c0:	f7ff fe08 	bl	80002d4 <LCD_data>
 80006c4:	e13b      	b.n	800093e <TIM2_IRQHandler+0x35a>
            case 20: LCD_data('e'); break;
 80006c6:	2065      	movs	r0, #101	@ 0x65
 80006c8:	f7ff fe04 	bl	80002d4 <LCD_data>
 80006cc:	e137      	b.n	800093e <TIM2_IRQHandler+0x35a>
            case 21: LCD_data('l'); break;
 80006ce:	206c      	movs	r0, #108	@ 0x6c
 80006d0:	f7ff fe00 	bl	80002d4 <LCD_data>
 80006d4:	e133      	b.n	800093e <TIM2_IRQHandler+0x35a>
            case 22: LCD_data('u'); break;
 80006d6:	2075      	movs	r0, #117	@ 0x75
 80006d8:	f7ff fdfc 	bl	80002d4 <LCD_data>
 80006dc:	e12f      	b.n	800093e <TIM2_IRQHandler+0x35a>
            case 23: LCD_data('l'); break;
 80006de:	206c      	movs	r0, #108	@ 0x6c
 80006e0:	f7ff fdf8 	bl	80002d4 <LCD_data>
 80006e4:	e12b      	b.n	800093e <TIM2_IRQHandler+0x35a>
            case 24: LCD_data('a'); break;
 80006e6:	2061      	movs	r0, #97	@ 0x61
 80006e8:	f7ff fdf4 	bl	80002d4 <LCD_data>
 80006ec:	e127      	b.n	800093e <TIM2_IRQHandler+0x35a>
            case 25: LCD_data('r'); break;
 80006ee:	2072      	movs	r0, #114	@ 0x72
 80006f0:	f7ff fdf0 	bl	80002d4 <LCD_data>
 80006f4:	e123      	b.n	800093e <TIM2_IRQHandler+0x35a>
            case 26: LCD_command(0x01); LCD_command(0x80); break;
 80006f6:	2001      	movs	r0, #1
 80006f8:	f7ff fdac 	bl	8000254 <LCD_command>
 80006fc:	2080      	movs	r0, #128	@ 0x80
 80006fe:	f7ff fda9 	bl	8000254 <LCD_command>
 8000702:	e11c      	b.n	800093e <TIM2_IRQHandler+0x35a>
            case 27: LCD_data('3'); break;
 8000704:	2033      	movs	r0, #51	@ 0x33
 8000706:	f7ff fde5 	bl	80002d4 <LCD_data>
 800070a:	e118      	b.n	800093e <TIM2_IRQHandler+0x35a>
            case 28: LCD_data('.'); break;
 800070c:	202e      	movs	r0, #46	@ 0x2e
 800070e:	f7ff fde1 	bl	80002d4 <LCD_data>
 8000712:	e114      	b.n	800093e <TIM2_IRQHandler+0x35a>
            case 29: LCD_data('S'); break;
 8000714:	2053      	movs	r0, #83	@ 0x53
 8000716:	f7ff fddd 	bl	80002d4 <LCD_data>
 800071a:	e110      	b.n	800093e <TIM2_IRQHandler+0x35a>
            case 30: LCD_data('e'); break;
 800071c:	2065      	movs	r0, #101	@ 0x65
 800071e:	f7ff fdd9 	bl	80002d4 <LCD_data>
 8000722:	e10c      	b.n	800093e <TIM2_IRQHandler+0x35a>
            case 31: LCD_data('r'); break;
 8000724:	2072      	movs	r0, #114	@ 0x72
 8000726:	f7ff fdd5 	bl	80002d4 <LCD_data>
 800072a:	e108      	b.n	800093e <TIM2_IRQHandler+0x35a>
            case 32: LCD_data('i'); break;
 800072c:	2069      	movs	r0, #105	@ 0x69
 800072e:	f7ff fdd1 	bl	80002d4 <LCD_data>
 8000732:	e104      	b.n	800093e <TIM2_IRQHandler+0x35a>
            case 33: LCD_data('a'); break;
 8000734:	2061      	movs	r0, #97	@ 0x61
 8000736:	f7ff fdcd 	bl	80002d4 <LCD_data>
 800073a:	e100      	b.n	800093e <TIM2_IRQHandler+0x35a>
            case 34: LCD_data('l'); break;
 800073c:	206c      	movs	r0, #108	@ 0x6c
 800073e:	f7ff fdc9 	bl	80002d4 <LCD_data>
 8000742:	e0fc      	b.n	800093e <TIM2_IRQHandler+0x35a>
            case 35: LCD_command(0x01); LCD_command(0x80); break;
 8000744:	2001      	movs	r0, #1
 8000746:	f7ff fd85 	bl	8000254 <LCD_command>
 800074a:	2080      	movs	r0, #128	@ 0x80
 800074c:	f7ff fd82 	bl	8000254 <LCD_command>
 8000750:	e0f5      	b.n	800093e <TIM2_IRQHandler+0x35a>
            case 36: lcd_step = 0; break; // Reiniciar al menú principal
 8000752:	4b77      	ldr	r3, [pc, #476]	@ (8000930 <TIM2_IRQHandler+0x34c>)
 8000754:	2200      	movs	r2, #0
 8000756:	701a      	strb	r2, [r3, #0]
 8000758:	e0f1      	b.n	800093e <TIM2_IRQHandler+0x35a>
            default: break;
        }
    }
    else if (current_menu == 1) {
 800075a:	4b74      	ldr	r3, [pc, #464]	@ (800092c <TIM2_IRQHandler+0x348>)
 800075c:	781b      	ldrb	r3, [r3, #0]
 800075e:	b2db      	uxtb	r3, r3
 8000760:	2b01      	cmp	r3, #1
 8000762:	d000      	beq.n	8000766 <TIM2_IRQHandler+0x182>
 8000764:	e0eb      	b.n	800093e <TIM2_IRQHandler+0x35a>

        // Menú secundario (cuando recibes '3')
        switch (lcd_step) {
 8000766:	4b72      	ldr	r3, [pc, #456]	@ (8000930 <TIM2_IRQHandler+0x34c>)
 8000768:	781b      	ldrb	r3, [r3, #0]
 800076a:	b2db      	uxtb	r3, r3
 800076c:	2b32      	cmp	r3, #50	@ 0x32
 800076e:	d900      	bls.n	8000772 <TIM2_IRQHandler+0x18e>
 8000770:	e0e4      	b.n	800093c <TIM2_IRQHandler+0x358>
 8000772:	009a      	lsls	r2, r3, #2
 8000774:	4b70      	ldr	r3, [pc, #448]	@ (8000938 <TIM2_IRQHandler+0x354>)
 8000776:	18d3      	adds	r3, r2, r3
 8000778:	681b      	ldr	r3, [r3, #0]
 800077a:	469f      	mov	pc, r3
            case 0: LCD_command(0x01); LCD_command(0x80); break;
 800077c:	2001      	movs	r0, #1
 800077e:	f7ff fd69 	bl	8000254 <LCD_command>
 8000782:	2080      	movs	r0, #128	@ 0x80
 8000784:	f7ff fd66 	bl	8000254 <LCD_command>
 8000788:	e0d9      	b.n	800093e <TIM2_IRQHandler+0x35a>
            case 1: LCD_data('1'); break;
 800078a:	2031      	movs	r0, #49	@ 0x31
 800078c:	f7ff fda2 	bl	80002d4 <LCD_data>
 8000790:	e0d5      	b.n	800093e <TIM2_IRQHandler+0x35a>
            case 2: LCD_data('.'); break;
 8000792:	202e      	movs	r0, #46	@ 0x2e
 8000794:	f7ff fd9e 	bl	80002d4 <LCD_data>
 8000798:	e0d1      	b.n	800093e <TIM2_IRQHandler+0x35a>
            case 3: LCD_data('R'); break;
 800079a:	2052      	movs	r0, #82	@ 0x52
 800079c:	f7ff fd9a 	bl	80002d4 <LCD_data>
 80007a0:	e0cd      	b.n	800093e <TIM2_IRQHandler+0x35a>
            case 4: LCD_data('e'); break;
 80007a2:	2065      	movs	r0, #101	@ 0x65
 80007a4:	f7ff fd96 	bl	80002d4 <LCD_data>
 80007a8:	e0c9      	b.n	800093e <TIM2_IRQHandler+0x35a>
            case 5: LCD_data('t'); break;
 80007aa:	2074      	movs	r0, #116	@ 0x74
 80007ac:	f7ff fd92 	bl	80002d4 <LCD_data>
 80007b0:	e0c5      	b.n	800093e <TIM2_IRQHandler+0x35a>
            case 6: LCD_data('i'); break;
 80007b2:	2069      	movs	r0, #105	@ 0x69
 80007b4:	f7ff fd8e 	bl	80002d4 <LCD_data>
 80007b8:	e0c1      	b.n	800093e <TIM2_IRQHandler+0x35a>
            case 7: LCD_data('r'); break;
 80007ba:	2072      	movs	r0, #114	@ 0x72
 80007bc:	f7ff fd8a 	bl	80002d4 <LCD_data>
 80007c0:	e0bd      	b.n	800093e <TIM2_IRQHandler+0x35a>
            case 8: LCD_data('o'); break;
 80007c2:	206f      	movs	r0, #111	@ 0x6f
 80007c4:	f7ff fd86 	bl	80002d4 <LCD_data>
 80007c8:	e0b9      	b.n	800093e <TIM2_IRQHandler+0x35a>
            case 9: LCD_data(' '); break;
 80007ca:	2020      	movs	r0, #32
 80007cc:	f7ff fd82 	bl	80002d4 <LCD_data>
 80007d0:	e0b5      	b.n	800093e <TIM2_IRQHandler+0x35a>
            case 10: LCD_data('s'); break;
 80007d2:	2073      	movs	r0, #115	@ 0x73
 80007d4:	f7ff fd7e 	bl	80002d4 <LCD_data>
 80007d8:	e0b1      	b.n	800093e <TIM2_IRQHandler+0x35a>
            case 11: LCD_data('i'); break;
 80007da:	2069      	movs	r0, #105	@ 0x69
 80007dc:	f7ff fd7a 	bl	80002d4 <LCD_data>
 80007e0:	e0ad      	b.n	800093e <TIM2_IRQHandler+0x35a>
            case 12: LCD_data('n'); break;
 80007e2:	206e      	movs	r0, #110	@ 0x6e
 80007e4:	f7ff fd76 	bl	80002d4 <LCD_data>
 80007e8:	e0a9      	b.n	800093e <TIM2_IRQHandler+0x35a>
            case 13: LCD_data(' '); break;
 80007ea:	2020      	movs	r0, #32
 80007ec:	f7ff fd72 	bl	80002d4 <LCD_data>
 80007f0:	e0a5      	b.n	800093e <TIM2_IRQHandler+0x35a>
            case 14: LCD_data('P'); break;
 80007f2:	2050      	movs	r0, #80	@ 0x50
 80007f4:	f7ff fd6e 	bl	80002d4 <LCD_data>
 80007f8:	e0a1      	b.n	800093e <TIM2_IRQHandler+0x35a>
            case 15: LCD_data('I'); break;
 80007fa:	2049      	movs	r0, #73	@ 0x49
 80007fc:	f7ff fd6a 	bl	80002d4 <LCD_data>
 8000800:	e09d      	b.n	800093e <TIM2_IRQHandler+0x35a>
            case 16: LCD_data('N'); break;
 8000802:	204e      	movs	r0, #78	@ 0x4e
 8000804:	f7ff fd66 	bl	80002d4 <LCD_data>
 8000808:	e099      	b.n	800093e <TIM2_IRQHandler+0x35a>
            case 17: LCD_command(0x01); LCD_command(0x80); break;
 800080a:	2001      	movs	r0, #1
 800080c:	f7ff fd22 	bl	8000254 <LCD_command>
 8000810:	2080      	movs	r0, #128	@ 0x80
 8000812:	f7ff fd1f 	bl	8000254 <LCD_command>
 8000816:	e092      	b.n	800093e <TIM2_IRQHandler+0x35a>
            case 18: LCD_data('2'); break;
 8000818:	2032      	movs	r0, #50	@ 0x32
 800081a:	f7ff fd5b 	bl	80002d4 <LCD_data>
 800081e:	e08e      	b.n	800093e <TIM2_IRQHandler+0x35a>
            case 19: LCD_data('.'); break;
 8000820:	202e      	movs	r0, #46	@ 0x2e
 8000822:	f7ff fd57 	bl	80002d4 <LCD_data>
 8000826:	e08a      	b.n	800093e <TIM2_IRQHandler+0x35a>
            case 20: LCD_data('E'); break;
 8000828:	2045      	movs	r0, #69	@ 0x45
 800082a:	f7ff fd53 	bl	80002d4 <LCD_data>
 800082e:	e086      	b.n	800093e <TIM2_IRQHandler+0x35a>
            case 21: LCD_data('n'); break;
 8000830:	206e      	movs	r0, #110	@ 0x6e
 8000832:	f7ff fd4f 	bl	80002d4 <LCD_data>
 8000836:	e082      	b.n	800093e <TIM2_IRQHandler+0x35a>
            case 22: LCD_data('v'); break;
 8000838:	2076      	movs	r0, #118	@ 0x76
 800083a:	f7ff fd4b 	bl	80002d4 <LCD_data>
 800083e:	e07e      	b.n	800093e <TIM2_IRQHandler+0x35a>
            case 23: LCD_data('i'); break;
 8000840:	2069      	movs	r0, #105	@ 0x69
 8000842:	f7ff fd47 	bl	80002d4 <LCD_data>
 8000846:	e07a      	b.n	800093e <TIM2_IRQHandler+0x35a>
            case 24: LCD_data('o'); break;
 8000848:	206f      	movs	r0, #111	@ 0x6f
 800084a:	f7ff fd43 	bl	80002d4 <LCD_data>
 800084e:	e076      	b.n	800093e <TIM2_IRQHandler+0x35a>
            case 25: LCD_data(' '); break;
 8000850:	2020      	movs	r0, #32
 8000852:	f7ff fd3f 	bl	80002d4 <LCD_data>
 8000856:	e072      	b.n	800093e <TIM2_IRQHandler+0x35a>
            case 26: LCD_data('r'); break;
 8000858:	2072      	movs	r0, #114	@ 0x72
 800085a:	f7ff fd3b 	bl	80002d4 <LCD_data>
 800085e:	e06e      	b.n	800093e <TIM2_IRQHandler+0x35a>
            case 27: LCD_data('e'); break;
 8000860:	2065      	movs	r0, #101	@ 0x65
 8000862:	f7ff fd37 	bl	80002d4 <LCD_data>
 8000866:	e06a      	b.n	800093e <TIM2_IRQHandler+0x35a>
            case 28: LCD_data('m'); break;
 8000868:	206d      	movs	r0, #109	@ 0x6d
 800086a:	f7ff fd33 	bl	80002d4 <LCD_data>
 800086e:	e066      	b.n	800093e <TIM2_IRQHandler+0x35a>
            case 29: LCD_data('e'); break;
 8000870:	2065      	movs	r0, #101	@ 0x65
 8000872:	f7ff fd2f 	bl	80002d4 <LCD_data>
 8000876:	e062      	b.n	800093e <TIM2_IRQHandler+0x35a>
            case 30: LCD_data('s'); break;
 8000878:	2073      	movs	r0, #115	@ 0x73
 800087a:	f7ff fd2b 	bl	80002d4 <LCD_data>
 800087e:	e05e      	b.n	800093e <TIM2_IRQHandler+0x35a>
            case 31: LCD_data('a'); break;
 8000880:	2061      	movs	r0, #97	@ 0x61
 8000882:	f7ff fd27 	bl	80002d4 <LCD_data>
 8000886:	e05a      	b.n	800093e <TIM2_IRQHandler+0x35a>
            case 32: LCD_data('s'); break;
 8000888:	2073      	movs	r0, #115	@ 0x73
 800088a:	f7ff fd23 	bl	80002d4 <LCD_data>
 800088e:	e056      	b.n	800093e <TIM2_IRQHandler+0x35a>
            case 33: LCD_command(0x01); LCD_command(0x80); break;
 8000890:	2001      	movs	r0, #1
 8000892:	f7ff fcdf 	bl	8000254 <LCD_command>
 8000896:	2080      	movs	r0, #128	@ 0x80
 8000898:	f7ff fcdc 	bl	8000254 <LCD_command>
 800089c:	e04f      	b.n	800093e <TIM2_IRQHandler+0x35a>
            case 34: LCD_data('3'); break;
 800089e:	2033      	movs	r0, #51	@ 0x33
 80008a0:	f7ff fd18 	bl	80002d4 <LCD_data>
 80008a4:	e04b      	b.n	800093e <TIM2_IRQHandler+0x35a>
            case 35: LCD_data('.'); break;
 80008a6:	202e      	movs	r0, #46	@ 0x2e
 80008a8:	f7ff fd14 	bl	80002d4 <LCD_data>
 80008ac:	e047      	b.n	800093e <TIM2_IRQHandler+0x35a>
            case 36: LCD_data('C'); break;
 80008ae:	2043      	movs	r0, #67	@ 0x43
 80008b0:	f7ff fd10 	bl	80002d4 <LCD_data>
 80008b4:	e043      	b.n	800093e <TIM2_IRQHandler+0x35a>
            case 37: LCD_data('o'); break;
 80008b6:	206f      	movs	r0, #111	@ 0x6f
 80008b8:	f7ff fd0c 	bl	80002d4 <LCD_data>
 80008bc:	e03f      	b.n	800093e <TIM2_IRQHandler+0x35a>
            case 38: LCD_data('n'); break;
 80008be:	206e      	movs	r0, #110	@ 0x6e
 80008c0:	f7ff fd08 	bl	80002d4 <LCD_data>
 80008c4:	e03b      	b.n	800093e <TIM2_IRQHandler+0x35a>
            case 39: LCD_data('s'); break;
 80008c6:	2073      	movs	r0, #115	@ 0x73
 80008c8:	f7ff fd04 	bl	80002d4 <LCD_data>
 80008cc:	e037      	b.n	800093e <TIM2_IRQHandler+0x35a>
            case 40: LCD_data('u'); break;
 80008ce:	2075      	movs	r0, #117	@ 0x75
 80008d0:	f7ff fd00 	bl	80002d4 <LCD_data>
 80008d4:	e033      	b.n	800093e <TIM2_IRQHandler+0x35a>
            case 41: LCD_data('l'); break;
 80008d6:	206c      	movs	r0, #108	@ 0x6c
 80008d8:	f7ff fcfc 	bl	80002d4 <LCD_data>
 80008dc:	e02f      	b.n	800093e <TIM2_IRQHandler+0x35a>
            case 42: LCD_data('t'); break;
 80008de:	2074      	movs	r0, #116	@ 0x74
 80008e0:	f7ff fcf8 	bl	80002d4 <LCD_data>
 80008e4:	e02b      	b.n	800093e <TIM2_IRQHandler+0x35a>
            case 43: LCD_data('a'); break;
 80008e6:	2061      	movs	r0, #97	@ 0x61
 80008e8:	f7ff fcf4 	bl	80002d4 <LCD_data>
 80008ec:	e027      	b.n	800093e <TIM2_IRQHandler+0x35a>
            case 44: LCD_data(' '); break;
 80008ee:	2020      	movs	r0, #32
 80008f0:	f7ff fcf0 	bl	80002d4 <LCD_data>
 80008f4:	e023      	b.n	800093e <TIM2_IRQHandler+0x35a>
            case 45: LCD_data('s'); break;
 80008f6:	2073      	movs	r0, #115	@ 0x73
 80008f8:	f7ff fcec 	bl	80002d4 <LCD_data>
 80008fc:	e01f      	b.n	800093e <TIM2_IRQHandler+0x35a>
            case 46: LCD_data('a'); break;
 80008fe:	2061      	movs	r0, #97	@ 0x61
 8000900:	f7ff fce8 	bl	80002d4 <LCD_data>
 8000904:	e01b      	b.n	800093e <TIM2_IRQHandler+0x35a>
            case 47: LCD_data('l'); break;
 8000906:	206c      	movs	r0, #108	@ 0x6c
 8000908:	f7ff fce4 	bl	80002d4 <LCD_data>
 800090c:	e017      	b.n	800093e <TIM2_IRQHandler+0x35a>
            case 48: LCD_data('d'); break;
 800090e:	2064      	movs	r0, #100	@ 0x64
 8000910:	f7ff fce0 	bl	80002d4 <LCD_data>
 8000914:	e013      	b.n	800093e <TIM2_IRQHandler+0x35a>
            case 49: LCD_data('o'); break;
 8000916:	206f      	movs	r0, #111	@ 0x6f
 8000918:	f7ff fcdc 	bl	80002d4 <LCD_data>
 800091c:	e00f      	b.n	800093e <TIM2_IRQHandler+0x35a>
            case 50: lcd_step = 0; break; // Reiniciar al nuevo menú
 800091e:	4b04      	ldr	r3, [pc, #16]	@ (8000930 <TIM2_IRQHandler+0x34c>)
 8000920:	2200      	movs	r2, #0
 8000922:	701a      	strb	r2, [r3, #0]
 8000924:	e00b      	b.n	800093e <TIM2_IRQHandler+0x35a>
            default: break;
 8000926:	46c0      	nop			@ (mov r8, r8)
 8000928:	e009      	b.n	800093e <TIM2_IRQHandler+0x35a>
 800092a:	46c0      	nop			@ (mov r8, r8)
 800092c:	2000001e 	.word	0x2000001e
 8000930:	2000001d 	.word	0x2000001d
 8000934:	08000d80 	.word	0x08000d80
 8000938:	08000e14 	.word	0x08000e14
            default: break;
 800093c:	46c0      	nop			@ (mov r8, r8)
        }
    }

    lcd_step++; // ⚡ Incrementar SOLO al final
 800093e:	4b05      	ldr	r3, [pc, #20]	@ (8000954 <TIM2_IRQHandler+0x370>)
 8000940:	781b      	ldrb	r3, [r3, #0]
 8000942:	b2db      	uxtb	r3, r3
 8000944:	3301      	adds	r3, #1
 8000946:	b2da      	uxtb	r2, r3
 8000948:	4b02      	ldr	r3, [pc, #8]	@ (8000954 <TIM2_IRQHandler+0x370>)
 800094a:	701a      	strb	r2, [r3, #0]
}
 800094c:	46c0      	nop			@ (mov r8, r8)
 800094e:	46bd      	mov	sp, r7
 8000950:	bd80      	pop	{r7, pc}
 8000952:	46c0      	nop			@ (mov r8, r8)
 8000954:	2000001d 	.word	0x2000001d

08000958 <TIM21config>:



void TIM21config (void) {
 8000958:	b580      	push	{r7, lr}
 800095a:	af00      	add	r7, sp, #0

	RCC->APB2ENR |= (1<<2); //Se encuentra operando a 2ms
 800095c:	4b10      	ldr	r3, [pc, #64]	@ (80009a0 <TIM21config+0x48>)
 800095e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000960:	4b0f      	ldr	r3, [pc, #60]	@ (80009a0 <TIM21config+0x48>)
 8000962:	2104      	movs	r1, #4
 8000964:	430a      	orrs	r2, r1
 8000966:	635a      	str	r2, [r3, #52]	@ 0x34
	TIM21->PSC = 16000-1;
 8000968:	4b0e      	ldr	r3, [pc, #56]	@ (80009a4 <TIM21config+0x4c>)
 800096a:	4a0f      	ldr	r2, [pc, #60]	@ (80009a8 <TIM21config+0x50>)
 800096c:	629a      	str	r2, [r3, #40]	@ 0x28
	TIM21->ARR = 2-1;
 800096e:	4b0d      	ldr	r3, [pc, #52]	@ (80009a4 <TIM21config+0x4c>)
 8000970:	2201      	movs	r2, #1
 8000972:	62da      	str	r2, [r3, #44]	@ 0x2c
	TIM21->CNT = 0;
 8000974:	4b0b      	ldr	r3, [pc, #44]	@ (80009a4 <TIM21config+0x4c>)
 8000976:	2200      	movs	r2, #0
 8000978:	625a      	str	r2, [r3, #36]	@ 0x24
	TIM21->CR1 = (1<<0);
 800097a:	4b0a      	ldr	r3, [pc, #40]	@ (80009a4 <TIM21config+0x4c>)
 800097c:	2201      	movs	r2, #1
 800097e:	601a      	str	r2, [r3, #0]
	TIM21->DIER |= (1<<0);  //Enable Mode Interrupt
 8000980:	4b08      	ldr	r3, [pc, #32]	@ (80009a4 <TIM21config+0x4c>)
 8000982:	68da      	ldr	r2, [r3, #12]
 8000984:	4b07      	ldr	r3, [pc, #28]	@ (80009a4 <TIM21config+0x4c>)
 8000986:	2101      	movs	r1, #1
 8000988:	430a      	orrs	r2, r1
 800098a:	60da      	str	r2, [r3, #12]
	NVIC_SetPriority(TIM21_IRQn, 2);   /* más bajo que USART */
 800098c:	2102      	movs	r1, #2
 800098e:	2014      	movs	r0, #20
 8000990:	f7ff fbd4 	bl	800013c <__NVIC_SetPriority>
	NVIC_EnableIRQ(TIM21_IRQn);
 8000994:	2014      	movs	r0, #20
 8000996:	f7ff fbb7 	bl	8000108 <__NVIC_EnableIRQ>
}
 800099a:	46c0      	nop			@ (mov r8, r8)
 800099c:	46bd      	mov	sp, r7
 800099e:	bd80      	pop	{r7, pc}
 80009a0:	40021000 	.word	0x40021000
 80009a4:	40010800 	.word	0x40010800
 80009a8:	00003e7f 	.word	0x00003e7f

080009ac <TIM21_IRQHandler>:

void TIM21_IRQHandler() {
 80009ac:	b580      	push	{r7, lr}
 80009ae:	af00      	add	r7, sp, #0

	if (flag_received) {
 80009b0:	4b58      	ldr	r3, [pc, #352]	@ (8000b14 <TIM21_IRQHandler+0x168>)
 80009b2:	781b      	ldrb	r3, [r3, #0]
 80009b4:	b2db      	uxtb	r3, r3
 80009b6:	2b00      	cmp	r3, #0
 80009b8:	d040      	beq.n	8000a3c <TIM21_IRQHandler+0x90>
	        flag_received = 0;
 80009ba:	4b56      	ldr	r3, [pc, #344]	@ (8000b14 <TIM21_IRQHandler+0x168>)
 80009bc:	2200      	movs	r2, #0
 80009be:	701a      	strb	r2, [r3, #0]

	        if (current_menu == 0 && received_char == '3') {      /* entra sub-menú */
 80009c0:	4b55      	ldr	r3, [pc, #340]	@ (8000b18 <TIM21_IRQHandler+0x16c>)
 80009c2:	781b      	ldrb	r3, [r3, #0]
 80009c4:	b2db      	uxtb	r3, r3
 80009c6:	2b00      	cmp	r3, #0
 80009c8:	d11b      	bne.n	8000a02 <TIM21_IRQHandler+0x56>
 80009ca:	4b54      	ldr	r3, [pc, #336]	@ (8000b1c <TIM21_IRQHandler+0x170>)
 80009cc:	781b      	ldrb	r3, [r3, #0]
 80009ce:	b2db      	uxtb	r3, r3
 80009d0:	2b33      	cmp	r3, #51	@ 0x33
 80009d2:	d116      	bne.n	8000a02 <TIM21_IRQHandler+0x56>
	            current_menu = 1;
 80009d4:	4b50      	ldr	r3, [pc, #320]	@ (8000b18 <TIM21_IRQHandler+0x16c>)
 80009d6:	2201      	movs	r2, #1
 80009d8:	701a      	strb	r2, [r3, #0]
	            lcd_step     = 0;
 80009da:	4b51      	ldr	r3, [pc, #324]	@ (8000b20 <TIM21_IRQHandler+0x174>)
 80009dc:	2200      	movs	r2, #0
 80009de:	701a      	strb	r2, [r3, #0]
	            TIM2->CNT    = 0;
 80009e0:	2380      	movs	r3, #128	@ 0x80
 80009e2:	05db      	lsls	r3, r3, #23
 80009e4:	2200      	movs	r2, #0
 80009e6:	625a      	str	r2, [r3, #36]	@ 0x24
	            USART2_PutstringE("\r\n1. Retiro sin PIN");
 80009e8:	4b4e      	ldr	r3, [pc, #312]	@ (8000b24 <TIM21_IRQHandler+0x178>)
 80009ea:	0018      	movs	r0, r3
 80009ec:	f000 f91c 	bl	8000c28 <USART2_PutstringE>
	            USART2_PutstringE("2. Envio remesas");
 80009f0:	4b4d      	ldr	r3, [pc, #308]	@ (8000b28 <TIM21_IRQHandler+0x17c>)
 80009f2:	0018      	movs	r0, r3
 80009f4:	f000 f918 	bl	8000c28 <USART2_PutstringE>
	            USART2_PutstringE("3. Consulta saldo");
 80009f8:	4b4c      	ldr	r3, [pc, #304]	@ (8000b2c <TIM21_IRQHandler+0x180>)
 80009fa:	0018      	movs	r0, r3
 80009fc:	f000 f914 	bl	8000c28 <USART2_PutstringE>
	        if (current_menu == 0 && received_char == '3') {      /* entra sub-menú */
 8000a00:	e01d      	b.n	8000a3e <TIM21_IRQHandler+0x92>
	        }
	        else if (current_menu == 1) {                         /* ya en sub-menú */
 8000a02:	4b45      	ldr	r3, [pc, #276]	@ (8000b18 <TIM21_IRQHandler+0x16c>)
 8000a04:	781b      	ldrb	r3, [r3, #0]
 8000a06:	b2db      	uxtb	r3, r3
 8000a08:	2b01      	cmp	r3, #1
 8000a0a:	d117      	bne.n	8000a3c <TIM21_IRQHandler+0x90>
	            switch (received_char) {
 8000a0c:	4b43      	ldr	r3, [pc, #268]	@ (8000b1c <TIM21_IRQHandler+0x170>)
 8000a0e:	781b      	ldrb	r3, [r3, #0]
 8000a10:	b2db      	uxtb	r3, r3
 8000a12:	3b31      	subs	r3, #49	@ 0x31
 8000a14:	2b02      	cmp	r3, #2
 8000a16:	d812      	bhi.n	8000a3e <TIM21_IRQHandler+0x92>
	                case '1':
	                case '2':
	                case '3':
	                    GPIOA->ODR |= LED_PIN;    /* LED ON                */
 8000a18:	23a0      	movs	r3, #160	@ 0xa0
 8000a1a:	05db      	lsls	r3, r3, #23
 8000a1c:	695a      	ldr	r2, [r3, #20]
 8000a1e:	23a0      	movs	r3, #160	@ 0xa0
 8000a20:	05db      	lsls	r3, r3, #23
 8000a22:	2120      	movs	r1, #32
 8000a24:	430a      	orrs	r2, r1
 8000a26:	615a      	str	r2, [r3, #20]
	                    led_ticks   = 50;         /* 50 × 2 ms = 100 ms     */
 8000a28:	4b41      	ldr	r3, [pc, #260]	@ (8000b30 <TIM21_IRQHandler+0x184>)
 8000a2a:	2232      	movs	r2, #50	@ 0x32
 8000a2c:	701a      	strb	r2, [r3, #0]
	                    current_menu = 0;         /* volver al menú 0       */
 8000a2e:	4b3a      	ldr	r3, [pc, #232]	@ (8000b18 <TIM21_IRQHandler+0x16c>)
 8000a30:	2200      	movs	r2, #0
 8000a32:	701a      	strb	r2, [r3, #0]
	                    lcd_step     = 0;
 8000a34:	4b3a      	ldr	r3, [pc, #232]	@ (8000b20 <TIM21_IRQHandler+0x174>)
 8000a36:	2200      	movs	r2, #0
 8000a38:	701a      	strb	r2, [r3, #0]
	                    break;
 8000a3a:	e000      	b.n	8000a3e <TIM21_IRQHandler+0x92>
	                default: /* ignorar */;
 8000a3c:	46c0      	nop			@ (mov r8, r8)
	            }
	        }
	    }

	    /* ---------- temporizador LED ---------- */
	    if (led_ticks) {
 8000a3e:	4b3c      	ldr	r3, [pc, #240]	@ (8000b30 <TIM21_IRQHandler+0x184>)
 8000a40:	781b      	ldrb	r3, [r3, #0]
 8000a42:	b2db      	uxtb	r3, r3
 8000a44:	2b00      	cmp	r3, #0
 8000a46:	d011      	beq.n	8000a6c <TIM21_IRQHandler+0xc0>
	        if (--led_ticks == 0)
 8000a48:	4b39      	ldr	r3, [pc, #228]	@ (8000b30 <TIM21_IRQHandler+0x184>)
 8000a4a:	781b      	ldrb	r3, [r3, #0]
 8000a4c:	b2db      	uxtb	r3, r3
 8000a4e:	3b01      	subs	r3, #1
 8000a50:	b2db      	uxtb	r3, r3
 8000a52:	4a37      	ldr	r2, [pc, #220]	@ (8000b30 <TIM21_IRQHandler+0x184>)
 8000a54:	1c19      	adds	r1, r3, #0
 8000a56:	7011      	strb	r1, [r2, #0]
 8000a58:	2b00      	cmp	r3, #0
 8000a5a:	d107      	bne.n	8000a6c <TIM21_IRQHandler+0xc0>
	            GPIOA->ODR &= ~LED_PIN;            /* LED OFF */
 8000a5c:	23a0      	movs	r3, #160	@ 0xa0
 8000a5e:	05db      	lsls	r3, r3, #23
 8000a60:	695a      	ldr	r2, [r3, #20]
 8000a62:	23a0      	movs	r3, #160	@ 0xa0
 8000a64:	05db      	lsls	r3, r3, #23
 8000a66:	2120      	movs	r1, #32
 8000a68:	438a      	bics	r2, r1
 8000a6a:	615a      	str	r2, [r3, #20]
	    }

	GPIOB->ODR = 0x0000;   // Apagar los displays antes de escribir
 8000a6c:	4b31      	ldr	r3, [pc, #196]	@ (8000b34 <TIM21_IRQHandler+0x188>)
 8000a6e:	2200      	movs	r2, #0
 8000a70:	615a      	str	r2, [r3, #20]
    switch (display_index) {
 8000a72:	4b31      	ldr	r3, [pc, #196]	@ (8000b38 <TIM21_IRQHandler+0x18c>)
 8000a74:	781b      	ldrb	r3, [r3, #0]
 8000a76:	b2db      	uxtb	r3, r3
 8000a78:	2b05      	cmp	r3, #5
 8000a7a:	d82f      	bhi.n	8000adc <TIM21_IRQHandler+0x130>
 8000a7c:	009a      	lsls	r2, r3, #2
 8000a7e:	4b2f      	ldr	r3, [pc, #188]	@ (8000b3c <TIM21_IRQHandler+0x190>)
 8000a80:	18d3      	adds	r3, r2, r3
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	469f      	mov	pc, r3
        case 0:
            GPIOB->ODR |= NUM_0 | (1<<7);  // Número 4 en display 1
 8000a86:	4b2b      	ldr	r3, [pc, #172]	@ (8000b34 <TIM21_IRQHandler+0x188>)
 8000a88:	695a      	ldr	r2, [r3, #20]
 8000a8a:	4b2a      	ldr	r3, [pc, #168]	@ (8000b34 <TIM21_IRQHandler+0x188>)
 8000a8c:	21bf      	movs	r1, #191	@ 0xbf
 8000a8e:	430a      	orrs	r2, r1
 8000a90:	615a      	str	r2, [r3, #20]
            break;
 8000a92:	e027      	b.n	8000ae4 <TIM21_IRQHandler+0x138>
        case 1:
            GPIOB->ODR |= NUM_0 | (1<<8);  // Número 0 en display 2
 8000a94:	4b27      	ldr	r3, [pc, #156]	@ (8000b34 <TIM21_IRQHandler+0x188>)
 8000a96:	695a      	ldr	r2, [r3, #20]
 8000a98:	4b26      	ldr	r3, [pc, #152]	@ (8000b34 <TIM21_IRQHandler+0x188>)
 8000a9a:	2140      	movs	r1, #64	@ 0x40
 8000a9c:	31ff      	adds	r1, #255	@ 0xff
 8000a9e:	430a      	orrs	r2, r1
 8000aa0:	615a      	str	r2, [r3, #20]
            break;
 8000aa2:	e01f      	b.n	8000ae4 <TIM21_IRQHandler+0x138>
        case 2:
            GPIOB->ODR |= NUM_0 | (1<<9);  // Número 4 en display 3
 8000aa4:	4b23      	ldr	r3, [pc, #140]	@ (8000b34 <TIM21_IRQHandler+0x188>)
 8000aa6:	695a      	ldr	r2, [r3, #20]
 8000aa8:	4b22      	ldr	r3, [pc, #136]	@ (8000b34 <TIM21_IRQHandler+0x188>)
 8000aaa:	4925      	ldr	r1, [pc, #148]	@ (8000b40 <TIM21_IRQHandler+0x194>)
 8000aac:	430a      	orrs	r2, r1
 8000aae:	615a      	str	r2, [r3, #20]
            break;
 8000ab0:	e018      	b.n	8000ae4 <TIM21_IRQHandler+0x138>
        case 3:
            GPIOB->ODR |= NUM_0 | (1<<10); // Número 5 en display 4
 8000ab2:	4b20      	ldr	r3, [pc, #128]	@ (8000b34 <TIM21_IRQHandler+0x188>)
 8000ab4:	695a      	ldr	r2, [r3, #20]
 8000ab6:	4b1f      	ldr	r3, [pc, #124]	@ (8000b34 <TIM21_IRQHandler+0x188>)
 8000ab8:	4922      	ldr	r1, [pc, #136]	@ (8000b44 <TIM21_IRQHandler+0x198>)
 8000aba:	430a      	orrs	r2, r1
 8000abc:	615a      	str	r2, [r3, #20]
            break;
 8000abe:	e011      	b.n	8000ae4 <TIM21_IRQHandler+0x138>
        case 4:
            GPIOB->ODR |= NUM_0 | (1<<11); // Número 5 en display 5
 8000ac0:	4b1c      	ldr	r3, [pc, #112]	@ (8000b34 <TIM21_IRQHandler+0x188>)
 8000ac2:	695a      	ldr	r2, [r3, #20]
 8000ac4:	4b1b      	ldr	r3, [pc, #108]	@ (8000b34 <TIM21_IRQHandler+0x188>)
 8000ac6:	4920      	ldr	r1, [pc, #128]	@ (8000b48 <TIM21_IRQHandler+0x19c>)
 8000ac8:	430a      	orrs	r2, r1
 8000aca:	615a      	str	r2, [r3, #20]
            break;
 8000acc:	e00a      	b.n	8000ae4 <TIM21_IRQHandler+0x138>
        case 5:
            GPIOB->ODR |= NUM_0 | (1<<12); // Número 5 en display 6
 8000ace:	4b19      	ldr	r3, [pc, #100]	@ (8000b34 <TIM21_IRQHandler+0x188>)
 8000ad0:	695a      	ldr	r2, [r3, #20]
 8000ad2:	4b18      	ldr	r3, [pc, #96]	@ (8000b34 <TIM21_IRQHandler+0x188>)
 8000ad4:	491d      	ldr	r1, [pc, #116]	@ (8000b4c <TIM21_IRQHandler+0x1a0>)
 8000ad6:	430a      	orrs	r2, r1
 8000ad8:	615a      	str	r2, [r3, #20]
            break;
 8000ada:	e003      	b.n	8000ae4 <TIM21_IRQHandler+0x138>
        default:
            display_index = 0; // Reiniciar ciclo
 8000adc:	4b16      	ldr	r3, [pc, #88]	@ (8000b38 <TIM21_IRQHandler+0x18c>)
 8000ade:	2200      	movs	r2, #0
 8000ae0:	701a      	strb	r2, [r3, #0]
            return;
 8000ae2:	e014      	b.n	8000b0e <TIM21_IRQHandler+0x162>
    }

    display_index++;
 8000ae4:	4b14      	ldr	r3, [pc, #80]	@ (8000b38 <TIM21_IRQHandler+0x18c>)
 8000ae6:	781b      	ldrb	r3, [r3, #0]
 8000ae8:	b2db      	uxtb	r3, r3
 8000aea:	3301      	adds	r3, #1
 8000aec:	b2da      	uxtb	r2, r3
 8000aee:	4b12      	ldr	r3, [pc, #72]	@ (8000b38 <TIM21_IRQHandler+0x18c>)
 8000af0:	701a      	strb	r2, [r3, #0]
    if (display_index > 5) display_index = 0; // Ciclar
 8000af2:	4b11      	ldr	r3, [pc, #68]	@ (8000b38 <TIM21_IRQHandler+0x18c>)
 8000af4:	781b      	ldrb	r3, [r3, #0]
 8000af6:	b2db      	uxtb	r3, r3
 8000af8:	2b05      	cmp	r3, #5
 8000afa:	d902      	bls.n	8000b02 <TIM21_IRQHandler+0x156>
 8000afc:	4b0e      	ldr	r3, [pc, #56]	@ (8000b38 <TIM21_IRQHandler+0x18c>)
 8000afe:	2200      	movs	r2, #0
 8000b00:	701a      	strb	r2, [r3, #0]
	TIM21->SR &= ~(1<<0);  //Clear UIF flag
 8000b02:	4b13      	ldr	r3, [pc, #76]	@ (8000b50 <TIM21_IRQHandler+0x1a4>)
 8000b04:	691a      	ldr	r2, [r3, #16]
 8000b06:	4b12      	ldr	r3, [pc, #72]	@ (8000b50 <TIM21_IRQHandler+0x1a4>)
 8000b08:	2101      	movs	r1, #1
 8000b0a:	438a      	bics	r2, r1
 8000b0c:	611a      	str	r2, [r3, #16]

}
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	bd80      	pop	{r7, pc}
 8000b12:	46c0      	nop			@ (mov r8, r8)
 8000b14:	2000001f 	.word	0x2000001f
 8000b18:	2000001e 	.word	0x2000001e
 8000b1c:	20000020 	.word	0x20000020
 8000b20:	2000001d 	.word	0x2000001d
 8000b24:	08000d44 	.word	0x08000d44
 8000b28:	08000d58 	.word	0x08000d58
 8000b2c:	08000d6c 	.word	0x08000d6c
 8000b30:	20000021 	.word	0x20000021
 8000b34:	50000400 	.word	0x50000400
 8000b38:	2000001c 	.word	0x2000001c
 8000b3c:	08000ee0 	.word	0x08000ee0
 8000b40:	0000023f 	.word	0x0000023f
 8000b44:	0000043f 	.word	0x0000043f
 8000b48:	0000083f 	.word	0x0000083f
 8000b4c:	0000103f 	.word	0x0000103f
 8000b50:	40010800 	.word	0x40010800

08000b54 <USART2Init>:


//Funciones de USART2
void USART2Init(void) {
 8000b54:	b580      	push	{r7, lr}
 8000b56:	af00      	add	r7, sp, #0
	RCC->APB1ENR |= (1<<17); //USART CLK ENABLE
 8000b58:	4b26      	ldr	r3, [pc, #152]	@ (8000bf4 <USART2Init+0xa0>)
 8000b5a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8000b5c:	4b25      	ldr	r3, [pc, #148]	@ (8000bf4 <USART2Init+0xa0>)
 8000b5e:	2180      	movs	r1, #128	@ 0x80
 8000b60:	0289      	lsls	r1, r1, #10
 8000b62:	430a      	orrs	r2, r1
 8000b64:	639a      	str	r2, [r3, #56]	@ 0x38
	RCC->IOPENR |= (1<<0); //GPIOA CLK ENABLE
 8000b66:	4b23      	ldr	r3, [pc, #140]	@ (8000bf4 <USART2Init+0xa0>)
 8000b68:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000b6a:	4b22      	ldr	r3, [pc, #136]	@ (8000bf4 <USART2Init+0xa0>)
 8000b6c:	2101      	movs	r1, #1
 8000b6e:	430a      	orrs	r2, r1
 8000b70:	62da      	str	r2, [r3, #44]	@ 0x2c
	//ALTERNATE FUNCTION PA2(TX) Y PA3(RX)
	GPIOA->MODER &= ~(1<<4);  //PA2 as AF
 8000b72:	23a0      	movs	r3, #160	@ 0xa0
 8000b74:	05db      	lsls	r3, r3, #23
 8000b76:	681a      	ldr	r2, [r3, #0]
 8000b78:	23a0      	movs	r3, #160	@ 0xa0
 8000b7a:	05db      	lsls	r3, r3, #23
 8000b7c:	2110      	movs	r1, #16
 8000b7e:	438a      	bics	r2, r1
 8000b80:	601a      	str	r2, [r3, #0]
	GPIOA->MODER &= ~(1<<6);  //PA3 as AF
 8000b82:	23a0      	movs	r3, #160	@ 0xa0
 8000b84:	05db      	lsls	r3, r3, #23
 8000b86:	681a      	ldr	r2, [r3, #0]
 8000b88:	23a0      	movs	r3, #160	@ 0xa0
 8000b8a:	05db      	lsls	r3, r3, #23
 8000b8c:	2140      	movs	r1, #64	@ 0x40
 8000b8e:	438a      	bics	r2, r1
 8000b90:	601a      	str	r2, [r3, #0]
	GPIOA->AFR[0] |= (1<<10); //PA2 AS  AF4
 8000b92:	23a0      	movs	r3, #160	@ 0xa0
 8000b94:	05db      	lsls	r3, r3, #23
 8000b96:	6a1a      	ldr	r2, [r3, #32]
 8000b98:	23a0      	movs	r3, #160	@ 0xa0
 8000b9a:	05db      	lsls	r3, r3, #23
 8000b9c:	2180      	movs	r1, #128	@ 0x80
 8000b9e:	00c9      	lsls	r1, r1, #3
 8000ba0:	430a      	orrs	r2, r1
 8000ba2:	621a      	str	r2, [r3, #32]
	GPIOA->AFR[0] |= (1<<14); //PA3 AS AF4
 8000ba4:	23a0      	movs	r3, #160	@ 0xa0
 8000ba6:	05db      	lsls	r3, r3, #23
 8000ba8:	6a1a      	ldr	r2, [r3, #32]
 8000baa:	23a0      	movs	r3, #160	@ 0xa0
 8000bac:	05db      	lsls	r3, r3, #23
 8000bae:	2180      	movs	r1, #128	@ 0x80
 8000bb0:	01c9      	lsls	r1, r1, #7
 8000bb2:	430a      	orrs	r2, r1
 8000bb4:	621a      	str	r2, [r3, #32]
	USART2->BRR = 139; //USART2 @115200 bps with 16Mhz clock HSi
 8000bb6:	4b10      	ldr	r3, [pc, #64]	@ (8000bf8 <USART2Init+0xa4>)
 8000bb8:	228b      	movs	r2, #139	@ 0x8b
 8000bba:	60da      	str	r2, [r3, #12]
	USART2->CR1 = 0;     // Apagar USART2 primero
 8000bbc:	4b0e      	ldr	r3, [pc, #56]	@ (8000bf8 <USART2Init+0xa4>)
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	601a      	str	r2, [r3, #0]
	//USART2->ICR = 0xFFFFFFFF; // Limpiar cualquier error previo
	USART2->CR1 |= (1<<2) | (1<<3); // Habilitar RX y TX
 8000bc2:	4b0d      	ldr	r3, [pc, #52]	@ (8000bf8 <USART2Init+0xa4>)
 8000bc4:	681a      	ldr	r2, [r3, #0]
 8000bc6:	4b0c      	ldr	r3, [pc, #48]	@ (8000bf8 <USART2Init+0xa4>)
 8000bc8:	210c      	movs	r1, #12
 8000bca:	430a      	orrs	r2, r1
 8000bcc:	601a      	str	r2, [r3, #0]
	USART2->CR1 |= (1<<5);          // Habilitar interrupción por RXNE
 8000bce:	4b0a      	ldr	r3, [pc, #40]	@ (8000bf8 <USART2Init+0xa4>)
 8000bd0:	681a      	ldr	r2, [r3, #0]
 8000bd2:	4b09      	ldr	r3, [pc, #36]	@ (8000bf8 <USART2Init+0xa4>)
 8000bd4:	2120      	movs	r1, #32
 8000bd6:	430a      	orrs	r2, r1
 8000bd8:	601a      	str	r2, [r3, #0]
	USART2->CR1 |= (1<<0);          // Habilitar USART2
 8000bda:	4b07      	ldr	r3, [pc, #28]	@ (8000bf8 <USART2Init+0xa4>)
 8000bdc:	681a      	ldr	r2, [r3, #0]
 8000bde:	4b06      	ldr	r3, [pc, #24]	@ (8000bf8 <USART2Init+0xa4>)
 8000be0:	2101      	movs	r1, #1
 8000be2:	430a      	orrs	r2, r1
 8000be4:	601a      	str	r2, [r3, #0]
	NVIC_EnableIRQ(USART2_IRQn);    // Habilitar interrupción en NVIC*/
 8000be6:	201c      	movs	r0, #28
 8000be8:	f7ff fa8e 	bl	8000108 <__NVIC_EnableIRQ>

}
 8000bec:	46c0      	nop			@ (mov r8, r8)
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	bd80      	pop	{r7, pc}
 8000bf2:	46c0      	nop			@ (mov r8, r8)
 8000bf4:	40021000 	.word	0x40021000
 8000bf8:	40004400 	.word	0x40004400

08000bfc <USART2_write>:

void USART2_write (uint8_t ch)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	b082      	sub	sp, #8
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	0002      	movs	r2, r0
 8000c04:	1dfb      	adds	r3, r7, #7
 8000c06:	701a      	strb	r2, [r3, #0]
	while (!(USART2->ISR & 0X0080)){}
 8000c08:	46c0      	nop			@ (mov r8, r8)
 8000c0a:	4b06      	ldr	r3, [pc, #24]	@ (8000c24 <USART2_write+0x28>)
 8000c0c:	69db      	ldr	r3, [r3, #28]
 8000c0e:	2280      	movs	r2, #128	@ 0x80
 8000c10:	4013      	ands	r3, r2
 8000c12:	d0fa      	beq.n	8000c0a <USART2_write+0xe>
	USART2->TDR = ch;
 8000c14:	4b03      	ldr	r3, [pc, #12]	@ (8000c24 <USART2_write+0x28>)
 8000c16:	1dfa      	adds	r2, r7, #7
 8000c18:	7812      	ldrb	r2, [r2, #0]
 8000c1a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8000c1c:	46c0      	nop			@ (mov r8, r8)
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	b002      	add	sp, #8
 8000c22:	bd80      	pop	{r7, pc}
 8000c24:	40004400 	.word	0x40004400

08000c28 <USART2_PutstringE>:
		USART2_write(*stringptr);
		stringptr++;
	}
}

void USART2_PutstringE(uint8_t* stringptr) {
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	b082      	sub	sp, #8
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	6078      	str	r0, [r7, #4]
	while(*stringptr != 0x00) {
 8000c30:	e007      	b.n	8000c42 <USART2_PutstringE+0x1a>
		USART2_write(*stringptr);
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	781b      	ldrb	r3, [r3, #0]
 8000c36:	0018      	movs	r0, r3
 8000c38:	f7ff ffe0 	bl	8000bfc <USART2_write>
		stringptr++;
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	3301      	adds	r3, #1
 8000c40:	607b      	str	r3, [r7, #4]
	while(*stringptr != 0x00) {
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	781b      	ldrb	r3, [r3, #0]
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	d1f3      	bne.n	8000c32 <USART2_PutstringE+0xa>
	}
	USART2_write(0x0A);
 8000c4a:	200a      	movs	r0, #10
 8000c4c:	f7ff ffd6 	bl	8000bfc <USART2_write>
	USART2_write(0x0D);
 8000c50:	200d      	movs	r0, #13
 8000c52:	f7ff ffd3 	bl	8000bfc <USART2_write>
}
 8000c56:	46c0      	nop			@ (mov r8, r8)
 8000c58:	46bd      	mov	sp, r7
 8000c5a:	b002      	add	sp, #8
 8000c5c:	bd80      	pop	{r7, pc}
	...

08000c60 <USART2_IRQHandler>:

void USART2_IRQHandler(void) {
 8000c60:	b580      	push	{r7, lr}
 8000c62:	af00      	add	r7, sp, #0
    if (USART2->ISR & (1<<5)) { // RXNE = 1
 8000c64:	4b07      	ldr	r3, [pc, #28]	@ (8000c84 <USART2_IRQHandler+0x24>)
 8000c66:	69db      	ldr	r3, [r3, #28]
 8000c68:	2220      	movs	r2, #32
 8000c6a:	4013      	ands	r3, r2
 8000c6c:	d007      	beq.n	8000c7e <USART2_IRQHandler+0x1e>
        received_char = USART2->RDR; // Leer rápido
 8000c6e:	4b05      	ldr	r3, [pc, #20]	@ (8000c84 <USART2_IRQHandler+0x24>)
 8000c70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000c72:	b2da      	uxtb	r2, r3
 8000c74:	4b04      	ldr	r3, [pc, #16]	@ (8000c88 <USART2_IRQHandler+0x28>)
 8000c76:	701a      	strb	r2, [r3, #0]
        flag_received = 1;           // Señalar que recibimos algo
 8000c78:	4b04      	ldr	r3, [pc, #16]	@ (8000c8c <USART2_IRQHandler+0x2c>)
 8000c7a:	2201      	movs	r2, #1
 8000c7c:	701a      	strb	r2, [r3, #0]
	    if (USART2->ISR & USART_ISR_RXNE) {
	        received_char = USART2->RDR;
	        flag_received = 1;
	    }*/

}
 8000c7e:	46c0      	nop			@ (mov r8, r8)
 8000c80:	46bd      	mov	sp, r7
 8000c82:	bd80      	pop	{r7, pc}
 8000c84:	40004400 	.word	0x40004400
 8000c88:	20000020 	.word	0x20000020
 8000c8c:	2000001f 	.word	0x2000001f

08000c90 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000c90:	480d      	ldr	r0, [pc, #52]	@ (8000cc8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000c92:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000c94:	e000      	b.n	8000c98 <Reset_Handler+0x8>
 8000c96:	bf00      	nop

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c98:	480c      	ldr	r0, [pc, #48]	@ (8000ccc <LoopForever+0x6>)
  ldr r1, =_edata
 8000c9a:	490d      	ldr	r1, [pc, #52]	@ (8000cd0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000c9c:	4a0d      	ldr	r2, [pc, #52]	@ (8000cd4 <LoopForever+0xe>)
  movs r3, #0
 8000c9e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ca0:	e002      	b.n	8000ca8 <LoopCopyDataInit>

08000ca2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ca2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ca4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ca6:	3304      	adds	r3, #4

08000ca8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ca8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000caa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000cac:	d3f9      	bcc.n	8000ca2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000cae:	4a0a      	ldr	r2, [pc, #40]	@ (8000cd8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000cb0:	4c0a      	ldr	r4, [pc, #40]	@ (8000cdc <LoopForever+0x16>)
  movs r3, #0
 8000cb2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000cb4:	e001      	b.n	8000cba <LoopFillZerobss>

08000cb6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000cb6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000cb8:	3204      	adds	r2, #4

08000cba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000cba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000cbc:	d3fb      	bcc.n	8000cb6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000cbe:	f000 f811 	bl	8000ce4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000cc2:	f7ff faa9 	bl	8000218 <main>

08000cc6 <LoopForever>:

LoopForever:
  b LoopForever
 8000cc6:	e7fe      	b.n	8000cc6 <LoopForever>
  ldr   r0, =_estack
 8000cc8:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8000ccc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000cd0:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000cd4:	08000f00 	.word	0x08000f00
  ldr r2, =_sbss
 8000cd8:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000cdc:	20000024 	.word	0x20000024

08000ce0 <ADC_COMP_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000ce0:	e7fe      	b.n	8000ce0 <ADC_COMP_IRQHandler>
	...

08000ce4 <__libc_init_array>:
 8000ce4:	b570      	push	{r4, r5, r6, lr}
 8000ce6:	2600      	movs	r6, #0
 8000ce8:	4c0c      	ldr	r4, [pc, #48]	@ (8000d1c <__libc_init_array+0x38>)
 8000cea:	4d0d      	ldr	r5, [pc, #52]	@ (8000d20 <__libc_init_array+0x3c>)
 8000cec:	1b64      	subs	r4, r4, r5
 8000cee:	10a4      	asrs	r4, r4, #2
 8000cf0:	42a6      	cmp	r6, r4
 8000cf2:	d109      	bne.n	8000d08 <__libc_init_array+0x24>
 8000cf4:	2600      	movs	r6, #0
 8000cf6:	f000 f819 	bl	8000d2c <_init>
 8000cfa:	4c0a      	ldr	r4, [pc, #40]	@ (8000d24 <__libc_init_array+0x40>)
 8000cfc:	4d0a      	ldr	r5, [pc, #40]	@ (8000d28 <__libc_init_array+0x44>)
 8000cfe:	1b64      	subs	r4, r4, r5
 8000d00:	10a4      	asrs	r4, r4, #2
 8000d02:	42a6      	cmp	r6, r4
 8000d04:	d105      	bne.n	8000d12 <__libc_init_array+0x2e>
 8000d06:	bd70      	pop	{r4, r5, r6, pc}
 8000d08:	00b3      	lsls	r3, r6, #2
 8000d0a:	58eb      	ldr	r3, [r5, r3]
 8000d0c:	4798      	blx	r3
 8000d0e:	3601      	adds	r6, #1
 8000d10:	e7ee      	b.n	8000cf0 <__libc_init_array+0xc>
 8000d12:	00b3      	lsls	r3, r6, #2
 8000d14:	58eb      	ldr	r3, [r5, r3]
 8000d16:	4798      	blx	r3
 8000d18:	3601      	adds	r6, #1
 8000d1a:	e7f2      	b.n	8000d02 <__libc_init_array+0x1e>
 8000d1c:	08000ef8 	.word	0x08000ef8
 8000d20:	08000ef8 	.word	0x08000ef8
 8000d24:	08000efc 	.word	0x08000efc
 8000d28:	08000ef8 	.word	0x08000ef8

08000d2c <_init>:
 8000d2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000d2e:	46c0      	nop			@ (mov r8, r8)
 8000d30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000d32:	bc08      	pop	{r3}
 8000d34:	469e      	mov	lr, r3
 8000d36:	4770      	bx	lr

08000d38 <_fini>:
 8000d38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000d3a:	46c0      	nop			@ (mov r8, r8)
 8000d3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000d3e:	bc08      	pop	{r3}
 8000d40:	469e      	mov	lr, r3
 8000d42:	4770      	bx	lr
