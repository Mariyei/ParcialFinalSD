
ParcialFinalSD.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000940  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a8  08000a00  08000a00  00001a00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000aa8  08000aa8  00001ab0  2**0
                  CONTENTS
  4 .ARM          00000000  08000aa8  08000aa8  00001ab0  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000aa8  08000ab0  00001ab0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000aa8  08000aa8  00001aa8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000aac  08000aac  00001aac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000000  20000000  20000000  00001ab0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  20000000  08000ab0  00002000  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000020  08000ab0  00002020  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00001ab0  2**0
                  CONTENTS, READONLY
 12 .debug_info   000007ac  00000000  00000000  00001ad8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000233  00000000  00000000  00002284  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000098  00000000  00000000  000024b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000006d  00000000  00000000  00002550  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000b431  00000000  00000000  000025bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000009db  00000000  00000000  0000d9ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0003cf9c  00000000  00000000  0000e3c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0004b365  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000184  00000000  00000000  0004b3a8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000065  00000000  00000000  0004b52c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000000 	.word	0x20000000
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080009e8 	.word	0x080009e8

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000004 	.word	0x20000004
 8000104:	080009e8 	.word	0x080009e8

08000108 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000108:	b580      	push	{r7, lr}
 800010a:	b082      	sub	sp, #8
 800010c:	af00      	add	r7, sp, #0
 800010e:	0002      	movs	r2, r0
 8000110:	1dfb      	adds	r3, r7, #7
 8000112:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000114:	1dfb      	adds	r3, r7, #7
 8000116:	781b      	ldrb	r3, [r3, #0]
 8000118:	2b7f      	cmp	r3, #127	@ 0x7f
 800011a:	d809      	bhi.n	8000130 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800011c:	1dfb      	adds	r3, r7, #7
 800011e:	781b      	ldrb	r3, [r3, #0]
 8000120:	001a      	movs	r2, r3
 8000122:	231f      	movs	r3, #31
 8000124:	401a      	ands	r2, r3
 8000126:	4b04      	ldr	r3, [pc, #16]	@ (8000138 <__NVIC_EnableIRQ+0x30>)
 8000128:	2101      	movs	r1, #1
 800012a:	4091      	lsls	r1, r2
 800012c:	000a      	movs	r2, r1
 800012e:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8000130:	46c0      	nop			@ (mov r8, r8)
 8000132:	46bd      	mov	sp, r7
 8000134:	b002      	add	sp, #8
 8000136:	bd80      	pop	{r7, pc}
 8000138:	e000e100 	.word	0xe000e100

0800013c <delay_ms>:

//Variables globales
volatile uint8_t lcd_step = 0;


void delay_ms(uint32_t n) {
 800013c:	b580      	push	{r7, lr}
 800013e:	b084      	sub	sp, #16
 8000140:	af00      	add	r7, sp, #0
 8000142:	6078      	str	r0, [r7, #4]
    for (uint32_t i = 0; i < n; i++) {
 8000144:	2300      	movs	r3, #0
 8000146:	60fb      	str	r3, [r7, #12]
 8000148:	e024      	b.n	8000194 <delay_ms+0x58>
        TIM2->CNT = 0;                // Reiniciar contador
 800014a:	2380      	movs	r3, #128	@ 0x80
 800014c:	05db      	lsls	r3, r3, #23
 800014e:	2200      	movs	r2, #0
 8000150:	625a      	str	r2, [r3, #36]	@ 0x24
        while (!(TIM2->SR & 0x0001));  // Esperar que UIF=1
 8000152:	46c0      	nop			@ (mov r8, r8)
 8000154:	2380      	movs	r3, #128	@ 0x80
 8000156:	05db      	lsls	r3, r3, #23
 8000158:	691b      	ldr	r3, [r3, #16]
 800015a:	2201      	movs	r2, #1
 800015c:	4013      	ands	r3, r2
 800015e:	d0f9      	beq.n	8000154 <delay_ms+0x18>
        TIM2->SR &= ~(1<<0);           // Limpiar UIF
 8000160:	2380      	movs	r3, #128	@ 0x80
 8000162:	05db      	lsls	r3, r3, #23
 8000164:	691a      	ldr	r2, [r3, #16]
 8000166:	2380      	movs	r3, #128	@ 0x80
 8000168:	05db      	lsls	r3, r3, #23
 800016a:	2101      	movs	r1, #1
 800016c:	438a      	bics	r2, r1
 800016e:	611a      	str	r2, [r3, #16]
        while (!(TIM2->SR & 0x0001));  // Esperar otra vez
 8000170:	46c0      	nop			@ (mov r8, r8)
 8000172:	2380      	movs	r3, #128	@ 0x80
 8000174:	05db      	lsls	r3, r3, #23
 8000176:	691b      	ldr	r3, [r3, #16]
 8000178:	2201      	movs	r2, #1
 800017a:	4013      	ands	r3, r2
 800017c:	d0f9      	beq.n	8000172 <delay_ms+0x36>
        TIM2->SR &= ~(1<<0);           // Limpiar UIF
 800017e:	2380      	movs	r3, #128	@ 0x80
 8000180:	05db      	lsls	r3, r3, #23
 8000182:	691a      	ldr	r2, [r3, #16]
 8000184:	2380      	movs	r3, #128	@ 0x80
 8000186:	05db      	lsls	r3, r3, #23
 8000188:	2101      	movs	r1, #1
 800018a:	438a      	bics	r2, r1
 800018c:	611a      	str	r2, [r3, #16]
    for (uint32_t i = 0; i < n; i++) {
 800018e:	68fb      	ldr	r3, [r7, #12]
 8000190:	3301      	adds	r3, #1
 8000192:	60fb      	str	r3, [r7, #12]
 8000194:	68fa      	ldr	r2, [r7, #12]
 8000196:	687b      	ldr	r3, [r7, #4]
 8000198:	429a      	cmp	r2, r3
 800019a:	d3d6      	bcc.n	800014a <delay_ms+0xe>
    }
}
 800019c:	46c0      	nop			@ (mov r8, r8)
 800019e:	46c0      	nop			@ (mov r8, r8)
 80001a0:	46bd      	mov	sp, r7
 80001a2:	b004      	add	sp, #16
 80001a4:	bd80      	pop	{r7, pc}
	...

080001a8 <main>:



int main(void) {
 80001a8:	b580      	push	{r7, lr}
 80001aa:	af00      	add	r7, sp, #0
	//1. Habilitar HSI 16 MHz como SYSCLK
    RCC->CR |= (1<<0);   // HSI ON
 80001ac:	4b0b      	ldr	r3, [pc, #44]	@ (80001dc <main+0x34>)
 80001ae:	681a      	ldr	r2, [r3, #0]
 80001b0:	4b0a      	ldr	r3, [pc, #40]	@ (80001dc <main+0x34>)
 80001b2:	2101      	movs	r1, #1
 80001b4:	430a      	orrs	r2, r1
 80001b6:	601a      	str	r2, [r3, #0]
    RCC->CFGR |= (1<<0); // HSI16 como SYSCLK
 80001b8:	4b08      	ldr	r3, [pc, #32]	@ (80001dc <main+0x34>)
 80001ba:	68da      	ldr	r2, [r3, #12]
 80001bc:	4b07      	ldr	r3, [pc, #28]	@ (80001dc <main+0x34>)
 80001be:	2101      	movs	r1, #1
 80001c0:	430a      	orrs	r2, r1
 80001c2:	60da      	str	r2, [r3, #12]


    //2. Inicializar  puertos y timers
    PORTS_init();   //Configuracion de todos los puertos
 80001c4:	f000 f890 	bl	80002e8 <PORTS_init>
    TIM2config();   //Configuracion del TIM2 a  200 ms
 80001c8:	f000 f95e 	bl	8000488 <TIM2config>
    TIM21config();  //Configuracion del TIM21 a 2 ms
 80001cc:	f000 fb32 	bl	8000834 <TIM21config>

    //3. Inicializar LCD
    LCD_INIT();
 80001d0:	f000 f92a 	bl	8000428 <LCD_INIT>
 80001d4:	2300      	movs	r3, #0


    //while (1);
}
 80001d6:	0018      	movs	r0, r3
 80001d8:	46bd      	mov	sp, r7
 80001da:	bd80      	pop	{r7, pc}
 80001dc:	40021000 	.word	0x40021000

080001e0 <LCD_command>:


//Envia comando al LCD
void LCD_command(unsigned char command) {
 80001e0:	b580      	push	{r7, lr}
 80001e2:	b084      	sub	sp, #16
 80001e4:	af00      	add	r7, sp, #0
 80001e6:	0002      	movs	r2, r0
 80001e8:	1dfb      	adds	r3, r7, #7
 80001ea:	701a      	strb	r2, [r3, #0]
    GPIOC->BSRR = (RS | RW) << 16; // RS=0, RW=0
 80001ec:	4b1a      	ldr	r3, [pc, #104]	@ (8000258 <LCD_command+0x78>)
 80001ee:	22c0      	movs	r2, #192	@ 0xc0
 80001f0:	0292      	lsls	r2, r2, #10
 80001f2:	619a      	str	r2, [r3, #24]
    GPIOC->ODR &= ~(0xFF0);
 80001f4:	4b18      	ldr	r3, [pc, #96]	@ (8000258 <LCD_command+0x78>)
 80001f6:	695a      	ldr	r2, [r3, #20]
 80001f8:	4b17      	ldr	r3, [pc, #92]	@ (8000258 <LCD_command+0x78>)
 80001fa:	4918      	ldr	r1, [pc, #96]	@ (800025c <LCD_command+0x7c>)
 80001fc:	400a      	ands	r2, r1
 80001fe:	615a      	str	r2, [r3, #20]
    GPIOC->ODR |= (command << 4);
 8000200:	4b15      	ldr	r3, [pc, #84]	@ (8000258 <LCD_command+0x78>)
 8000202:	6959      	ldr	r1, [r3, #20]
 8000204:	1dfb      	adds	r3, r7, #7
 8000206:	781b      	ldrb	r3, [r3, #0]
 8000208:	011a      	lsls	r2, r3, #4
 800020a:	4b13      	ldr	r3, [pc, #76]	@ (8000258 <LCD_command+0x78>)
 800020c:	430a      	orrs	r2, r1
 800020e:	615a      	str	r2, [r3, #20]
    GPIOC->BSRR = EN;
 8000210:	4b11      	ldr	r3, [pc, #68]	@ (8000258 <LCD_command+0x78>)
 8000212:	2208      	movs	r2, #8
 8000214:	619a      	str	r2, [r3, #24]
    for (volatile int i = 0; i < 800; i++) __NOP();  // Pausa de 1ms
 8000216:	2300      	movs	r3, #0
 8000218:	60fb      	str	r3, [r7, #12]
 800021a:	e003      	b.n	8000224 <LCD_command+0x44>
 800021c:	46c0      	nop			@ (mov r8, r8)
 800021e:	68fb      	ldr	r3, [r7, #12]
 8000220:	3301      	adds	r3, #1
 8000222:	60fb      	str	r3, [r7, #12]
 8000224:	68fa      	ldr	r2, [r7, #12]
 8000226:	23c8      	movs	r3, #200	@ 0xc8
 8000228:	009b      	lsls	r3, r3, #2
 800022a:	429a      	cmp	r2, r3
 800022c:	dbf6      	blt.n	800021c <LCD_command+0x3c>
    GPIOC->BSRR = EN << 16;
 800022e:	4b0a      	ldr	r3, [pc, #40]	@ (8000258 <LCD_command+0x78>)
 8000230:	2280      	movs	r2, #128	@ 0x80
 8000232:	0312      	lsls	r2, r2, #12
 8000234:	619a      	str	r2, [r3, #24]
    for (volatile int i = 0; i < 1600; i++) __NOP(); // Pausa de 2ms
 8000236:	2300      	movs	r3, #0
 8000238:	60bb      	str	r3, [r7, #8]
 800023a:	e003      	b.n	8000244 <LCD_command+0x64>
 800023c:	46c0      	nop			@ (mov r8, r8)
 800023e:	68bb      	ldr	r3, [r7, #8]
 8000240:	3301      	adds	r3, #1
 8000242:	60bb      	str	r3, [r7, #8]
 8000244:	68ba      	ldr	r2, [r7, #8]
 8000246:	23c8      	movs	r3, #200	@ 0xc8
 8000248:	00db      	lsls	r3, r3, #3
 800024a:	429a      	cmp	r2, r3
 800024c:	dbf6      	blt.n	800023c <LCD_command+0x5c>
}
 800024e:	46c0      	nop			@ (mov r8, r8)
 8000250:	46c0      	nop			@ (mov r8, r8)
 8000252:	46bd      	mov	sp, r7
 8000254:	b004      	add	sp, #16
 8000256:	bd80      	pop	{r7, pc}
 8000258:	50000800 	.word	0x50000800
 800025c:	fffff00f 	.word	0xfffff00f

08000260 <LCD_data>:

void LCD_data(char data) {
 8000260:	b580      	push	{r7, lr}
 8000262:	b084      	sub	sp, #16
 8000264:	af00      	add	r7, sp, #0
 8000266:	0002      	movs	r2, r0
 8000268:	1dfb      	adds	r3, r7, #7
 800026a:	701a      	strb	r2, [r3, #0]
    GPIOC->BSRR = RS;      // RS=1
 800026c:	4b1c      	ldr	r3, [pc, #112]	@ (80002e0 <LCD_data+0x80>)
 800026e:	2201      	movs	r2, #1
 8000270:	619a      	str	r2, [r3, #24]
    GPIOC->BSRR = RW << 16; // RW=0
 8000272:	4b1b      	ldr	r3, [pc, #108]	@ (80002e0 <LCD_data+0x80>)
 8000274:	2280      	movs	r2, #128	@ 0x80
 8000276:	0292      	lsls	r2, r2, #10
 8000278:	619a      	str	r2, [r3, #24]
    GPIOC->ODR &= ~(0xFF0);
 800027a:	4b19      	ldr	r3, [pc, #100]	@ (80002e0 <LCD_data+0x80>)
 800027c:	695a      	ldr	r2, [r3, #20]
 800027e:	4b18      	ldr	r3, [pc, #96]	@ (80002e0 <LCD_data+0x80>)
 8000280:	4918      	ldr	r1, [pc, #96]	@ (80002e4 <LCD_data+0x84>)
 8000282:	400a      	ands	r2, r1
 8000284:	615a      	str	r2, [r3, #20]
    GPIOC->ODR |= (data << 4);
 8000286:	4b16      	ldr	r3, [pc, #88]	@ (80002e0 <LCD_data+0x80>)
 8000288:	6959      	ldr	r1, [r3, #20]
 800028a:	1dfb      	adds	r3, r7, #7
 800028c:	781b      	ldrb	r3, [r3, #0]
 800028e:	011a      	lsls	r2, r3, #4
 8000290:	4b13      	ldr	r3, [pc, #76]	@ (80002e0 <LCD_data+0x80>)
 8000292:	430a      	orrs	r2, r1
 8000294:	615a      	str	r2, [r3, #20]
    GPIOC->BSRR = EN;
 8000296:	4b12      	ldr	r3, [pc, #72]	@ (80002e0 <LCD_data+0x80>)
 8000298:	2208      	movs	r2, #8
 800029a:	619a      	str	r2, [r3, #24]
    for (volatile int i = 0; i < 800; i++) __NOP();  // Pausa de 1ms
 800029c:	2300      	movs	r3, #0
 800029e:	60fb      	str	r3, [r7, #12]
 80002a0:	e003      	b.n	80002aa <LCD_data+0x4a>
 80002a2:	46c0      	nop			@ (mov r8, r8)
 80002a4:	68fb      	ldr	r3, [r7, #12]
 80002a6:	3301      	adds	r3, #1
 80002a8:	60fb      	str	r3, [r7, #12]
 80002aa:	68fa      	ldr	r2, [r7, #12]
 80002ac:	23c8      	movs	r3, #200	@ 0xc8
 80002ae:	009b      	lsls	r3, r3, #2
 80002b0:	429a      	cmp	r2, r3
 80002b2:	dbf6      	blt.n	80002a2 <LCD_data+0x42>
    GPIOC->BSRR = EN << 16;
 80002b4:	4b0a      	ldr	r3, [pc, #40]	@ (80002e0 <LCD_data+0x80>)
 80002b6:	2280      	movs	r2, #128	@ 0x80
 80002b8:	0312      	lsls	r2, r2, #12
 80002ba:	619a      	str	r2, [r3, #24]
    for (volatile int i = 0; i < 1600; i++) __NOP(); // Pausa de 2ms
 80002bc:	2300      	movs	r3, #0
 80002be:	60bb      	str	r3, [r7, #8]
 80002c0:	e003      	b.n	80002ca <LCD_data+0x6a>
 80002c2:	46c0      	nop			@ (mov r8, r8)
 80002c4:	68bb      	ldr	r3, [r7, #8]
 80002c6:	3301      	adds	r3, #1
 80002c8:	60bb      	str	r3, [r7, #8]
 80002ca:	68ba      	ldr	r2, [r7, #8]
 80002cc:	23c8      	movs	r3, #200	@ 0xc8
 80002ce:	00db      	lsls	r3, r3, #3
 80002d0:	429a      	cmp	r2, r3
 80002d2:	dbf6      	blt.n	80002c2 <LCD_data+0x62>
}
 80002d4:	46c0      	nop			@ (mov r8, r8)
 80002d6:	46c0      	nop			@ (mov r8, r8)
 80002d8:	46bd      	mov	sp, r7
 80002da:	b004      	add	sp, #16
 80002dc:	bd80      	pop	{r7, pc}
 80002de:	46c0      	nop			@ (mov r8, r8)
 80002e0:	50000800 	.word	0x50000800
 80002e4:	fffff00f 	.word	0xfffff00f

080002e8 <PORTS_init>:

void PORTS_init(void) {
 80002e8:	b580      	push	{r7, lr}
 80002ea:	b082      	sub	sp, #8
 80002ec:	af00      	add	r7, sp, #0
    RCC->IOPENR |= (1<<2); // Habilitar GPIOC y los pines para el LCD
 80002ee:	4b42      	ldr	r3, [pc, #264]	@ (80003f8 <PORTS_init+0x110>)
 80002f0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80002f2:	4b41      	ldr	r3, [pc, #260]	@ (80003f8 <PORTS_init+0x110>)
 80002f4:	2104      	movs	r1, #4
 80002f6:	430a      	orrs	r2, r1
 80002f8:	62da      	str	r2, [r3, #44]	@ 0x2c
    for (int i = 0; i <= 11; i++) {
 80002fa:	2300      	movs	r3, #0
 80002fc:	607b      	str	r3, [r7, #4]
 80002fe:	e019      	b.n	8000334 <PORTS_init+0x4c>
        GPIOC->MODER &= ~(0x3 << (2*i));
 8000300:	4b3e      	ldr	r3, [pc, #248]	@ (80003fc <PORTS_init+0x114>)
 8000302:	681a      	ldr	r2, [r3, #0]
 8000304:	687b      	ldr	r3, [r7, #4]
 8000306:	005b      	lsls	r3, r3, #1
 8000308:	2103      	movs	r1, #3
 800030a:	4099      	lsls	r1, r3
 800030c:	000b      	movs	r3, r1
 800030e:	43db      	mvns	r3, r3
 8000310:	0019      	movs	r1, r3
 8000312:	4b3a      	ldr	r3, [pc, #232]	@ (80003fc <PORTS_init+0x114>)
 8000314:	400a      	ands	r2, r1
 8000316:	601a      	str	r2, [r3, #0]
        GPIOC->MODER |=  (0x1 << (2*i));
 8000318:	4b38      	ldr	r3, [pc, #224]	@ (80003fc <PORTS_init+0x114>)
 800031a:	681a      	ldr	r2, [r3, #0]
 800031c:	687b      	ldr	r3, [r7, #4]
 800031e:	005b      	lsls	r3, r3, #1
 8000320:	2101      	movs	r1, #1
 8000322:	4099      	lsls	r1, r3
 8000324:	000b      	movs	r3, r1
 8000326:	0019      	movs	r1, r3
 8000328:	4b34      	ldr	r3, [pc, #208]	@ (80003fc <PORTS_init+0x114>)
 800032a:	430a      	orrs	r2, r1
 800032c:	601a      	str	r2, [r3, #0]
    for (int i = 0; i <= 11; i++) {
 800032e:	687b      	ldr	r3, [r7, #4]
 8000330:	3301      	adds	r3, #1
 8000332:	607b      	str	r3, [r7, #4]
 8000334:	687b      	ldr	r3, [r7, #4]
 8000336:	2b0b      	cmp	r3, #11
 8000338:	dde2      	ble.n	8000300 <PORTS_init+0x18>
    }

    RCC->IOPENR |= (1<<0); //Enable clock GPIOA
 800033a:	4b2f      	ldr	r3, [pc, #188]	@ (80003f8 <PORTS_init+0x110>)
 800033c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800033e:	4b2e      	ldr	r3, [pc, #184]	@ (80003f8 <PORTS_init+0x110>)
 8000340:	2101      	movs	r1, #1
 8000342:	430a      	orrs	r2, r1
 8000344:	62da      	str	r2, [r3, #44]	@ 0x2c
    RCC->IOPENR |= (1<<1); //Enable clock GPIOB
 8000346:	4b2c      	ldr	r3, [pc, #176]	@ (80003f8 <PORTS_init+0x110>)
 8000348:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800034a:	4b2b      	ldr	r3, [pc, #172]	@ (80003f8 <PORTS_init+0x110>)
 800034c:	2102      	movs	r1, #2
 800034e:	430a      	orrs	r2, r1
 8000350:	62da      	str	r2, [r3, #44]	@ 0x2c

    GPIOB->MODER &= ~(1<<1); //Config PB0 como output Salida  0
 8000352:	4b2b      	ldr	r3, [pc, #172]	@ (8000400 <PORTS_init+0x118>)
 8000354:	681a      	ldr	r2, [r3, #0]
 8000356:	4b2a      	ldr	r3, [pc, #168]	@ (8000400 <PORTS_init+0x118>)
 8000358:	2102      	movs	r1, #2
 800035a:	438a      	bics	r2, r1
 800035c:	601a      	str	r2, [r3, #0]
	GPIOB->MODER &= ~(1<<3); //Config PB1 como output Salida  1
 800035e:	4b28      	ldr	r3, [pc, #160]	@ (8000400 <PORTS_init+0x118>)
 8000360:	681a      	ldr	r2, [r3, #0]
 8000362:	4b27      	ldr	r3, [pc, #156]	@ (8000400 <PORTS_init+0x118>)
 8000364:	2108      	movs	r1, #8
 8000366:	438a      	bics	r2, r1
 8000368:	601a      	str	r2, [r3, #0]
	GPIOB->MODER &= ~(1<<5); //Config PB2 como output Salida  2
 800036a:	4b25      	ldr	r3, [pc, #148]	@ (8000400 <PORTS_init+0x118>)
 800036c:	681a      	ldr	r2, [r3, #0]
 800036e:	4b24      	ldr	r3, [pc, #144]	@ (8000400 <PORTS_init+0x118>)
 8000370:	2120      	movs	r1, #32
 8000372:	438a      	bics	r2, r1
 8000374:	601a      	str	r2, [r3, #0]
	GPIOB->MODER &= ~(1<<7); //Config PB3 como output Salida  3
 8000376:	4b22      	ldr	r3, [pc, #136]	@ (8000400 <PORTS_init+0x118>)
 8000378:	681a      	ldr	r2, [r3, #0]
 800037a:	4b21      	ldr	r3, [pc, #132]	@ (8000400 <PORTS_init+0x118>)
 800037c:	2180      	movs	r1, #128	@ 0x80
 800037e:	438a      	bics	r2, r1
 8000380:	601a      	str	r2, [r3, #0]
	GPIOB->MODER &= ~(1<<9); //Config PB4 como output Salida  4
 8000382:	4b1f      	ldr	r3, [pc, #124]	@ (8000400 <PORTS_init+0x118>)
 8000384:	681a      	ldr	r2, [r3, #0]
 8000386:	4b1e      	ldr	r3, [pc, #120]	@ (8000400 <PORTS_init+0x118>)
 8000388:	491e      	ldr	r1, [pc, #120]	@ (8000404 <PORTS_init+0x11c>)
 800038a:	400a      	ands	r2, r1
 800038c:	601a      	str	r2, [r3, #0]
	GPIOB->MODER &= ~(1<<11); //Config PB5 como output Salida 5
 800038e:	4b1c      	ldr	r3, [pc, #112]	@ (8000400 <PORTS_init+0x118>)
 8000390:	681a      	ldr	r2, [r3, #0]
 8000392:	4b1b      	ldr	r3, [pc, #108]	@ (8000400 <PORTS_init+0x118>)
 8000394:	491c      	ldr	r1, [pc, #112]	@ (8000408 <PORTS_init+0x120>)
 8000396:	400a      	ands	r2, r1
 8000398:	601a      	str	r2, [r3, #0]
	GPIOB->MODER &= ~(1<<13); //Config PB6 como output Salida 6
 800039a:	4b19      	ldr	r3, [pc, #100]	@ (8000400 <PORTS_init+0x118>)
 800039c:	681a      	ldr	r2, [r3, #0]
 800039e:	4b18      	ldr	r3, [pc, #96]	@ (8000400 <PORTS_init+0x118>)
 80003a0:	491a      	ldr	r1, [pc, #104]	@ (800040c <PORTS_init+0x124>)
 80003a2:	400a      	ands	r2, r1
 80003a4:	601a      	str	r2, [r3, #0]
	GPIOB->MODER &= ~(1<<15); //Config PB7 como output (Push 1)
 80003a6:	4b16      	ldr	r3, [pc, #88]	@ (8000400 <PORTS_init+0x118>)
 80003a8:	681a      	ldr	r2, [r3, #0]
 80003aa:	4b15      	ldr	r3, [pc, #84]	@ (8000400 <PORTS_init+0x118>)
 80003ac:	4918      	ldr	r1, [pc, #96]	@ (8000410 <PORTS_init+0x128>)
 80003ae:	400a      	ands	r2, r1
 80003b0:	601a      	str	r2, [r3, #0]
	GPIOB->MODER &= ~(1<<17); //Config PB8 como output (Push 2)
 80003b2:	4b13      	ldr	r3, [pc, #76]	@ (8000400 <PORTS_init+0x118>)
 80003b4:	681a      	ldr	r2, [r3, #0]
 80003b6:	4b12      	ldr	r3, [pc, #72]	@ (8000400 <PORTS_init+0x118>)
 80003b8:	4916      	ldr	r1, [pc, #88]	@ (8000414 <PORTS_init+0x12c>)
 80003ba:	400a      	ands	r2, r1
 80003bc:	601a      	str	r2, [r3, #0]
	GPIOB->MODER &= ~(1<<19); //Config PB9 como output (Push 3)
 80003be:	4b10      	ldr	r3, [pc, #64]	@ (8000400 <PORTS_init+0x118>)
 80003c0:	681a      	ldr	r2, [r3, #0]
 80003c2:	4b0f      	ldr	r3, [pc, #60]	@ (8000400 <PORTS_init+0x118>)
 80003c4:	4914      	ldr	r1, [pc, #80]	@ (8000418 <PORTS_init+0x130>)
 80003c6:	400a      	ands	r2, r1
 80003c8:	601a      	str	r2, [r3, #0]
	GPIOB->MODER &= ~(1<<21); //Config PB10 como output (Push 4)
 80003ca:	4b0d      	ldr	r3, [pc, #52]	@ (8000400 <PORTS_init+0x118>)
 80003cc:	681a      	ldr	r2, [r3, #0]
 80003ce:	4b0c      	ldr	r3, [pc, #48]	@ (8000400 <PORTS_init+0x118>)
 80003d0:	4912      	ldr	r1, [pc, #72]	@ (800041c <PORTS_init+0x134>)
 80003d2:	400a      	ands	r2, r1
 80003d4:	601a      	str	r2, [r3, #0]
	GPIOB->MODER &= ~(1<<23); //Config PB11 como output (Push 4)
 80003d6:	4b0a      	ldr	r3, [pc, #40]	@ (8000400 <PORTS_init+0x118>)
 80003d8:	681a      	ldr	r2, [r3, #0]
 80003da:	4b09      	ldr	r3, [pc, #36]	@ (8000400 <PORTS_init+0x118>)
 80003dc:	4910      	ldr	r1, [pc, #64]	@ (8000420 <PORTS_init+0x138>)
 80003de:	400a      	ands	r2, r1
 80003e0:	601a      	str	r2, [r3, #0]
	GPIOB->MODER &= ~(1<<25); //Config PB12 como output (Push 4)
 80003e2:	4b07      	ldr	r3, [pc, #28]	@ (8000400 <PORTS_init+0x118>)
 80003e4:	681a      	ldr	r2, [r3, #0]
 80003e6:	4b06      	ldr	r3, [pc, #24]	@ (8000400 <PORTS_init+0x118>)
 80003e8:	490e      	ldr	r1, [pc, #56]	@ (8000424 <PORTS_init+0x13c>)
 80003ea:	400a      	ands	r2, r1
 80003ec:	601a      	str	r2, [r3, #0]

}
 80003ee:	46c0      	nop			@ (mov r8, r8)
 80003f0:	46bd      	mov	sp, r7
 80003f2:	b002      	add	sp, #8
 80003f4:	bd80      	pop	{r7, pc}
 80003f6:	46c0      	nop			@ (mov r8, r8)
 80003f8:	40021000 	.word	0x40021000
 80003fc:	50000800 	.word	0x50000800
 8000400:	50000400 	.word	0x50000400
 8000404:	fffffdff 	.word	0xfffffdff
 8000408:	fffff7ff 	.word	0xfffff7ff
 800040c:	ffffdfff 	.word	0xffffdfff
 8000410:	ffff7fff 	.word	0xffff7fff
 8000414:	fffdffff 	.word	0xfffdffff
 8000418:	fff7ffff 	.word	0xfff7ffff
 800041c:	ffdfffff 	.word	0xffdfffff
 8000420:	ff7fffff 	.word	0xff7fffff
 8000424:	fdffffff 	.word	0xfdffffff

08000428 <LCD_INIT>:

void LCD_INIT(void) {
 8000428:	b580      	push	{r7, lr}
 800042a:	af00      	add	r7, sp, #0
    delay_ms(50);  // Esperar estabilización inicial
 800042c:	2032      	movs	r0, #50	@ 0x32
 800042e:	f7ff fe85 	bl	800013c <delay_ms>
    LCD_command(0x30);
 8000432:	2030      	movs	r0, #48	@ 0x30
 8000434:	f7ff fed4 	bl	80001e0 <LCD_command>
    delay_ms(5);
 8000438:	2005      	movs	r0, #5
 800043a:	f7ff fe7f 	bl	800013c <delay_ms>
    LCD_command(0x30);
 800043e:	2030      	movs	r0, #48	@ 0x30
 8000440:	f7ff fece 	bl	80001e0 <LCD_command>
    delay_ms(1);
 8000444:	2001      	movs	r0, #1
 8000446:	f7ff fe79 	bl	800013c <delay_ms>
    LCD_command(0x30);
 800044a:	2030      	movs	r0, #48	@ 0x30
 800044c:	f7ff fec8 	bl	80001e0 <LCD_command>
    delay_ms(1);
 8000450:	2001      	movs	r0, #1
 8000452:	f7ff fe73 	bl	800013c <delay_ms>
    LCD_command(0x38); // 8 bits, 2 líneas
 8000456:	2038      	movs	r0, #56	@ 0x38
 8000458:	f7ff fec2 	bl	80001e0 <LCD_command>
    delay_ms(1);
 800045c:	2001      	movs	r0, #1
 800045e:	f7ff fe6d 	bl	800013c <delay_ms>
    LCD_command(0x06); // Modo entrada (incremento)
 8000462:	2006      	movs	r0, #6
 8000464:	f7ff febc 	bl	80001e0 <LCD_command>
    delay_ms(1);
 8000468:	2001      	movs	r0, #1
 800046a:	f7ff fe67 	bl	800013c <delay_ms>
    LCD_command(0x01); // Clear Display
 800046e:	2001      	movs	r0, #1
 8000470:	f7ff feb6 	bl	80001e0 <LCD_command>
    delay_ms(2);
 8000474:	2002      	movs	r0, #2
 8000476:	f7ff fe61 	bl	800013c <delay_ms>
    LCD_command(0x0C); // Display ON, cursor OFF
 800047a:	200c      	movs	r0, #12
 800047c:	f7ff feb0 	bl	80001e0 <LCD_command>
}
 8000480:	46c0      	nop			@ (mov r8, r8)
 8000482:	46bd      	mov	sp, r7
 8000484:	bd80      	pop	{r7, pc}
	...

08000488 <TIM2config>:


void TIM2config(void) {
 8000488:	b580      	push	{r7, lr}
 800048a:	af00      	add	r7, sp, #0
    RCC->APB1ENR |= (1<<0);   // Habilitar reloj a TIM2
 800048c:	4b11      	ldr	r3, [pc, #68]	@ (80004d4 <TIM2config+0x4c>)
 800048e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8000490:	4b10      	ldr	r3, [pc, #64]	@ (80004d4 <TIM2config+0x4c>)
 8000492:	2101      	movs	r1, #1
 8000494:	430a      	orrs	r2, r1
 8000496:	639a      	str	r2, [r3, #56]	@ 0x38
    TIM2->PSC = 16000 - 1;    // Prescaler: 16 MHz / 16000 = 1 kHz (1ms)
 8000498:	2380      	movs	r3, #128	@ 0x80
 800049a:	05db      	lsls	r3, r3, #23
 800049c:	4a0e      	ldr	r2, [pc, #56]	@ (80004d8 <TIM2config+0x50>)
 800049e:	629a      	str	r2, [r3, #40]	@ 0x28
    TIM2->ARR = 200 - 1;        // Cada 200 * 1 ms = 200 ms
 80004a0:	2380      	movs	r3, #128	@ 0x80
 80004a2:	05db      	lsls	r3, r3, #23
 80004a4:	22c7      	movs	r2, #199	@ 0xc7
 80004a6:	62da      	str	r2, [r3, #44]	@ 0x2c
    TIM2->CNT = 0;
 80004a8:	2380      	movs	r3, #128	@ 0x80
 80004aa:	05db      	lsls	r3, r3, #23
 80004ac:	2200      	movs	r2, #0
 80004ae:	625a      	str	r2, [r3, #36]	@ 0x24
    TIM2->DIER |= (1<<0);     // Habilitar interrupción
 80004b0:	2380      	movs	r3, #128	@ 0x80
 80004b2:	05db      	lsls	r3, r3, #23
 80004b4:	68da      	ldr	r2, [r3, #12]
 80004b6:	2380      	movs	r3, #128	@ 0x80
 80004b8:	05db      	lsls	r3, r3, #23
 80004ba:	2101      	movs	r1, #1
 80004bc:	430a      	orrs	r2, r1
 80004be:	60da      	str	r2, [r3, #12]
    TIM2->CR1 = (1<<0);       // Enable contador
 80004c0:	2380      	movs	r3, #128	@ 0x80
 80004c2:	05db      	lsls	r3, r3, #23
 80004c4:	2201      	movs	r2, #1
 80004c6:	601a      	str	r2, [r3, #0]
    NVIC_EnableIRQ(TIM2_IRQn);// Permitir interrupción
 80004c8:	200f      	movs	r0, #15
 80004ca:	f7ff fe1d 	bl	8000108 <__NVIC_EnableIRQ>
}
 80004ce:	46c0      	nop			@ (mov r8, r8)
 80004d0:	46bd      	mov	sp, r7
 80004d2:	bd80      	pop	{r7, pc}
 80004d4:	40021000 	.word	0x40021000
 80004d8:	00003e7f 	.word	0x00003e7f

080004dc <TIM2_IRQHandler>:

void TIM2_IRQHandler(void) {
 80004dc:	b580      	push	{r7, lr}
 80004de:	af00      	add	r7, sp, #0
    TIM2->SR &= ~(1<<0); // Limpiar UIF
 80004e0:	2380      	movs	r3, #128	@ 0x80
 80004e2:	05db      	lsls	r3, r3, #23
 80004e4:	691a      	ldr	r2, [r3, #16]
 80004e6:	2380      	movs	r3, #128	@ 0x80
 80004e8:	05db      	lsls	r3, r3, #23
 80004ea:	2101      	movs	r1, #1
 80004ec:	438a      	bics	r2, r1
 80004ee:	611a      	str	r2, [r3, #16]

    switch (lcd_step) {
 80004f0:	4bce      	ldr	r3, [pc, #824]	@ (800082c <TIM2_IRQHandler+0x350>)
 80004f2:	781b      	ldrb	r3, [r3, #0]
 80004f4:	b2db      	uxtb	r3, r3
 80004f6:	2b23      	cmp	r3, #35	@ 0x23
 80004f8:	d900      	bls.n	80004fc <TIM2_IRQHandler+0x20>
 80004fa:	e192      	b.n	8000822 <TIM2_IRQHandler+0x346>
 80004fc:	009a      	lsls	r2, r3, #2
 80004fe:	4bcc      	ldr	r3, [pc, #816]	@ (8000830 <TIM2_IRQHandler+0x354>)
 8000500:	18d3      	adds	r3, r2, r3
 8000502:	681b      	ldr	r3, [r3, #0]
 8000504:	469f      	mov	pc, r3
        case 0:
            LCD_command(0x01);  // Clear Display
 8000506:	2001      	movs	r0, #1
 8000508:	f7ff fe6a 	bl	80001e0 <LCD_command>
            LCD_command(0x80);  // Cursor a línea 1
 800050c:	2080      	movs	r0, #128	@ 0x80
 800050e:	f7ff fe67 	bl	80001e0 <LCD_command>
            lcd_step++;
 8000512:	4bc6      	ldr	r3, [pc, #792]	@ (800082c <TIM2_IRQHandler+0x350>)
 8000514:	781b      	ldrb	r3, [r3, #0]
 8000516:	b2db      	uxtb	r3, r3
 8000518:	3301      	adds	r3, #1
 800051a:	b2da      	uxtb	r2, r3
 800051c:	4bc3      	ldr	r3, [pc, #780]	@ (800082c <TIM2_IRQHandler+0x350>)
 800051e:	701a      	strb	r2, [r3, #0]
            break;
 8000520:	e180      	b.n	8000824 <TIM2_IRQHandler+0x348>

        case 1: LCD_data('1'); lcd_step++; break;
 8000522:	2031      	movs	r0, #49	@ 0x31
 8000524:	f7ff fe9c 	bl	8000260 <LCD_data>
 8000528:	4bc0      	ldr	r3, [pc, #768]	@ (800082c <TIM2_IRQHandler+0x350>)
 800052a:	781b      	ldrb	r3, [r3, #0]
 800052c:	b2db      	uxtb	r3, r3
 800052e:	3301      	adds	r3, #1
 8000530:	b2da      	uxtb	r2, r3
 8000532:	4bbe      	ldr	r3, [pc, #760]	@ (800082c <TIM2_IRQHandler+0x350>)
 8000534:	701a      	strb	r2, [r3, #0]
 8000536:	e175      	b.n	8000824 <TIM2_IRQHandler+0x348>
        case 2: LCD_data('.'); lcd_step++; break;
 8000538:	202e      	movs	r0, #46	@ 0x2e
 800053a:	f7ff fe91 	bl	8000260 <LCD_data>
 800053e:	4bbb      	ldr	r3, [pc, #748]	@ (800082c <TIM2_IRQHandler+0x350>)
 8000540:	781b      	ldrb	r3, [r3, #0]
 8000542:	b2db      	uxtb	r3, r3
 8000544:	3301      	adds	r3, #1
 8000546:	b2da      	uxtb	r2, r3
 8000548:	4bb8      	ldr	r3, [pc, #736]	@ (800082c <TIM2_IRQHandler+0x350>)
 800054a:	701a      	strb	r2, [r3, #0]
 800054c:	e16a      	b.n	8000824 <TIM2_IRQHandler+0x348>
        case 3: LCD_data('U'); lcd_step++; break;
 800054e:	2055      	movs	r0, #85	@ 0x55
 8000550:	f7ff fe86 	bl	8000260 <LCD_data>
 8000554:	4bb5      	ldr	r3, [pc, #724]	@ (800082c <TIM2_IRQHandler+0x350>)
 8000556:	781b      	ldrb	r3, [r3, #0]
 8000558:	b2db      	uxtb	r3, r3
 800055a:	3301      	adds	r3, #1
 800055c:	b2da      	uxtb	r2, r3
 800055e:	4bb3      	ldr	r3, [pc, #716]	@ (800082c <TIM2_IRQHandler+0x350>)
 8000560:	701a      	strb	r2, [r3, #0]
 8000562:	e15f      	b.n	8000824 <TIM2_IRQHandler+0x348>
        case 4: LCD_data('s'); lcd_step++; break;
 8000564:	2073      	movs	r0, #115	@ 0x73
 8000566:	f7ff fe7b 	bl	8000260 <LCD_data>
 800056a:	4bb0      	ldr	r3, [pc, #704]	@ (800082c <TIM2_IRQHandler+0x350>)
 800056c:	781b      	ldrb	r3, [r3, #0]
 800056e:	b2db      	uxtb	r3, r3
 8000570:	3301      	adds	r3, #1
 8000572:	b2da      	uxtb	r2, r3
 8000574:	4bad      	ldr	r3, [pc, #692]	@ (800082c <TIM2_IRQHandler+0x350>)
 8000576:	701a      	strb	r2, [r3, #0]
 8000578:	e154      	b.n	8000824 <TIM2_IRQHandler+0x348>
        case 5: LCD_data('u'); lcd_step++; break;
 800057a:	2075      	movs	r0, #117	@ 0x75
 800057c:	f7ff fe70 	bl	8000260 <LCD_data>
 8000580:	4baa      	ldr	r3, [pc, #680]	@ (800082c <TIM2_IRQHandler+0x350>)
 8000582:	781b      	ldrb	r3, [r3, #0]
 8000584:	b2db      	uxtb	r3, r3
 8000586:	3301      	adds	r3, #1
 8000588:	b2da      	uxtb	r2, r3
 800058a:	4ba8      	ldr	r3, [pc, #672]	@ (800082c <TIM2_IRQHandler+0x350>)
 800058c:	701a      	strb	r2, [r3, #0]
 800058e:	e149      	b.n	8000824 <TIM2_IRQHandler+0x348>
        case 6: LCD_data('a'); lcd_step++; break;
 8000590:	2061      	movs	r0, #97	@ 0x61
 8000592:	f7ff fe65 	bl	8000260 <LCD_data>
 8000596:	4ba5      	ldr	r3, [pc, #660]	@ (800082c <TIM2_IRQHandler+0x350>)
 8000598:	781b      	ldrb	r3, [r3, #0]
 800059a:	b2db      	uxtb	r3, r3
 800059c:	3301      	adds	r3, #1
 800059e:	b2da      	uxtb	r2, r3
 80005a0:	4ba2      	ldr	r3, [pc, #648]	@ (800082c <TIM2_IRQHandler+0x350>)
 80005a2:	701a      	strb	r2, [r3, #0]
 80005a4:	e13e      	b.n	8000824 <TIM2_IRQHandler+0x348>
        case 7: LCD_data('r'); lcd_step++; break;
 80005a6:	2072      	movs	r0, #114	@ 0x72
 80005a8:	f7ff fe5a 	bl	8000260 <LCD_data>
 80005ac:	4b9f      	ldr	r3, [pc, #636]	@ (800082c <TIM2_IRQHandler+0x350>)
 80005ae:	781b      	ldrb	r3, [r3, #0]
 80005b0:	b2db      	uxtb	r3, r3
 80005b2:	3301      	adds	r3, #1
 80005b4:	b2da      	uxtb	r2, r3
 80005b6:	4b9d      	ldr	r3, [pc, #628]	@ (800082c <TIM2_IRQHandler+0x350>)
 80005b8:	701a      	strb	r2, [r3, #0]
 80005ba:	e133      	b.n	8000824 <TIM2_IRQHandler+0x348>
        case 8: LCD_data('i'); lcd_step++; break;
 80005bc:	2069      	movs	r0, #105	@ 0x69
 80005be:	f7ff fe4f 	bl	8000260 <LCD_data>
 80005c2:	4b9a      	ldr	r3, [pc, #616]	@ (800082c <TIM2_IRQHandler+0x350>)
 80005c4:	781b      	ldrb	r3, [r3, #0]
 80005c6:	b2db      	uxtb	r3, r3
 80005c8:	3301      	adds	r3, #1
 80005ca:	b2da      	uxtb	r2, r3
 80005cc:	4b97      	ldr	r3, [pc, #604]	@ (800082c <TIM2_IRQHandler+0x350>)
 80005ce:	701a      	strb	r2, [r3, #0]
 80005d0:	e128      	b.n	8000824 <TIM2_IRQHandler+0x348>
        case 9: LCD_data('o'); lcd_step++; break;
 80005d2:	206f      	movs	r0, #111	@ 0x6f
 80005d4:	f7ff fe44 	bl	8000260 <LCD_data>
 80005d8:	4b94      	ldr	r3, [pc, #592]	@ (800082c <TIM2_IRQHandler+0x350>)
 80005da:	781b      	ldrb	r3, [r3, #0]
 80005dc:	b2db      	uxtb	r3, r3
 80005de:	3301      	adds	r3, #1
 80005e0:	b2da      	uxtb	r2, r3
 80005e2:	4b92      	ldr	r3, [pc, #584]	@ (800082c <TIM2_IRQHandler+0x350>)
 80005e4:	701a      	strb	r2, [r3, #0]
 80005e6:	e11d      	b.n	8000824 <TIM2_IRQHandler+0x348>
        case 10: LCD_data(' '); lcd_step++; break;
 80005e8:	2020      	movs	r0, #32
 80005ea:	f7ff fe39 	bl	8000260 <LCD_data>
 80005ee:	4b8f      	ldr	r3, [pc, #572]	@ (800082c <TIM2_IRQHandler+0x350>)
 80005f0:	781b      	ldrb	r3, [r3, #0]
 80005f2:	b2db      	uxtb	r3, r3
 80005f4:	3301      	adds	r3, #1
 80005f6:	b2da      	uxtb	r2, r3
 80005f8:	4b8c      	ldr	r3, [pc, #560]	@ (800082c <TIM2_IRQHandler+0x350>)
 80005fa:	701a      	strb	r2, [r3, #0]
 80005fc:	e112      	b.n	8000824 <TIM2_IRQHandler+0x348>
        case 11: LCD_data('y'); lcd_step++; break;
 80005fe:	2079      	movs	r0, #121	@ 0x79
 8000600:	f7ff fe2e 	bl	8000260 <LCD_data>
 8000604:	4b89      	ldr	r3, [pc, #548]	@ (800082c <TIM2_IRQHandler+0x350>)
 8000606:	781b      	ldrb	r3, [r3, #0]
 8000608:	b2db      	uxtb	r3, r3
 800060a:	3301      	adds	r3, #1
 800060c:	b2da      	uxtb	r2, r3
 800060e:	4b87      	ldr	r3, [pc, #540]	@ (800082c <TIM2_IRQHandler+0x350>)
 8000610:	701a      	strb	r2, [r3, #0]
 8000612:	e107      	b.n	8000824 <TIM2_IRQHandler+0x348>
        case 12: LCD_data(' '); lcd_step++; break;
 8000614:	2020      	movs	r0, #32
 8000616:	f7ff fe23 	bl	8000260 <LCD_data>
 800061a:	4b84      	ldr	r3, [pc, #528]	@ (800082c <TIM2_IRQHandler+0x350>)
 800061c:	781b      	ldrb	r3, [r3, #0]
 800061e:	b2db      	uxtb	r3, r3
 8000620:	3301      	adds	r3, #1
 8000622:	b2da      	uxtb	r2, r3
 8000624:	4b81      	ldr	r3, [pc, #516]	@ (800082c <TIM2_IRQHandler+0x350>)
 8000626:	701a      	strb	r2, [r3, #0]
 8000628:	e0fc      	b.n	8000824 <TIM2_IRQHandler+0x348>
        case 13: LCD_data('P'); lcd_step++; break;
 800062a:	2050      	movs	r0, #80	@ 0x50
 800062c:	f7ff fe18 	bl	8000260 <LCD_data>
 8000630:	4b7e      	ldr	r3, [pc, #504]	@ (800082c <TIM2_IRQHandler+0x350>)
 8000632:	781b      	ldrb	r3, [r3, #0]
 8000634:	b2db      	uxtb	r3, r3
 8000636:	3301      	adds	r3, #1
 8000638:	b2da      	uxtb	r2, r3
 800063a:	4b7c      	ldr	r3, [pc, #496]	@ (800082c <TIM2_IRQHandler+0x350>)
 800063c:	701a      	strb	r2, [r3, #0]
 800063e:	e0f1      	b.n	8000824 <TIM2_IRQHandler+0x348>
        case 14: LCD_data('I'); lcd_step++; break;
 8000640:	2049      	movs	r0, #73	@ 0x49
 8000642:	f7ff fe0d 	bl	8000260 <LCD_data>
 8000646:	4b79      	ldr	r3, [pc, #484]	@ (800082c <TIM2_IRQHandler+0x350>)
 8000648:	781b      	ldrb	r3, [r3, #0]
 800064a:	b2db      	uxtb	r3, r3
 800064c:	3301      	adds	r3, #1
 800064e:	b2da      	uxtb	r2, r3
 8000650:	4b76      	ldr	r3, [pc, #472]	@ (800082c <TIM2_IRQHandler+0x350>)
 8000652:	701a      	strb	r2, [r3, #0]
 8000654:	e0e6      	b.n	8000824 <TIM2_IRQHandler+0x348>
        case 15: LCD_data('N'); lcd_step++; break;
 8000656:	204e      	movs	r0, #78	@ 0x4e
 8000658:	f7ff fe02 	bl	8000260 <LCD_data>
 800065c:	4b73      	ldr	r3, [pc, #460]	@ (800082c <TIM2_IRQHandler+0x350>)
 800065e:	781b      	ldrb	r3, [r3, #0]
 8000660:	b2db      	uxtb	r3, r3
 8000662:	3301      	adds	r3, #1
 8000664:	b2da      	uxtb	r2, r3
 8000666:	4b71      	ldr	r3, [pc, #452]	@ (800082c <TIM2_IRQHandler+0x350>)
 8000668:	701a      	strb	r2, [r3, #0]
 800066a:	e0db      	b.n	8000824 <TIM2_IRQHandler+0x348>

        case 16:
            LCD_command(0x01);  // Clear
 800066c:	2001      	movs	r0, #1
 800066e:	f7ff fdb7 	bl	80001e0 <LCD_command>
            LCD_command(0x80);  // Cursor a línea 1
 8000672:	2080      	movs	r0, #128	@ 0x80
 8000674:	f7ff fdb4 	bl	80001e0 <LCD_command>
            lcd_step++;
 8000678:	4b6c      	ldr	r3, [pc, #432]	@ (800082c <TIM2_IRQHandler+0x350>)
 800067a:	781b      	ldrb	r3, [r3, #0]
 800067c:	b2db      	uxtb	r3, r3
 800067e:	3301      	adds	r3, #1
 8000680:	b2da      	uxtb	r2, r3
 8000682:	4b6a      	ldr	r3, [pc, #424]	@ (800082c <TIM2_IRQHandler+0x350>)
 8000684:	701a      	strb	r2, [r3, #0]
            break;
 8000686:	e0cd      	b.n	8000824 <TIM2_IRQHandler+0x348>

        case 17: LCD_data('2'); lcd_step++; break;
 8000688:	2032      	movs	r0, #50	@ 0x32
 800068a:	f7ff fde9 	bl	8000260 <LCD_data>
 800068e:	4b67      	ldr	r3, [pc, #412]	@ (800082c <TIM2_IRQHandler+0x350>)
 8000690:	781b      	ldrb	r3, [r3, #0]
 8000692:	b2db      	uxtb	r3, r3
 8000694:	3301      	adds	r3, #1
 8000696:	b2da      	uxtb	r2, r3
 8000698:	4b64      	ldr	r3, [pc, #400]	@ (800082c <TIM2_IRQHandler+0x350>)
 800069a:	701a      	strb	r2, [r3, #0]
 800069c:	e0c2      	b.n	8000824 <TIM2_IRQHandler+0x348>
        case 18: LCD_data('.'); lcd_step++; break;
 800069e:	202e      	movs	r0, #46	@ 0x2e
 80006a0:	f7ff fdde 	bl	8000260 <LCD_data>
 80006a4:	4b61      	ldr	r3, [pc, #388]	@ (800082c <TIM2_IRQHandler+0x350>)
 80006a6:	781b      	ldrb	r3, [r3, #0]
 80006a8:	b2db      	uxtb	r3, r3
 80006aa:	3301      	adds	r3, #1
 80006ac:	b2da      	uxtb	r2, r3
 80006ae:	4b5f      	ldr	r3, [pc, #380]	@ (800082c <TIM2_IRQHandler+0x350>)
 80006b0:	701a      	strb	r2, [r3, #0]
 80006b2:	e0b7      	b.n	8000824 <TIM2_IRQHandler+0x348>
        case 19: LCD_data('C'); lcd_step++; break;
 80006b4:	2043      	movs	r0, #67	@ 0x43
 80006b6:	f7ff fdd3 	bl	8000260 <LCD_data>
 80006ba:	4b5c      	ldr	r3, [pc, #368]	@ (800082c <TIM2_IRQHandler+0x350>)
 80006bc:	781b      	ldrb	r3, [r3, #0]
 80006be:	b2db      	uxtb	r3, r3
 80006c0:	3301      	adds	r3, #1
 80006c2:	b2da      	uxtb	r2, r3
 80006c4:	4b59      	ldr	r3, [pc, #356]	@ (800082c <TIM2_IRQHandler+0x350>)
 80006c6:	701a      	strb	r2, [r3, #0]
 80006c8:	e0ac      	b.n	8000824 <TIM2_IRQHandler+0x348>
        case 20: LCD_data('e'); lcd_step++; break;
 80006ca:	2065      	movs	r0, #101	@ 0x65
 80006cc:	f7ff fdc8 	bl	8000260 <LCD_data>
 80006d0:	4b56      	ldr	r3, [pc, #344]	@ (800082c <TIM2_IRQHandler+0x350>)
 80006d2:	781b      	ldrb	r3, [r3, #0]
 80006d4:	b2db      	uxtb	r3, r3
 80006d6:	3301      	adds	r3, #1
 80006d8:	b2da      	uxtb	r2, r3
 80006da:	4b54      	ldr	r3, [pc, #336]	@ (800082c <TIM2_IRQHandler+0x350>)
 80006dc:	701a      	strb	r2, [r3, #0]
 80006de:	e0a1      	b.n	8000824 <TIM2_IRQHandler+0x348>
        case 21: LCD_data('l'); lcd_step++; break;
 80006e0:	206c      	movs	r0, #108	@ 0x6c
 80006e2:	f7ff fdbd 	bl	8000260 <LCD_data>
 80006e6:	4b51      	ldr	r3, [pc, #324]	@ (800082c <TIM2_IRQHandler+0x350>)
 80006e8:	781b      	ldrb	r3, [r3, #0]
 80006ea:	b2db      	uxtb	r3, r3
 80006ec:	3301      	adds	r3, #1
 80006ee:	b2da      	uxtb	r2, r3
 80006f0:	4b4e      	ldr	r3, [pc, #312]	@ (800082c <TIM2_IRQHandler+0x350>)
 80006f2:	701a      	strb	r2, [r3, #0]
 80006f4:	e096      	b.n	8000824 <TIM2_IRQHandler+0x348>
        case 22: LCD_data('u'); lcd_step++; break;
 80006f6:	2075      	movs	r0, #117	@ 0x75
 80006f8:	f7ff fdb2 	bl	8000260 <LCD_data>
 80006fc:	4b4b      	ldr	r3, [pc, #300]	@ (800082c <TIM2_IRQHandler+0x350>)
 80006fe:	781b      	ldrb	r3, [r3, #0]
 8000700:	b2db      	uxtb	r3, r3
 8000702:	3301      	adds	r3, #1
 8000704:	b2da      	uxtb	r2, r3
 8000706:	4b49      	ldr	r3, [pc, #292]	@ (800082c <TIM2_IRQHandler+0x350>)
 8000708:	701a      	strb	r2, [r3, #0]
 800070a:	e08b      	b.n	8000824 <TIM2_IRQHandler+0x348>
        case 23: LCD_data('l'); lcd_step++; break;
 800070c:	206c      	movs	r0, #108	@ 0x6c
 800070e:	f7ff fda7 	bl	8000260 <LCD_data>
 8000712:	4b46      	ldr	r3, [pc, #280]	@ (800082c <TIM2_IRQHandler+0x350>)
 8000714:	781b      	ldrb	r3, [r3, #0]
 8000716:	b2db      	uxtb	r3, r3
 8000718:	3301      	adds	r3, #1
 800071a:	b2da      	uxtb	r2, r3
 800071c:	4b43      	ldr	r3, [pc, #268]	@ (800082c <TIM2_IRQHandler+0x350>)
 800071e:	701a      	strb	r2, [r3, #0]
 8000720:	e080      	b.n	8000824 <TIM2_IRQHandler+0x348>
        case 24: LCD_data('a'); lcd_step++; break;
 8000722:	2061      	movs	r0, #97	@ 0x61
 8000724:	f7ff fd9c 	bl	8000260 <LCD_data>
 8000728:	4b40      	ldr	r3, [pc, #256]	@ (800082c <TIM2_IRQHandler+0x350>)
 800072a:	781b      	ldrb	r3, [r3, #0]
 800072c:	b2db      	uxtb	r3, r3
 800072e:	3301      	adds	r3, #1
 8000730:	b2da      	uxtb	r2, r3
 8000732:	4b3e      	ldr	r3, [pc, #248]	@ (800082c <TIM2_IRQHandler+0x350>)
 8000734:	701a      	strb	r2, [r3, #0]
 8000736:	e075      	b.n	8000824 <TIM2_IRQHandler+0x348>
        case 25: LCD_data('r'); lcd_step++; break;
 8000738:	2072      	movs	r0, #114	@ 0x72
 800073a:	f7ff fd91 	bl	8000260 <LCD_data>
 800073e:	4b3b      	ldr	r3, [pc, #236]	@ (800082c <TIM2_IRQHandler+0x350>)
 8000740:	781b      	ldrb	r3, [r3, #0]
 8000742:	b2db      	uxtb	r3, r3
 8000744:	3301      	adds	r3, #1
 8000746:	b2da      	uxtb	r2, r3
 8000748:	4b38      	ldr	r3, [pc, #224]	@ (800082c <TIM2_IRQHandler+0x350>)
 800074a:	701a      	strb	r2, [r3, #0]
 800074c:	e06a      	b.n	8000824 <TIM2_IRQHandler+0x348>

        case 26:
            LCD_command(0x01);  // Clear
 800074e:	2001      	movs	r0, #1
 8000750:	f7ff fd46 	bl	80001e0 <LCD_command>
            LCD_command(0x80);  // Cursor a línea 1
 8000754:	2080      	movs	r0, #128	@ 0x80
 8000756:	f7ff fd43 	bl	80001e0 <LCD_command>
            lcd_step++;
 800075a:	4b34      	ldr	r3, [pc, #208]	@ (800082c <TIM2_IRQHandler+0x350>)
 800075c:	781b      	ldrb	r3, [r3, #0]
 800075e:	b2db      	uxtb	r3, r3
 8000760:	3301      	adds	r3, #1
 8000762:	b2da      	uxtb	r2, r3
 8000764:	4b31      	ldr	r3, [pc, #196]	@ (800082c <TIM2_IRQHandler+0x350>)
 8000766:	701a      	strb	r2, [r3, #0]
            break;
 8000768:	e05c      	b.n	8000824 <TIM2_IRQHandler+0x348>

        case 27: LCD_data('3'); lcd_step++; break;
 800076a:	2033      	movs	r0, #51	@ 0x33
 800076c:	f7ff fd78 	bl	8000260 <LCD_data>
 8000770:	4b2e      	ldr	r3, [pc, #184]	@ (800082c <TIM2_IRQHandler+0x350>)
 8000772:	781b      	ldrb	r3, [r3, #0]
 8000774:	b2db      	uxtb	r3, r3
 8000776:	3301      	adds	r3, #1
 8000778:	b2da      	uxtb	r2, r3
 800077a:	4b2c      	ldr	r3, [pc, #176]	@ (800082c <TIM2_IRQHandler+0x350>)
 800077c:	701a      	strb	r2, [r3, #0]
 800077e:	e051      	b.n	8000824 <TIM2_IRQHandler+0x348>
        case 28: LCD_data('.'); lcd_step++; break;
 8000780:	202e      	movs	r0, #46	@ 0x2e
 8000782:	f7ff fd6d 	bl	8000260 <LCD_data>
 8000786:	4b29      	ldr	r3, [pc, #164]	@ (800082c <TIM2_IRQHandler+0x350>)
 8000788:	781b      	ldrb	r3, [r3, #0]
 800078a:	b2db      	uxtb	r3, r3
 800078c:	3301      	adds	r3, #1
 800078e:	b2da      	uxtb	r2, r3
 8000790:	4b26      	ldr	r3, [pc, #152]	@ (800082c <TIM2_IRQHandler+0x350>)
 8000792:	701a      	strb	r2, [r3, #0]
 8000794:	e046      	b.n	8000824 <TIM2_IRQHandler+0x348>
        case 29: LCD_data('S'); lcd_step++; break;
 8000796:	2053      	movs	r0, #83	@ 0x53
 8000798:	f7ff fd62 	bl	8000260 <LCD_data>
 800079c:	4b23      	ldr	r3, [pc, #140]	@ (800082c <TIM2_IRQHandler+0x350>)
 800079e:	781b      	ldrb	r3, [r3, #0]
 80007a0:	b2db      	uxtb	r3, r3
 80007a2:	3301      	adds	r3, #1
 80007a4:	b2da      	uxtb	r2, r3
 80007a6:	4b21      	ldr	r3, [pc, #132]	@ (800082c <TIM2_IRQHandler+0x350>)
 80007a8:	701a      	strb	r2, [r3, #0]
 80007aa:	e03b      	b.n	8000824 <TIM2_IRQHandler+0x348>
        case 30: LCD_data('e'); lcd_step++; break;
 80007ac:	2065      	movs	r0, #101	@ 0x65
 80007ae:	f7ff fd57 	bl	8000260 <LCD_data>
 80007b2:	4b1e      	ldr	r3, [pc, #120]	@ (800082c <TIM2_IRQHandler+0x350>)
 80007b4:	781b      	ldrb	r3, [r3, #0]
 80007b6:	b2db      	uxtb	r3, r3
 80007b8:	3301      	adds	r3, #1
 80007ba:	b2da      	uxtb	r2, r3
 80007bc:	4b1b      	ldr	r3, [pc, #108]	@ (800082c <TIM2_IRQHandler+0x350>)
 80007be:	701a      	strb	r2, [r3, #0]
 80007c0:	e030      	b.n	8000824 <TIM2_IRQHandler+0x348>
        case 31: LCD_data('r'); lcd_step++; break;
 80007c2:	2072      	movs	r0, #114	@ 0x72
 80007c4:	f7ff fd4c 	bl	8000260 <LCD_data>
 80007c8:	4b18      	ldr	r3, [pc, #96]	@ (800082c <TIM2_IRQHandler+0x350>)
 80007ca:	781b      	ldrb	r3, [r3, #0]
 80007cc:	b2db      	uxtb	r3, r3
 80007ce:	3301      	adds	r3, #1
 80007d0:	b2da      	uxtb	r2, r3
 80007d2:	4b16      	ldr	r3, [pc, #88]	@ (800082c <TIM2_IRQHandler+0x350>)
 80007d4:	701a      	strb	r2, [r3, #0]
 80007d6:	e025      	b.n	8000824 <TIM2_IRQHandler+0x348>
        case 32: LCD_data('i'); lcd_step++; break;
 80007d8:	2069      	movs	r0, #105	@ 0x69
 80007da:	f7ff fd41 	bl	8000260 <LCD_data>
 80007de:	4b13      	ldr	r3, [pc, #76]	@ (800082c <TIM2_IRQHandler+0x350>)
 80007e0:	781b      	ldrb	r3, [r3, #0]
 80007e2:	b2db      	uxtb	r3, r3
 80007e4:	3301      	adds	r3, #1
 80007e6:	b2da      	uxtb	r2, r3
 80007e8:	4b10      	ldr	r3, [pc, #64]	@ (800082c <TIM2_IRQHandler+0x350>)
 80007ea:	701a      	strb	r2, [r3, #0]
 80007ec:	e01a      	b.n	8000824 <TIM2_IRQHandler+0x348>
        case 33: LCD_data('a'); lcd_step++; break;
 80007ee:	2061      	movs	r0, #97	@ 0x61
 80007f0:	f7ff fd36 	bl	8000260 <LCD_data>
 80007f4:	4b0d      	ldr	r3, [pc, #52]	@ (800082c <TIM2_IRQHandler+0x350>)
 80007f6:	781b      	ldrb	r3, [r3, #0]
 80007f8:	b2db      	uxtb	r3, r3
 80007fa:	3301      	adds	r3, #1
 80007fc:	b2da      	uxtb	r2, r3
 80007fe:	4b0b      	ldr	r3, [pc, #44]	@ (800082c <TIM2_IRQHandler+0x350>)
 8000800:	701a      	strb	r2, [r3, #0]
 8000802:	e00f      	b.n	8000824 <TIM2_IRQHandler+0x348>
        case 34: LCD_data('l'); lcd_step++; break;
 8000804:	206c      	movs	r0, #108	@ 0x6c
 8000806:	f7ff fd2b 	bl	8000260 <LCD_data>
 800080a:	4b08      	ldr	r3, [pc, #32]	@ (800082c <TIM2_IRQHandler+0x350>)
 800080c:	781b      	ldrb	r3, [r3, #0]
 800080e:	b2db      	uxtb	r3, r3
 8000810:	3301      	adds	r3, #1
 8000812:	b2da      	uxtb	r2, r3
 8000814:	4b05      	ldr	r3, [pc, #20]	@ (800082c <TIM2_IRQHandler+0x350>)
 8000816:	701a      	strb	r2, [r3, #0]
 8000818:	e004      	b.n	8000824 <TIM2_IRQHandler+0x348>

        case 35:
            lcd_step = 0; // Reiniciar para mostrar desde 1 otra vez
 800081a:	4b04      	ldr	r3, [pc, #16]	@ (800082c <TIM2_IRQHandler+0x350>)
 800081c:	2200      	movs	r2, #0
 800081e:	701a      	strb	r2, [r3, #0]
            break;
 8000820:	e000      	b.n	8000824 <TIM2_IRQHandler+0x348>

        default:
            break;
 8000822:	46c0      	nop			@ (mov r8, r8)
    }
}
 8000824:	46c0      	nop			@ (mov r8, r8)
 8000826:	46bd      	mov	sp, r7
 8000828:	bd80      	pop	{r7, pc}
 800082a:	46c0      	nop			@ (mov r8, r8)
 800082c:	2000001d 	.word	0x2000001d
 8000830:	08000a00 	.word	0x08000a00

08000834 <TIM21config>:

void TIM21config (void) {
 8000834:	b580      	push	{r7, lr}
 8000836:	af00      	add	r7, sp, #0
	RCC->APB2ENR |= (1<<2); //Se encuentra operando a 1s
 8000838:	4b0e      	ldr	r3, [pc, #56]	@ (8000874 <TIM21config+0x40>)
 800083a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800083c:	4b0d      	ldr	r3, [pc, #52]	@ (8000874 <TIM21config+0x40>)
 800083e:	2104      	movs	r1, #4
 8000840:	430a      	orrs	r2, r1
 8000842:	635a      	str	r2, [r3, #52]	@ 0x34
	TIM21->PSC = 16000-1;
 8000844:	4b0c      	ldr	r3, [pc, #48]	@ (8000878 <TIM21config+0x44>)
 8000846:	4a0d      	ldr	r2, [pc, #52]	@ (800087c <TIM21config+0x48>)
 8000848:	629a      	str	r2, [r3, #40]	@ 0x28
	TIM21->ARR = 2-1;
 800084a:	4b0b      	ldr	r3, [pc, #44]	@ (8000878 <TIM21config+0x44>)
 800084c:	2201      	movs	r2, #1
 800084e:	62da      	str	r2, [r3, #44]	@ 0x2c
	TIM21->CNT = 0;
 8000850:	4b09      	ldr	r3, [pc, #36]	@ (8000878 <TIM21config+0x44>)
 8000852:	2200      	movs	r2, #0
 8000854:	625a      	str	r2, [r3, #36]	@ 0x24
	TIM21->CR1 = (1<<0);
 8000856:	4b08      	ldr	r3, [pc, #32]	@ (8000878 <TIM21config+0x44>)
 8000858:	2201      	movs	r2, #1
 800085a:	601a      	str	r2, [r3, #0]
	TIM21->DIER |= (1<<0);  //Enable Mode Interrupt
 800085c:	4b06      	ldr	r3, [pc, #24]	@ (8000878 <TIM21config+0x44>)
 800085e:	68da      	ldr	r2, [r3, #12]
 8000860:	4b05      	ldr	r3, [pc, #20]	@ (8000878 <TIM21config+0x44>)
 8000862:	2101      	movs	r1, #1
 8000864:	430a      	orrs	r2, r1
 8000866:	60da      	str	r2, [r3, #12]
	NVIC_EnableIRQ(TIM21_IRQn);
 8000868:	2014      	movs	r0, #20
 800086a:	f7ff fc4d 	bl	8000108 <__NVIC_EnableIRQ>
}
 800086e:	46c0      	nop			@ (mov r8, r8)
 8000870:	46bd      	mov	sp, r7
 8000872:	bd80      	pop	{r7, pc}
 8000874:	40021000 	.word	0x40021000
 8000878:	40010800 	.word	0x40010800
 800087c:	00003e7f 	.word	0x00003e7f

08000880 <TIM21_IRQHandler>:

void TIM21_IRQHandler() {
 8000880:	b580      	push	{r7, lr}
 8000882:	af00      	add	r7, sp, #0
	GPIOB->ODR = 0x0000;   // Apagar los displays antes de escribir
 8000884:	4b29      	ldr	r3, [pc, #164]	@ (800092c <TIM21_IRQHandler+0xac>)
 8000886:	2200      	movs	r2, #0
 8000888:	615a      	str	r2, [r3, #20]
    switch (display_index) {
 800088a:	4b29      	ldr	r3, [pc, #164]	@ (8000930 <TIM21_IRQHandler+0xb0>)
 800088c:	781b      	ldrb	r3, [r3, #0]
 800088e:	b2db      	uxtb	r3, r3
 8000890:	2b05      	cmp	r3, #5
 8000892:	d82f      	bhi.n	80008f4 <TIM21_IRQHandler+0x74>
 8000894:	009a      	lsls	r2, r3, #2
 8000896:	4b27      	ldr	r3, [pc, #156]	@ (8000934 <TIM21_IRQHandler+0xb4>)
 8000898:	18d3      	adds	r3, r2, r3
 800089a:	681b      	ldr	r3, [r3, #0]
 800089c:	469f      	mov	pc, r3
        case 0:
            GPIOB->ODR |= NUM_0 | (1<<7);  // Número 4 en display 1
 800089e:	4b23      	ldr	r3, [pc, #140]	@ (800092c <TIM21_IRQHandler+0xac>)
 80008a0:	695a      	ldr	r2, [r3, #20]
 80008a2:	4b22      	ldr	r3, [pc, #136]	@ (800092c <TIM21_IRQHandler+0xac>)
 80008a4:	21bf      	movs	r1, #191	@ 0xbf
 80008a6:	430a      	orrs	r2, r1
 80008a8:	615a      	str	r2, [r3, #20]
            break;
 80008aa:	e027      	b.n	80008fc <TIM21_IRQHandler+0x7c>
        case 1:
            GPIOB->ODR |= NUM_0 | (1<<8);  // Número 0 en display 2
 80008ac:	4b1f      	ldr	r3, [pc, #124]	@ (800092c <TIM21_IRQHandler+0xac>)
 80008ae:	695a      	ldr	r2, [r3, #20]
 80008b0:	4b1e      	ldr	r3, [pc, #120]	@ (800092c <TIM21_IRQHandler+0xac>)
 80008b2:	2140      	movs	r1, #64	@ 0x40
 80008b4:	31ff      	adds	r1, #255	@ 0xff
 80008b6:	430a      	orrs	r2, r1
 80008b8:	615a      	str	r2, [r3, #20]
            break;
 80008ba:	e01f      	b.n	80008fc <TIM21_IRQHandler+0x7c>
        case 2:
            GPIOB->ODR |= NUM_0 | (1<<9);  // Número 4 en display 3
 80008bc:	4b1b      	ldr	r3, [pc, #108]	@ (800092c <TIM21_IRQHandler+0xac>)
 80008be:	695a      	ldr	r2, [r3, #20]
 80008c0:	4b1a      	ldr	r3, [pc, #104]	@ (800092c <TIM21_IRQHandler+0xac>)
 80008c2:	491d      	ldr	r1, [pc, #116]	@ (8000938 <TIM21_IRQHandler+0xb8>)
 80008c4:	430a      	orrs	r2, r1
 80008c6:	615a      	str	r2, [r3, #20]
            break;
 80008c8:	e018      	b.n	80008fc <TIM21_IRQHandler+0x7c>
        case 3:
            GPIOB->ODR |= NUM_0 | (1<<10); // Número 5 en display 4
 80008ca:	4b18      	ldr	r3, [pc, #96]	@ (800092c <TIM21_IRQHandler+0xac>)
 80008cc:	695a      	ldr	r2, [r3, #20]
 80008ce:	4b17      	ldr	r3, [pc, #92]	@ (800092c <TIM21_IRQHandler+0xac>)
 80008d0:	491a      	ldr	r1, [pc, #104]	@ (800093c <TIM21_IRQHandler+0xbc>)
 80008d2:	430a      	orrs	r2, r1
 80008d4:	615a      	str	r2, [r3, #20]
            break;
 80008d6:	e011      	b.n	80008fc <TIM21_IRQHandler+0x7c>
        case 4:
            GPIOB->ODR |= NUM_0 | (1<<11); // Número 5 en display 5
 80008d8:	4b14      	ldr	r3, [pc, #80]	@ (800092c <TIM21_IRQHandler+0xac>)
 80008da:	695a      	ldr	r2, [r3, #20]
 80008dc:	4b13      	ldr	r3, [pc, #76]	@ (800092c <TIM21_IRQHandler+0xac>)
 80008de:	4918      	ldr	r1, [pc, #96]	@ (8000940 <TIM21_IRQHandler+0xc0>)
 80008e0:	430a      	orrs	r2, r1
 80008e2:	615a      	str	r2, [r3, #20]
            break;
 80008e4:	e00a      	b.n	80008fc <TIM21_IRQHandler+0x7c>
        case 5:
            GPIOB->ODR |= NUM_0 | (1<<12); // Número 5 en display 6
 80008e6:	4b11      	ldr	r3, [pc, #68]	@ (800092c <TIM21_IRQHandler+0xac>)
 80008e8:	695a      	ldr	r2, [r3, #20]
 80008ea:	4b10      	ldr	r3, [pc, #64]	@ (800092c <TIM21_IRQHandler+0xac>)
 80008ec:	4915      	ldr	r1, [pc, #84]	@ (8000944 <TIM21_IRQHandler+0xc4>)
 80008ee:	430a      	orrs	r2, r1
 80008f0:	615a      	str	r2, [r3, #20]
            break;
 80008f2:	e003      	b.n	80008fc <TIM21_IRQHandler+0x7c>
        default:
            display_index = 0; // Reiniciar ciclo
 80008f4:	4b0e      	ldr	r3, [pc, #56]	@ (8000930 <TIM21_IRQHandler+0xb0>)
 80008f6:	2200      	movs	r2, #0
 80008f8:	701a      	strb	r2, [r3, #0]
            return;
 80008fa:	e014      	b.n	8000926 <TIM21_IRQHandler+0xa6>
    }

    display_index++;
 80008fc:	4b0c      	ldr	r3, [pc, #48]	@ (8000930 <TIM21_IRQHandler+0xb0>)
 80008fe:	781b      	ldrb	r3, [r3, #0]
 8000900:	b2db      	uxtb	r3, r3
 8000902:	3301      	adds	r3, #1
 8000904:	b2da      	uxtb	r2, r3
 8000906:	4b0a      	ldr	r3, [pc, #40]	@ (8000930 <TIM21_IRQHandler+0xb0>)
 8000908:	701a      	strb	r2, [r3, #0]
    if (display_index > 5) display_index = 0; // Ciclar
 800090a:	4b09      	ldr	r3, [pc, #36]	@ (8000930 <TIM21_IRQHandler+0xb0>)
 800090c:	781b      	ldrb	r3, [r3, #0]
 800090e:	b2db      	uxtb	r3, r3
 8000910:	2b05      	cmp	r3, #5
 8000912:	d902      	bls.n	800091a <TIM21_IRQHandler+0x9a>
 8000914:	4b06      	ldr	r3, [pc, #24]	@ (8000930 <TIM21_IRQHandler+0xb0>)
 8000916:	2200      	movs	r2, #0
 8000918:	701a      	strb	r2, [r3, #0]
	TIM21->SR &= ~(1<<0);  //Clear UIF flag
 800091a:	4b0b      	ldr	r3, [pc, #44]	@ (8000948 <TIM21_IRQHandler+0xc8>)
 800091c:	691a      	ldr	r2, [r3, #16]
 800091e:	4b0a      	ldr	r3, [pc, #40]	@ (8000948 <TIM21_IRQHandler+0xc8>)
 8000920:	2101      	movs	r1, #1
 8000922:	438a      	bics	r2, r1
 8000924:	611a      	str	r2, [r3, #16]

}
 8000926:	46bd      	mov	sp, r7
 8000928:	bd80      	pop	{r7, pc}
 800092a:	46c0      	nop			@ (mov r8, r8)
 800092c:	50000400 	.word	0x50000400
 8000930:	2000001c 	.word	0x2000001c
 8000934:	08000a90 	.word	0x08000a90
 8000938:	0000023f 	.word	0x0000023f
 800093c:	0000043f 	.word	0x0000043f
 8000940:	0000083f 	.word	0x0000083f
 8000944:	0000103f 	.word	0x0000103f
 8000948:	40010800 	.word	0x40010800

0800094c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800094c:	480d      	ldr	r0, [pc, #52]	@ (8000984 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800094e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000950:	e000      	b.n	8000954 <Reset_Handler+0x8>
 8000952:	bf00      	nop

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000954:	480c      	ldr	r0, [pc, #48]	@ (8000988 <LoopForever+0x6>)
  ldr r1, =_edata
 8000956:	490d      	ldr	r1, [pc, #52]	@ (800098c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000958:	4a0d      	ldr	r2, [pc, #52]	@ (8000990 <LoopForever+0xe>)
  movs r3, #0
 800095a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800095c:	e002      	b.n	8000964 <LoopCopyDataInit>

0800095e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800095e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000960:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000962:	3304      	adds	r3, #4

08000964 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000964:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000966:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000968:	d3f9      	bcc.n	800095e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800096a:	4a0a      	ldr	r2, [pc, #40]	@ (8000994 <LoopForever+0x12>)
  ldr r4, =_ebss
 800096c:	4c0a      	ldr	r4, [pc, #40]	@ (8000998 <LoopForever+0x16>)
  movs r3, #0
 800096e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000970:	e001      	b.n	8000976 <LoopFillZerobss>

08000972 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000972:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000974:	3204      	adds	r2, #4

08000976 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000976:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000978:	d3fb      	bcc.n	8000972 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800097a:	f000 f811 	bl	80009a0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800097e:	f7ff fc13 	bl	80001a8 <main>

08000982 <LoopForever>:

LoopForever:
  b LoopForever
 8000982:	e7fe      	b.n	8000982 <LoopForever>
  ldr   r0, =_estack
 8000984:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8000988:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800098c:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000990:	08000ab0 	.word	0x08000ab0
  ldr r2, =_sbss
 8000994:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000998:	20000020 	.word	0x20000020

0800099c <ADC_COMP_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800099c:	e7fe      	b.n	800099c <ADC_COMP_IRQHandler>
	...

080009a0 <__libc_init_array>:
 80009a0:	b570      	push	{r4, r5, r6, lr}
 80009a2:	2600      	movs	r6, #0
 80009a4:	4c0c      	ldr	r4, [pc, #48]	@ (80009d8 <__libc_init_array+0x38>)
 80009a6:	4d0d      	ldr	r5, [pc, #52]	@ (80009dc <__libc_init_array+0x3c>)
 80009a8:	1b64      	subs	r4, r4, r5
 80009aa:	10a4      	asrs	r4, r4, #2
 80009ac:	42a6      	cmp	r6, r4
 80009ae:	d109      	bne.n	80009c4 <__libc_init_array+0x24>
 80009b0:	2600      	movs	r6, #0
 80009b2:	f000 f819 	bl	80009e8 <_init>
 80009b6:	4c0a      	ldr	r4, [pc, #40]	@ (80009e0 <__libc_init_array+0x40>)
 80009b8:	4d0a      	ldr	r5, [pc, #40]	@ (80009e4 <__libc_init_array+0x44>)
 80009ba:	1b64      	subs	r4, r4, r5
 80009bc:	10a4      	asrs	r4, r4, #2
 80009be:	42a6      	cmp	r6, r4
 80009c0:	d105      	bne.n	80009ce <__libc_init_array+0x2e>
 80009c2:	bd70      	pop	{r4, r5, r6, pc}
 80009c4:	00b3      	lsls	r3, r6, #2
 80009c6:	58eb      	ldr	r3, [r5, r3]
 80009c8:	4798      	blx	r3
 80009ca:	3601      	adds	r6, #1
 80009cc:	e7ee      	b.n	80009ac <__libc_init_array+0xc>
 80009ce:	00b3      	lsls	r3, r6, #2
 80009d0:	58eb      	ldr	r3, [r5, r3]
 80009d2:	4798      	blx	r3
 80009d4:	3601      	adds	r6, #1
 80009d6:	e7f2      	b.n	80009be <__libc_init_array+0x1e>
 80009d8:	08000aa8 	.word	0x08000aa8
 80009dc:	08000aa8 	.word	0x08000aa8
 80009e0:	08000aac 	.word	0x08000aac
 80009e4:	08000aa8 	.word	0x08000aa8

080009e8 <_init>:
 80009e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80009ea:	46c0      	nop			@ (mov r8, r8)
 80009ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80009ee:	bc08      	pop	{r3}
 80009f0:	469e      	mov	lr, r3
 80009f2:	4770      	bx	lr

080009f4 <_fini>:
 80009f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80009f6:	46c0      	nop			@ (mov r8, r8)
 80009f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80009fa:	bc08      	pop	{r3}
 80009fc:	469e      	mov	lr, r3
 80009fe:	4770      	bx	lr
